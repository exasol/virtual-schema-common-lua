[
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 20031,
                "start": 20010,
                "type": "doc.class"
            }
        ],
        "desc": " This class is the abstract base class of all query renderers.\n It takes care of handling the temporary storage of the query to be constructed.",
        "fields": [
            {
                "desc": "Default configuration with double quotes for identifiers.",
                "extends": {
                    "finish": 100093,
                    "start": 100048,
                    "type": "table",
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 100045,
                "name": "DEFAULT_APPENDER_CONFIG",
                "rawdesc": "Default configuration with double quotes for identifiers.",
                "start": 100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "token to append",
                            "finish": 270044,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 270039,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                    "finish": 290003,
                    "rawdesc": " Append a token to the query.",
                    "start": 270000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 270038,
                "name": "_append",
                "rawdesc": " Append a token to the query.",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 330046,
                            "rawdesc": "to append",
                            "start": 330043,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                    "finish": 350003,
                    "rawdesc": " Append a list of tokens to the query.",
                    "start": 330000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 330042,
                "name": "_append_all",
                "rawdesc": " Append a list of tokens to the query.",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 560063,
                            "name": "data_type",
                            "start": 560054,
                            "type": "local",
                            "view": "CharacterTypeDefinition"
                        }
                    ],
                    "finish": 650003,
                    "start": 560000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_character_type(data_type: CharacterTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 560053,
                "name": "_append_character_type",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": " luacheck: max line length 240",
                            "finish": 1240058,
                            "name": "data_type",
                            "rawdesc": " luacheck: max line length 240",
                            "start": 1240049,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "finish": 1460003,
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_data_type(data_type: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1240048,
                "name": "_append_data_type",
                "start": 1240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 470008,
                            "name": "self",
                            "start": 470008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 470069,
                            "name": "data_type",
                            "start": 470060,
                            "type": "local",
                            "view": "DecimalTypeDefinition"
                        }
                    ],
                    "finish": 530003,
                    "start": 470000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_decimal_type_details(data_type: DecimalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 470059,
                "name": "_append_decimal_type_details",
                "start": 470009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 750008,
                            "name": "self",
                            "start": 750008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 750057,
                            "name": "data_type",
                            "start": 750048,
                            "type": "local",
                            "view": "GeometryTypeDefinition"
                        }
                    ],
                    "finish": 820003,
                    "start": 750000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_geometry(data_type: GeometryTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 750047,
                "name": "_append_geometry",
                "start": 750009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 1140057,
                            "name": "data_type",
                            "start": 1140048,
                            "type": "local",
                            "view": "HashtypeTypeDefinition"
                        }
                    ],
                    "finish": 1210003,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_hashtype(data_type: HashtypeTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1140047,
                "name": "_append_hashtype",
                "start": 1140009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                "extends": {
                    "args": [
                        {
                            "finish": 1580008,
                            "name": "self",
                            "start": 1580008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "identifier",
                            "finish": 1580060,
                            "name": "identifier",
                            "rawdesc": "identifier",
                            "start": 1580050,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                    "finish": 1630003,
                    "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                    "start": 1580000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_identifier(identifier: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1580049,
                "name": "_append_identifier",
                "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                "start": 1580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 850057,
                            "name": "data_type",
                            "start": 850048,
                            "type": "local",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "finish": 1110003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_interval(data_type: IntervalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 850047,
                "name": "_append_interval",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                "extends": {
                    "args": [
                        {
                            "finish": 1500008,
                            "name": "self",
                            "start": 1500008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "string literal",
                            "finish": 1500061,
                            "name": "literal",
                            "rawdesc": "string literal",
                            "start": 1500054,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                    "finish": 1540003,
                    "rawdesc": " Append a string literal and enclose it in single quotes",
                    "start": 1500000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_string_literal(literal: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1500053,
                "name": "_append_string_literal",
                "rawdesc": " Append a string literal and enclose it in single quotes",
                "start": 1500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680008,
                            "name": "self",
                            "start": 680008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 680058,
                            "name": "data_type",
                            "start": 680049,
                            "type": "local",
                            "view": "TimestampTypeDefinition"
                        }
                    ],
                    "finish": 720003,
                    "start": 680000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_timestamp(data_type: TimestampTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 680048,
                "name": "_append_timestamp",
                "start": 680009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "finish": 40041,
                    "start": 40027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40041,
                            "start": 40027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 40041,
                "name": "_appender_config",
                "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "position in the comma-separated list",
                            "finish": 400043,
                            "name": "index",
                            "rawdesc": "position in the comma-separated list",
                            "start": 400038,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                    "finish": 440003,
                    "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                    "start": 400000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_comma(index: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 400037,
                "name": "_comma",
                "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Initializes the query appender and verifies that all parameters are set.\nRaises an error if any of the parameters is missing.\n\n@*param* `out_query` — query object that the appender appends to\n\n@*param* `appender_config` — configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "args": [
                        {
                            "finish": 180008,
                            "name": "self",
                            "start": 180008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "query object that the appender appends to",
                            "finish": 180046,
                            "name": "out_query",
                            "rawdesc": "query object that the appender appends to",
                            "start": 180037,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                            "finish": 180063,
                            "name": "appender_config",
                            "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                            "start": 180048,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": "Initializes the query appender and verifies that all parameters are set.\nRaises an error if any of the parameters is missing.\n\n@*param* `out_query` — query object that the appender appends to\n\n@*param* `appender_config` — configuration for the query renderer (e.g. containing identifier quoting)",
                    "finish": 230003,
                    "rawdesc": "Initializes the query appender and verifies that all parameters are set.\nRaises an error if any of the parameters is missing.",
                    "start": 180000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_init(out_query: Query, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 180036,
                "name": "_init",
                "rawdesc": "Initializes the query appender and verifies that all parameters are set.\nRaises an error if any of the parameters is missing.",
                "start": 180009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "query object that the appender appends to",
                "extends": {
                    "finish": 30026,
                    "start": 30021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30026,
                            "start": 30021,
                            "type": "doc.type.name",
                            "view": "Query"
                        }
                    ],
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 30026,
                "name": "_out_query",
                "rawdesc": "query object that the appender appends to",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "AbstractQueryAppender",
        "rawdesc": " This class is the abstract base class of all query renderers.\n It takes care of handling the temporary storage of the query to be constructed.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 80038,
                "start": 80010,
                "type": "doc.class"
            }
        ],
        "desc": " This class implements an abstract base adapter with common behavior for some of the request callback functions.\n\n When you derive a concrete adapter from this base class, we recommend keeping it stateless. This makes\n parallelization easier, reduces complexity and saves you the trouble of cleaning up in the drop-virtual-schema\n request.\n\n [impl -> dsn~lua-virtual-schema-adapter-abstraction~0]\n",
        "fields": [
            {
                "desc": " Define the list of all capabilities this adapter supports.\n Override this method in derived adapter class. Note that this differs from `get_capabilities` because\n the later takes exclusions defined by the user into consideration.\n\n@*return* `capabilities` — list of all capabilities supported by this adapter",
                "extends": {
                    "args": [
                        {
                            "finish": 390008,
                            "name": "self",
                            "start": 390008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        }
                    ],
                    "desc": " Define the list of all capabilities this adapter supports.\n Override this method in derived adapter class. Note that this differs from `get_capabilities` because\n the later takes exclusions defined by the user into consideration.\n\n@*return* `capabilities` — list of all capabilities supported by this adapter",
                    "finish": 410003,
                    "rawdesc": " Define the list of all capabilities this adapter supports.\n Override this method in derived adapter class. Note that this differs from `get_capabilities` because\n the later takes exclusions defined by the user into consideration.",
                    "returns": [
                        {
                            "desc": "list of all capabilities supported by this adapter",
                            "name": "capabilities",
                            "rawdesc": "list of all capabilities supported by this adapter",
                            "type": "function.return",
                            "view": "string[]"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:_define_capabilities()\n  -> capabilities: string[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 390058,
                "name": "_define_capabilities",
                "rawdesc": " Define the list of all capabilities this adapter supports.\n Override this method in derived adapter class. Note that this differs from `get_capabilities` because\n the later takes exclusions defined by the user into consideration.",
                "start": 390009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 130008,
                            "name": "self",
                            "start": 130008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        }
                    ],
                    "finish": 150003,
                    "start": 130000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:_init()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 130043,
                "name": "_init",
                "start": 130009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create the Virtual Schema.\n Create the virtual schema and provide the corresponding metadata.\n\n@*param* `_request` — virtual schema request\n\n@*param* `_properties` — user-defined properties\n\n@*return* `response` — metadata representing the structure and datatypes of the data source from Exasol's point of view",
                "extends": {
                    "args": [
                        {
                            "finish": 480008,
                            "name": "self",
                            "start": 480008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "virtual schema request",
                            "finish": 480068,
                            "name": "_request",
                            "rawdesc": "virtual schema request",
                            "start": 480060,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "user-defined properties",
                            "finish": 480081,
                            "name": "_properties",
                            "rawdesc": "user-defined properties",
                            "start": 480070,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Create the Virtual Schema.\n Create the virtual schema and provide the corresponding metadata.\n\n@*param* `_request` — virtual schema request\n\n@*param* `_properties` — user-defined properties\n\n@*return* `response` — metadata representing the structure and datatypes of the data source from Exasol's point of view",
                    "finish": 500003,
                    "rawdesc": " Create the Virtual Schema.\n Create the virtual schema and provide the corresponding metadata.",
                    "returns": [
                        {
                            "desc": "metadata representing the structure and datatypes of the data source from Exasol's point of view",
                            "name": "response",
                            "rawdesc": "metadata representing the structure and datatypes of the data source from Exasol's point of view",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 480000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:create_virtual_schema(_request: any, _properties: any)\n  -> response: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 480059,
                "name": "create_virtual_schema",
                "rawdesc": " Create the Virtual Schema.\n Create the virtual schema and provide the corresponding metadata.",
                "start": 480009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Drop the virtual schema.\n Override this method to implement clean-up if the adapter is not stateless.\n\n@*param* `_request` — virtual schema request (not used)\n\n@*param* `_properties` — user-defined properties\n\n@*return* `response` — response confirming the request (otherwise empty)",
                "extends": {
                    "args": [
                        {
                            "finish": 1260008,
                            "name": "self",
                            "start": 1260008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "virtual schema request (not used)",
                            "finish": 1260066,
                            "name": "_request",
                            "rawdesc": "virtual schema request (not used)",
                            "start": 1260058,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "user-defined properties",
                            "finish": 1260079,
                            "name": "_properties",
                            "rawdesc": "user-defined properties",
                            "start": 1260068,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Drop the virtual schema.\n Override this method to implement clean-up if the adapter is not stateless.\n\n@*param* `_request` — virtual schema request (not used)\n\n@*param* `_properties` — user-defined properties\n\n@*return* `response` — response confirming the request (otherwise empty)",
                    "finish": 1280003,
                    "rawdesc": " Drop the virtual schema.\n Override this method to implement clean-up if the adapter is not stateless.",
                    "returns": [
                        {
                            "desc": "response confirming the request (otherwise empty)",
                            "name": "response",
                            "rawdesc": "response confirming the request (otherwise empty)",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1260000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:drop_virtual_schema(_request: any, _properties: any)\n  -> response: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 1260057,
                "name": "drop_virtual_schema",
                "rawdesc": " Drop the virtual schema.\n Override this method to implement clean-up if the adapter is not stateless.",
                "start": 1260009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the adapter capabilities.\n The basic `get_capabilities` handler in this class will out-of-the-box fit all derived adapters with the\n rare exception of those that decide on capabilities at runtime depending on for example the version number of the\n remote data source.\n\n@*param* `_request` — virtual schema request\n\n@*param* `properties` — user-defined properties\n\n@*return* `capabilities` — list of non-excluded adapter capabilities",
                "extends": {
                    "args": [
                        {
                            "finish": 1010008,
                            "name": "self",
                            "start": 1010008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "virtual schema request",
                            "finish": 1010063,
                            "name": "_request",
                            "rawdesc": "virtual schema request",
                            "start": 1010055,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "user-defined properties",
                            "finish": 1010075,
                            "name": "properties",
                            "rawdesc": "user-defined properties",
                            "start": 1010065,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Get the adapter capabilities.\n The basic `get_capabilities` handler in this class will out-of-the-box fit all derived adapters with the\n rare exception of those that decide on capabilities at runtime depending on for example the version number of the\n remote data source.\n\n@*param* `_request` — virtual schema request\n\n@*param* `properties` — user-defined properties\n\n@*return* `capabilities` — list of non-excluded adapter capabilities",
                    "finish": 1100003,
                    "rawdesc": " Get the adapter capabilities.\n The basic `get_capabilities` handler in this class will out-of-the-box fit all derived adapters with the\n rare exception of those that decide on capabilities at runtime depending on for example the version number of the\n remote data source.",
                    "returns": [
                        {
                            "desc": "list of non-excluded adapter capabilities",
                            "name": "capabilities",
                            "rawdesc": "list of non-excluded adapter capabilities",
                            "type": "function.return",
                            "view": "table<string, any>"
                        }
                    ],
                    "start": 1010000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:get_capabilities(_request: any, properties: any)\n  -> capabilities: table<string, any>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 1010054,
                "name": "get_capabilities",
                "rawdesc": " Get the adapter capabilities.\n The basic `get_capabilities` handler in this class will out-of-the-box fit all derived adapters with the\n rare exception of those that decide on capabilities at runtime depending on for example the version number of the\n remote data source.",
                "start": 1010009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the adapter name.\n\n@*return* `adapter_name` — name of the adapter",
                "extends": {
                    "args": [
                        {
                            "finish": 250008,
                            "name": "self",
                            "start": 250008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        }
                    ],
                    "desc": " Get the adapter name.\n\n@*return* `adapter_name` — name of the adapter",
                    "finish": 270003,
                    "rawdesc": " Get the adapter name.",
                    "returns": [
                        {
                            "desc": "name of the adapter",
                            "name": "adapter_name",
                            "rawdesc": "name of the adapter",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 250000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:get_name()\n  -> adapter_name: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 250046,
                "name": "get_name",
                "rawdesc": " Get the adapter name.",
                "start": 250009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the adapter version.\n\n@*return* `version` — version of the adapter",
                "extends": {
                    "args": [
                        {
                            "finish": 310008,
                            "name": "self",
                            "start": 310008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        }
                    ],
                    "desc": " Get the adapter version.\n\n@*return* `version` — version of the adapter",
                    "finish": 330003,
                    "rawdesc": " Get the adapter version.",
                    "returns": [
                        {
                            "desc": "version of the adapter",
                            "name": "version",
                            "rawdesc": "version of the adapter",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 310000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:get_version()\n  -> version: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 310049,
                "name": "get_version",
                "rawdesc": " Get the adapter version.",
                "start": 310009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Push a query down to the data source\n\n@*param* `_request` — virtual schema request\n\n@*param* `_properties` — user-defined properties\n\n@*return* `rewritten_query` — rewritten query to be executed by the ExaLoader (`IMPORT`), value providing query\n\n `SELECT ... FROM VALUES`, not recommended) or local Exasol query (`SELECT`).",
                "extends": {
                    "args": [
                        {
                            "finish": 1170008,
                            "name": "self",
                            "start": 1170008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "virtual schema request",
                            "finish": 1170056,
                            "name": "_request",
                            "rawdesc": "virtual schema request",
                            "start": 1170048,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "user-defined properties",
                            "finish": 1170069,
                            "name": "_properties",
                            "rawdesc": "user-defined properties",
                            "start": 1170058,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Push a query down to the data source\n\n@*param* `_request` — virtual schema request\n\n@*param* `_properties` — user-defined properties\n\n@*return* `rewritten_query` — rewritten query to be executed by the ExaLoader (`IMPORT`), value providing query\n\n `SELECT ... FROM VALUES`, not recommended) or local Exasol query (`SELECT`).",
                    "finish": 1190003,
                    "rawdesc": " Push a query down to the data source\n `SELECT ... FROM VALUES`, not recommended) or local Exasol query (`SELECT`).",
                    "returns": [
                        {
                            "desc": "rewritten query to be executed by the ExaLoader (`IMPORT`), value providing query",
                            "name": "rewritten_query",
                            "rawdesc": "rewritten query to be executed by the ExaLoader (`IMPORT`), value providing query",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1170000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:push_down(_request: any, _properties: any)\n  -> rewritten_query: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 1170047,
                "name": "push_down",
                "rawdesc": " Push a query down to the data source\n `SELECT ... FROM VALUES`, not recommended) or local Exasol query (`SELECT`).",
                "start": 1170009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Refresh the Virtual Schema.\n This method reevaluates the metadata (structure and data types) that represents the data source.\n\n@*param* `_request` — virtual schema request\n\n@*param* `_properties` — user-defined properties\n\n@*return* `response` — same response as if you created a new Virtual Schema",
                "extends": {
                    "args": [
                        {
                            "finish": 700008,
                            "name": "self",
                            "start": 700008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "virtual schema request",
                            "finish": 700054,
                            "name": "_request",
                            "rawdesc": "virtual schema request",
                            "start": 700046,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "user-defined properties",
                            "finish": 700067,
                            "name": "_properties",
                            "rawdesc": "user-defined properties",
                            "start": 700056,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Refresh the Virtual Schema.\n This method reevaluates the metadata (structure and data types) that represents the data source.\n\n@*param* `_request` — virtual schema request\n\n@*param* `_properties` — user-defined properties\n\n@*return* `response` — same response as if you created a new Virtual Schema",
                    "finish": 720003,
                    "rawdesc": " Refresh the Virtual Schema.\n This method reevaluates the metadata (structure and data types) that represents the data source.",
                    "returns": [
                        {
                            "desc": "same response as if you created a new Virtual Schema",
                            "name": "response",
                            "rawdesc": "same response as if you created a new Virtual Schema",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 700000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:refresh(_request: any, _properties: any)\n  -> response: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 700045,
                "name": "refresh",
                "rawdesc": " Refresh the Virtual Schema.\n This method reevaluates the metadata (structure and data types) that represents the data source.",
                "start": 700009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Set new adapter properties.\n This request provides two sets of user-defined properties. The old ones (i.e. the ones that where set before this\n request) and the properties that the user changed.\n A new property with a key that is not present in the old set of properties means the user added a new property.\n New properties with existing keys override or unset existing properties. An unset property contains the special\n value `AdapterProperties.null`.\n\n@*param* `_request` — virtual schema request\n\n@*param* `_old_properties` — old user-defined properties\n\n@*param* `_new_properties` — new user-defined properties\n\n@*return* `response` — same response as if you created a new Virtual Schema",
                "extends": {
                    "args": [
                        {
                            "finish": 610008,
                            "name": "self",
                            "start": 610008,
                            "type": "self",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "virtual schema request",
                            "finish": 610061,
                            "name": "_request",
                            "rawdesc": "virtual schema request",
                            "start": 610053,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "old user-defined properties",
                            "finish": 610078,
                            "name": "_old_properties",
                            "rawdesc": "old user-defined properties",
                            "start": 610063,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "desc": "new user-defined properties",
                            "finish": 610095,
                            "name": "_new_properties",
                            "rawdesc": "new user-defined properties",
                            "start": 610080,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Set new adapter properties.\n This request provides two sets of user-defined properties. The old ones (i.e. the ones that where set before this\n request) and the properties that the user changed.\n A new property with a key that is not present in the old set of properties means the user added a new property.\n New properties with existing keys override or unset existing properties. An unset property contains the special\n value `AdapterProperties.null`.\n\n@*param* `_request` — virtual schema request\n\n@*param* `_old_properties` — old user-defined properties\n\n@*param* `_new_properties` — new user-defined properties\n\n@*return* `response` — same response as if you created a new Virtual Schema",
                    "finish": 630003,
                    "rawdesc": " Set new adapter properties.\n This request provides two sets of user-defined properties. The old ones (i.e. the ones that where set before this\n request) and the properties that the user changed.\n A new property with a key that is not present in the old set of properties means the user added a new property.\n New properties with existing keys override or unset existing properties. An unset property contains the special\n value `AdapterProperties.null`.",
                    "returns": [
                        {
                            "desc": "same response as if you created a new Virtual Schema",
                            "name": "response",
                            "rawdesc": "same response as if you created a new Virtual Schema",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 610000,
                    "type": "function",
                    "view": "(method) AbstractVirtualSchemaAdapter:set_properties(_request: any, _old_properties: any, _new_properties: any)\n  -> response: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AbstractVirtualSchemaAdapter.lua",
                "finish": 610052,
                "name": "set_properties",
                "rawdesc": " Set new adapter properties.\n This request provides two sets of user-defined properties. The old ones (i.e. the ones that where set before this\n request) and the properties that the user changed.\n A new property with a key that is not present in the old set of properties means the user added a new property.\n New properties with existing keys override or unset existing properties. An unset property contains the special\n value `AdapterProperties.null`.",
                "start": 610009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "AbstractVirtualSchemaAdapter",
        "rawdesc": " This class implements an abstract base adapter with common behavior for some of the request callback functions.\n\n When you derive a concrete adapter from this base class, we recommend keeping it stateless. This makes\n parallelization easier, reduces complexity and saves you the trouble of cleaning up in the drop-virtual-schema\n request.\n\n [impl -> dsn~lua-virtual-schema-adapter-abstraction~0]\n",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 10027,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " This class abstracts access to the user-defined properties of the Virtual Schema.",
        "fields": [
            {
                "desc": " This class abstracts access to the user-defined properties of the Virtual Schema.",
                "extends": {
                    "finish": 40045,
                    "start": 40028,
                    "type": "getlocal",
                    "view": "AdapterProperties"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 40025,
                "name": "__index",
                "rawdesc": " This class abstracts access to the user-defined properties of the Virtual Schema.",
                "start": 40000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Create a string representation",
                "extends": {
                    "args": [
                        {
                            "finish": 2110008,
                            "name": "self",
                            "start": 2110008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Create a string representation",
                    "finish": 2300003,
                    "rawdesc": " Create a string representation",
                    "returns": [
                        {
                            "name": "string_representation",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2110000,
                    "type": "function",
                    "view": "(method) AdapterProperties:__tostring()\n  -> string_representation: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 2110037,
                "name": "__tostring",
                "rawdesc": " Create a string representation",
                "start": 2110009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 230008,
                            "name": "self",
                            "start": 230008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "finish": 230047,
                            "name": "raw_properties",
                            "start": 230033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 250003,
                    "start": 230000,
                    "type": "function",
                    "view": "(method) AdapterProperties:_init(raw_properties: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 230032,
                "name": "_init",
                "start": 230009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 20047,
                    "start": 20026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 20047,
                            "start": 20026,
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 20047,
                "name": "_raw_properties",
                "start": 20010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 760008,
                            "name": "self",
                            "start": 760008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "finish": 880003,
                    "start": 760000,
                    "type": "function",
                    "view": "(method) AdapterProperties:_validate_debug_address()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 760050,
                "name": "_validate_debug_address",
                "start": 760009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1090008,
                            "name": "self",
                            "start": 1090008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "finish": 1190003,
                    "start": 1090000,
                    "type": "function",
                    "view": "(method) AdapterProperties:_validate_excluded_capabilities()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1090058,
                "name": "_validate_excluded_capabilities",
                "start": 1090009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 900008,
                            "name": "self",
                            "start": 900008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "finish": 1070003,
                    "start": 900000,
                    "type": "function",
                    "view": "(method) AdapterProperties:_validate_log_level()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 900046,
                "name": "_validate_log_level",
                "start": 900009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the class of the object",
                "extends": {
                    "args": [
                        {
                            "finish": 290008,
                            "name": "self",
                            "start": 290008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Get the class of the object",
                    "finish": 310003,
                    "rawdesc": " Get the class of the object",
                    "returns": [
                        {
                            "name": "class",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 290000,
                    "type": "function",
                    "view": "(method) AdapterProperties:class()\n  -> class: table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 290032,
                "name": "class",
                "rawdesc": " Get the class of the object",
                "start": 290009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the value of a property.\n\n@*param* `property_name` — name of the property to get",
                "extends": {
                    "args": [
                        {
                            "finish": 360008,
                            "name": "self",
                            "start": 360008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "name of the property to get",
                            "finish": 360044,
                            "name": "property_name",
                            "rawdesc": "name of the property to get",
                            "start": 360031,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Get the value of a property.\n\n@*param* `property_name` — name of the property to get",
                    "finish": 380003,
                    "rawdesc": " Get the value of a property.",
                    "returns": [
                        {
                            "name": "property_value",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 360000,
                    "type": "function",
                    "view": "(method) AdapterProperties:get(property_name: string)\n  -> property_value: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 360030,
                "name": "get",
                "rawdesc": " Get the value of a property.",
                "start": 360009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the debug address (host and port)\n\n@*return* `host,port` — or `nil` if the property has no value",
                "extends": {
                    "args": [
                        {
                            "finish": 1670008,
                            "name": "self",
                            "start": 1670008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Get the debug address (host and port)\n\n@*return* `host,port` — or `nil` if the property has no value",
                    "finish": 1810003,
                    "rawdesc": " Get the debug address (host and port)",
                    "returns": [
                        {
                            "desc": "or `nil` if the property has no value",
                            "name": "host",
                            "rawdesc": "or `nil` if the property has no value",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "desc": "or `nil` if the property has no value",
                            "name": "port",
                            "rawdesc": "or `nil` if the property has no value",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 1670000,
                    "type": "function",
                    "view": "(method) AdapterProperties:get_debug_address()\n  -> host: string?\n  2. port: integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1670044,
                "name": "get_debug_address",
                "rawdesc": " Get the debug address (host and port)",
                "start": 1670009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the list of names of the excluded capabilities.",
                "extends": {
                    "args": [
                        {
                            "finish": 1550008,
                            "name": "self",
                            "start": 1550008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Get the list of names of the excluded capabilities.",
                    "finish": 1570003,
                    "rawdesc": " Get the list of names of the excluded capabilities.",
                    "returns": [
                        {
                            "name": "excluded_capabilities",
                            "type": "function.return",
                            "view": "string[]?"
                        }
                    ],
                    "start": 1550000,
                    "type": "function",
                    "view": "(method) AdapterProperties:get_excluded_capabilities()\n  -> excluded_capabilities: string[]?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1550052,
                "name": "get_excluded_capabilities",
                "rawdesc": " Get the list of names of the excluded capabilities.",
                "start": 1550009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the log level",
                "extends": {
                    "args": [
                        {
                            "finish": 1430008,
                            "name": "self",
                            "start": 1430008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Get the log level",
                    "finish": 1450003,
                    "rawdesc": " Get the log level",
                    "returns": [
                        {
                            "name": "log_level",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1430000,
                    "type": "function",
                    "view": "(method) AdapterProperties:get_log_level()\n  -> log_level: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1430040,
                "name": "get_log_level",
                "rawdesc": " Get the log level",
                "start": 1430009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if log address is set\n\n@*return* `has_debug_address` — `true` if the log address is set",
                "extends": {
                    "args": [
                        {
                            "finish": 1850008,
                            "name": "self",
                            "start": 1850008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Check if log address is set\n\n@*return* `has_debug_address` — `true` if the log address is set",
                    "finish": 1870003,
                    "rawdesc": " Check if log address is set",
                    "returns": [
                        {
                            "desc": "`true` if the log address is set",
                            "name": "has_debug_address",
                            "rawdesc": "`true` if the log address is set",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1850000,
                    "type": "function",
                    "view": "(method) AdapterProperties:has_debug_address()\n  -> has_debug_address: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1850044,
                "name": "has_debug_address",
                "rawdesc": " Check if log address is set",
                "start": 1850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if excluded capabilities are set\n\n@*return* `has_excluded_capabilities` — `true` if the excluded capabilities are set",
                "extends": {
                    "args": [
                        {
                            "finish": 1610008,
                            "name": "self",
                            "start": 1610008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Check if excluded capabilities are set\n\n@*return* `has_excluded_capabilities` — `true` if the excluded capabilities are set",
                    "finish": 1630003,
                    "rawdesc": " Check if excluded capabilities are set",
                    "returns": [
                        {
                            "desc": "`true` if the excluded capabilities are set",
                            "name": "has_excluded_capabilities",
                            "rawdesc": "`true` if the excluded capabilities are set",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1610000,
                    "type": "function",
                    "view": "(method) AdapterProperties:has_excluded_capabilities()\n  -> has_excluded_capabilities: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1610052,
                "name": "has_excluded_capabilities",
                "rawdesc": " Check if excluded capabilities are set",
                "start": 1610009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if the log level is set\n\n@*return* `has_log_level` — `true` if the log level is set",
                "extends": {
                    "args": [
                        {
                            "finish": 1490008,
                            "name": "self",
                            "start": 1490008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Check if the log level is set\n\n@*return* `has_log_level` — `true` if the log level is set",
                    "finish": 1510003,
                    "rawdesc": " Check if the log level is set",
                    "returns": [
                        {
                            "desc": "`true` if the log level is set",
                            "name": "has_log_level",
                            "rawdesc": "`true` if the log level is set",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1490000,
                    "type": "function",
                    "view": "(method) AdapterProperties:has_log_level()\n  -> has_log_level: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1490040,
                "name": "has_log_level",
                "rawdesc": " Check if the log level is set",
                "start": 1490009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if the property has a non-empty value.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `has_value` — `true` if the property has a non-empty value (i.e. not `nil` or an empty string)",
                "extends": {
                    "args": [
                        {
                            "finish": 500008,
                            "name": "self",
                            "start": 500008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "name of the property to check",
                            "finish": 500050,
                            "name": "property_name",
                            "rawdesc": "name of the property to check",
                            "start": 500037,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Check if the property has a non-empty value.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `has_value` — `true` if the property has a non-empty value (i.e. not `nil` or an empty string)",
                    "finish": 530003,
                    "rawdesc": " Check if the property has a non-empty value.",
                    "returns": [
                        {
                            "desc": "`true` if the property has a non-empty value (i.e. not `nil` or an empty string)",
                            "name": "has_value",
                            "rawdesc": "`true` if the property has a non-empty value (i.e. not `nil` or an empty string)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 500000,
                    "type": "function",
                    "view": "(method) AdapterProperties:has_value(property_name: string)\n  -> has_value: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 500036,
                "name": "has_value",
                "rawdesc": " Check if the property has a non-empty value.",
                "start": 500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if the property value is empty.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `is_empty` — `true` if the property's value is empty (i.e. the property is set to an empty string)",
                "extends": {
                    "args": [
                        {
                            "finish": 580008,
                            "name": "self",
                            "start": 580008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "name of the property to check",
                            "finish": 580049,
                            "name": "property_name",
                            "rawdesc": "name of the property to check",
                            "start": 580036,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Check if the property value is empty.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `is_empty` — `true` if the property's value is empty (i.e. the property is set to an empty string)",
                    "finish": 600003,
                    "rawdesc": " Check if the property value is empty.",
                    "returns": [
                        {
                            "desc": "`true` if the property's value is empty (i.e. the property is set to an empty string)",
                            "name": "is_empty",
                            "rawdesc": "`true` if the property's value is empty (i.e. the property is set to an empty string)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 580000,
                    "type": "function",
                    "view": "(method) AdapterProperties:is_empty(property_name: string)\n  -> is_empty: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 580035,
                "name": "is_empty",
                "rawdesc": " Check if the property value is empty.",
                "start": 580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if the property evaluates to `false`.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `is_false` — `true` if the property's value is anything else than the string `true`",
                "extends": {
                    "args": [
                        {
                            "finish": 720008,
                            "name": "self",
                            "start": 720008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "name of the property to check",
                            "finish": 720049,
                            "name": "property_name",
                            "rawdesc": "name of the property to check",
                            "start": 720036,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Check if the property evaluates to `false`.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `is_false` — `true` if the property's value is anything else than the string `true`",
                    "finish": 740003,
                    "rawdesc": " Check if the property evaluates to `false`.",
                    "returns": [
                        {
                            "desc": "`true` if the property's value is anything else than the string `true`",
                            "name": "is_false",
                            "rawdesc": "`true` if the property's value is anything else than the string `true`",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 720000,
                    "type": "function",
                    "view": "(method) AdapterProperties:is_false(property_name: string)\n  -> is_false: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 720035,
                "name": "is_false",
                "rawdesc": " Check if the property evaluates to `false`.",
                "start": 720009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if the property is set.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `property_set` — `true` if the property is set (i.e. not `nil`)",
                "extends": {
                    "args": [
                        {
                            "finish": 430008,
                            "name": "self",
                            "start": 430008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "name of the property to check",
                            "finish": 430056,
                            "name": "property_name",
                            "rawdesc": "name of the property to check",
                            "start": 430043,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Check if the property is set.\n\n@*param* `property_name` — name of the property to check\n\n@*return* `property_set` — `true` if the property is set (i.e. not `nil`)",
                    "finish": 450003,
                    "rawdesc": " Check if the property is set.",
                    "returns": [
                        {
                            "desc": "`true` if the property is set (i.e. not `nil`)",
                            "name": "property_set",
                            "rawdesc": "`true` if the property is set (i.e. not `nil`)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "(method) AdapterProperties:is_property_set(property_name: string)\n  -> property_set: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 430042,
                "name": "is_property_set",
                "rawdesc": " Check if the property is set.",
                "start": 430009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Check if the property contains the string `true` (case-sensitive).\n\n@*param* `property_name` — name of the property to check\n\n@*return* `is_true` — `true` if the property's value is the string `true`",
                "extends": {
                    "args": [
                        {
                            "finish": 650008,
                            "name": "self",
                            "start": 650008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "name of the property to check",
                            "finish": 650048,
                            "name": "property_name",
                            "rawdesc": "name of the property to check",
                            "start": 650035,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Check if the property contains the string `true` (case-sensitive).\n\n@*param* `property_name` — name of the property to check\n\n@*return* `is_true` — `true` if the property's value is the string `true`",
                    "finish": 670003,
                    "rawdesc": " Check if the property contains the string `true` (case-sensitive).",
                    "returns": [
                        {
                            "desc": "`true` if the property's value is the string `true`",
                            "name": "is_true",
                            "rawdesc": "`true` if the property's value is the string `true`",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 650000,
                    "type": "function",
                    "view": "(method) AdapterProperties:is_true(property_name: string)\n  -> is_true: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 650034,
                "name": "is_true",
                "rawdesc": " Check if the property contains the string `true` (case-sensitive).",
                "start": 650009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Merge new properties into a set of existing ones\n\n@*param* `new_properties` — set of new properties to merge into the existing ones\n\n [impl -> dsn~merging-user-defined-properties~0]",
                "extends": {
                    "args": [
                        {
                            "finish": 1930008,
                            "name": "self",
                            "start": 1930008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "set of new properties to merge into the existing ones",
                            "finish": 1930047,
                            "name": "new_properties",
                            "rawdesc": "set of new properties to merge into the existing ones",
                            "start": 1930033,
                            "type": "local",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Merge new properties into a set of existing ones\n\n@*param* `new_properties` — set of new properties to merge into the existing ones\n\n [impl -> dsn~merging-user-defined-properties~0]",
                    "finish": 2070003,
                    "rawdesc": " Merge new properties into a set of existing ones\n [impl -> dsn~merging-user-defined-properties~0]",
                    "returns": [
                        {
                            "name": "merge_product",
                            "type": "function.return",
                            "view": "AdapterProperties"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "(method) AdapterProperties:merge(new_properties: AdapterProperties)\n  -> merge_product: AdapterProperties"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1930032,
                "name": "merge",
                "rawdesc": " Merge new properties into a set of existing ones\n [impl -> dsn~merging-user-defined-properties~0]",
                "start": 1930009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new instance of adapter properties.\n\n@*param* `raw_properties` — properties as key-value pairs\n\n@*return* `properties` — new instance",
                "extends": {
                    "args": [
                        {
                            "finish": 170008,
                            "name": "self",
                            "start": 170008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "desc": "properties as key-value pairs",
                            "finish": 170045,
                            "name": "raw_properties",
                            "rawdesc": "properties as key-value pairs",
                            "start": 170031,
                            "type": "local",
                            "view": "table<string, string>"
                        }
                    ],
                    "desc": " Create a new instance of adapter properties.\n\n@*param* `raw_properties` — properties as key-value pairs\n\n@*return* `properties` — new instance",
                    "finish": 210003,
                    "rawdesc": " Create a new instance of adapter properties.",
                    "returns": [
                        {
                            "desc": "new instance",
                            "name": "properties",
                            "rawdesc": "new instance",
                            "type": "function.return",
                            "view": "AdapterProperties"
                        }
                    ],
                    "start": 170000,
                    "type": "function",
                    "view": "(method) AdapterProperties:new(raw_properties: table<string, string>)\n  -> properties: AdapterProperties"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 170030,
                "name": "new",
                "rawdesc": " Create a new instance of adapter properties.",
                "start": 170009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Validate the adapter properties.",
                "extends": {
                    "args": [
                        {
                            "finish": 1230008,
                            "name": "self",
                            "start": 1230008,
                            "type": "self",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Validate the adapter properties.",
                    "finish": 1270003,
                    "rawdesc": " Validate the adapter properties.",
                    "start": 1230000,
                    "type": "function",
                    "view": "(method) AdapterProperties:validate()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1230035,
                "name": "validate",
                "rawdesc": " Validate the adapter properties.",
                "start": 1230009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Validate a boolean property.\nAllowed values are `true`, `false` or an unset variable.",
                "extends": {
                    "args": [
                        {
                            "finish": 1320008,
                            "name": "self",
                            "start": 1320008,
                            "type": "self",
                            "view": "AdapterProperties"
                        },
                        {
                            "finish": 1320057,
                            "name": "property_name",
                            "start": 1320044,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Validate a boolean property.\nAllowed values are `true`, `false` or an unset variable.",
                    "finish": 1390003,
                    "rawdesc": " Validate a boolean property.\nAllowed values are `true`, `false` or an unset variable.",
                    "start": 1320000,
                    "type": "function",
                    "view": "(method) AdapterProperties:validate_boolean(property_name: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/AdapterProperties.lua",
                "finish": 1320043,
                "name": "validate_boolean",
                "rawdesc": " Validate a boolean property.\nAllowed values are `true`, `false` or an unset variable.",
                "start": 1320009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "AdapterProperties",
        "rawdesc": " This class abstracts access to the user-defined properties of the Virtual Schema.",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 10058,
                        "start": 10037,
                        "type": "doc.extends.name",
                        "view": "AbstractQueryAppender"
                    }
                ],
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 10058,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Appender for aggregate functions in an SQL statement.",
        "fields": [
            {
                "desc": "Default configuration with double quotes for identifiers.",
                "extends": {
                    "finish": 100093,
                    "start": 100048,
                    "type": "table",
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 100045,
                "name": "DEFAULT_APPENDER_CONFIG",
                "rawdesc": "Default configuration with double quotes for identifiers.",
                "start": 100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Appender for aggregate functions in an SQL statement.",
                "extends": {
                    "finish": 30061,
                    "start": 30036,
                    "type": "getlocal",
                    "view": "AggregateFunctionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 30033,
                "name": "__index",
                "rawdesc": " Appender for aggregate functions in an SQL statement.",
                "start": 30000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "token to append",
                            "finish": 270044,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 270039,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                    "finish": 290003,
                    "rawdesc": " Append a token to the query.",
                    "start": 270000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 270038,
                "name": "_append",
                "rawdesc": " Append a token to the query.",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 330046,
                            "rawdesc": "to append",
                            "start": 330043,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                    "finish": 350003,
                    "rawdesc": " Append a list of tokens to the query.",
                    "start": 330000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 330042,
                "name": "_append_all",
                "rawdesc": " Append a list of tokens to the query.",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 560063,
                            "name": "data_type",
                            "start": 560054,
                            "type": "local",
                            "view": "CharacterTypeDefinition"
                        }
                    ],
                    "finish": 650003,
                    "start": 560000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_character_type(data_type: CharacterTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 560053,
                "name": "_append_character_type",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 630008,
                            "name": "self",
                            "start": 630008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 630078,
                            "name": "arguments",
                            "start": 630069,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 700003,
                    "start": 630000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_append_comma_separated_arguments(arguments: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 630068,
                "name": "_append_comma_separated_arguments",
                "start": 630009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": " luacheck: max line length 240",
                            "finish": 1240058,
                            "name": "data_type",
                            "rawdesc": " luacheck: max line length 240",
                            "start": 1240049,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "finish": 1460003,
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_data_type(data_type: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1240048,
                "name": "_append_data_type",
                "start": 1240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 470008,
                            "name": "self",
                            "start": 470008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 470069,
                            "name": "data_type",
                            "start": 470060,
                            "type": "local",
                            "view": "DecimalTypeDefinition"
                        }
                    ],
                    "finish": 530003,
                    "start": 470000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_decimal_type_details(data_type: DecimalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 470059,
                "name": "_append_decimal_type_details",
                "start": 470009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 720008,
                            "name": "self",
                            "start": 720008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 720062,
                            "name": "f",
                            "start": 720061,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 760003,
                    "start": 720000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_append_distinct_function(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 720060,
                "name": "_append_distinct_function",
                "start": 720009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 570008,
                            "name": "self",
                            "start": 570008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 570069,
                            "name": "distinct",
                            "start": 570061,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 610003,
                    "start": 570000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_append_distinct_modifier(distinct: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 570060,
                "name": "_append_distinct_modifier",
                "start": 570009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 450008,
                            "name": "self",
                            "start": 450008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 450064,
                            "name": "expression",
                            "start": 450054,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "finish": 480003,
                    "start": 450000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_append_expression(expression: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 450053,
                "name": "_append_expression",
                "start": 450009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500008,
                            "name": "self",
                            "start": 500008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 500074,
                            "name": "distinct",
                            "start": 500066,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 500085,
                            "name": "arguments",
                            "start": 500076,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 550003,
                    "start": 500000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_append_function_argument_list(distinct: any, arguments: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 500065,
                "name": "_append_function_argument_list",
                "start": 500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 750008,
                            "name": "self",
                            "start": 750008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 750057,
                            "name": "data_type",
                            "start": 750048,
                            "type": "local",
                            "view": "GeometryTypeDefinition"
                        }
                    ],
                    "finish": 820003,
                    "start": 750000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_geometry(data_type: GeometryTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 750047,
                "name": "_append_geometry",
                "start": 750009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 1140057,
                            "name": "data_type",
                            "start": 1140048,
                            "type": "local",
                            "view": "HashtypeTypeDefinition"
                        }
                    ],
                    "finish": 1210003,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_hashtype(data_type: HashtypeTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1140047,
                "name": "_append_hashtype",
                "start": 1140009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                "extends": {
                    "args": [
                        {
                            "finish": 1580008,
                            "name": "self",
                            "start": 1580008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "identifier",
                            "finish": 1580060,
                            "name": "identifier",
                            "rawdesc": "identifier",
                            "start": 1580050,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                    "finish": 1630003,
                    "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                    "start": 1580000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_identifier(identifier: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1580049,
                "name": "_append_identifier",
                "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                "start": 1580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 850057,
                            "name": "data_type",
                            "start": 850048,
                            "type": "local",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "finish": 1110003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_interval(data_type: IntervalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 850047,
                "name": "_append_interval",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 780008,
                            "name": "self",
                            "start": 780008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 780060,
                            "name": "f",
                            "start": 780059,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 820003,
                    "start": 780000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_append_simple_function(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 780058,
                "name": "_append_simple_function",
                "start": 780009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                "extends": {
                    "args": [
                        {
                            "finish": 1500008,
                            "name": "self",
                            "start": 1500008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "string literal",
                            "finish": 1500061,
                            "name": "literal",
                            "rawdesc": "string literal",
                            "start": 1500054,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                    "finish": 1540003,
                    "rawdesc": " Append a string literal and enclose it in single quotes",
                    "start": 1500000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_string_literal(literal: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1500053,
                "name": "_append_string_literal",
                "rawdesc": " Append a string literal and enclose it in single quotes",
                "start": 1500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680008,
                            "name": "self",
                            "start": 680008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 680058,
                            "name": "data_type",
                            "start": 680049,
                            "type": "local",
                            "view": "TimestampTypeDefinition"
                        }
                    ],
                    "finish": 720003,
                    "start": 680000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_timestamp(data_type: TimestampTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 680048,
                "name": "_append_timestamp",
                "start": 680009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "finish": 40041,
                    "start": 40027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40041,
                            "start": 40027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 40041,
                "name": "_appender_config",
                "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " AggregateFunctionAppender._any is not implemented since ANY is an alias for SOME",
                "extends": {
                    "finish": 850105,
                    "start": 850056,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 850053,
                "name": "_approximate_count_distinct",
                "rawdesc": " AggregateFunctionAppender._any is not implemented since ANY is an alias for SOME",
                "start": 850000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 860084,
                    "start": 860033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 860030,
                "name": "_avg",
                "start": 860000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "position in the comma-separated list",
                            "finish": 400043,
                            "name": "index",
                            "rawdesc": "position in the comma-separated list",
                            "start": 400038,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                    "finish": 440003,
                    "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                    "start": 400000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_comma(index: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 400037,
                "name": "_comma",
                "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 870083,
                    "start": 870034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 870031,
                "name": "_corr",
                "start": 870000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 910008,
                            "name": "self",
                            "start": 910008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 910043,
                            "name": "f",
                            "start": 910042,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1060003,
                    "start": 910000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_count(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 910041,
                "name": "_count",
                "start": 910009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 880088,
                    "start": 880039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 880036,
                "name": "_covar_pop",
                "start": 880000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 890089,
                    "start": 890040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 890037,
                "name": "_covar_samp",
                "start": 890000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1080086,
                    "start": 1080035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1080032,
                "name": "_every",
                "start": 1080000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1090090,
                    "start": 1090041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1090038,
                "name": "_first_value",
                "start": 1090000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1160008,
                            "name": "self",
                            "start": 1160008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 1160050,
                            "name": "f",
                            "start": 1160049,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1310003,
                    "start": 1160000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_group_concat(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1160048,
                "name": "_group_concat",
                "start": 1160009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1330087,
                    "start": 1330038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1330035,
                "name": "_grouping",
                "start": 1330000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1340076,
                    "start": 1340041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1340038,
                "name": "_grouping_id",
                "start": 1340000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 230008,
                            "name": "self",
                            "start": 230008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "desc": " This class implements an abstraction for a query string including its tokens.",
                            "finish": 230050,
                            "name": "out_query",
                            "rawdesc": " This class implements an abstraction for a query string including its tokens.",
                            "start": 230041,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 230067,
                            "name": "appender_config",
                            "start": 230052,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "finish": 250003,
                    "start": 230000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_init(out_query: Query, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 230040,
                "name": "_init",
                "start": 230009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1350089,
                    "start": 1350040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1350037,
                "name": "_last_value",
                "start": 1350000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1370008,
                            "name": "self",
                            "start": 1370008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "finish": 1370045,
                            "name": "f",
                            "start": 1370044,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1660003,
                    "start": 1370000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_listagg(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1370043,
                "name": "_listagg",
                "start": 1370009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1680084,
                    "start": 1680033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1680030,
                "name": "_max",
                "start": 1680000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1690085,
                    "start": 1690036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1690033,
                "name": "_median",
                "start": 1690000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1700084,
                    "start": 1700033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1700030,
                "name": "_min",
                "start": 1700000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1710084,
                    "start": 1710033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1710030,
                "name": "_mul",
                "start": 1710000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "query object that the appender appends to",
                "extends": {
                    "finish": 30026,
                    "start": 30021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30026,
                            "start": 30021,
                            "type": "doc.type.name",
                            "view": "Query"
                        }
                    ],
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 30026,
                "name": "_out_query",
                "rawdesc": "query object that the appender appends to",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1720088,
                    "start": 1720039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1720036,
                "name": "_regr_avgx",
                "start": 1720000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1730088,
                    "start": 1730039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1730036,
                "name": "_regr_avgy",
                "start": 1730000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1740089,
                    "start": 1740040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1740037,
                "name": "_regr_count",
                "start": 1740000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1750093,
                    "start": 1750044,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1750041,
                "name": "_regr_intercept",
                "start": 1750000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1760086,
                    "start": 1760037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1760034,
                "name": "_regr_r2",
                "start": 1760000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1770089,
                    "start": 1770040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1770037,
                "name": "_regr_slope",
                "start": 1770000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1780087,
                    "start": 1780038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1780035,
                "name": "_regr_sxx",
                "start": 1780000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1790087,
                    "start": 1790038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1790035,
                "name": "_regr_sxy",
                "start": 1790000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1800087,
                    "start": 1800038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1800035,
                "name": "_regr_syy",
                "start": 1800000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120008,
                            "name": "self",
                            "start": 1120008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        }
                    ],
                    "finish": 1140003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "SelectAppender"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:_select_appender()\n  -> SelectAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1120051,
                "name": "_select_appender",
                "start": 1120009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1870085,
                    "start": 1870034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1870031,
                "name": "_some",
                "start": 1870000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1810094,
                    "start": 1810045,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1810042,
                "name": "_st_intersection",
                "start": 1810000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1820087,
                    "start": 1820038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1820035,
                "name": "_st_union",
                "start": 1820000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1830087,
                    "start": 1830036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1830033,
                "name": "_stddev",
                "start": 1830000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1840091,
                    "start": 1840040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1840037,
                "name": "_stddev_pop",
                "start": 1840000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1850092,
                    "start": 1850041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1850038,
                "name": "_stddev_samp",
                "start": 1850000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1860084,
                    "start": 1860033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1860030,
                "name": "_sum",
                "start": 1860000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1880088,
                    "start": 1880037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1880034,
                "name": "_var_pop",
                "start": 1880000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1890089,
                    "start": 1890038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1890035,
                "name": "_var_samp",
                "start": 1890000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1900089,
                    "start": 1900038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 1900035,
                "name": "_variance",
                "start": 1900000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Alias for main appender function for uniform appender invocation",
                "extends": {
                    "finish": 420086,
                    "start": 420035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 420032,
                "name": "append",
                "rawdesc": " Alias for main appender function for uniform appender invocation",
                "start": 420000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append an aggregate function to an SQL query.\n\n@*param* `aggregate_function` — function to append",
                "extends": {
                    "args": [
                        {
                            "finish": 290008,
                            "name": "self",
                            "start": 290008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "desc": "function to append",
                            "finish": 290079,
                            "name": "aggregate_function",
                            "rawdesc": "function to append",
                            "start": 290061,
                            "type": "local",
                            "view": "AggregateFunctionExpression"
                        }
                    ],
                    "desc": " Append an aggregate function to an SQL query.\n\n@*param* `aggregate_function` — function to append",
                    "finish": 390003,
                    "rawdesc": " Append an aggregate function to an SQL query.",
                    "start": 290000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:append_aggregate_function(aggregate_function: AggregateFunctionExpression)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 290060,
                "name": "append_aggregate_function",
                "rawdesc": " Append an aggregate function to an SQL query.",
                "start": 290009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new instance of a `AggregateFunctionAppender`.\n\n@*param* `out_query` — query to which the function will be appended\n\n@*return* `renderer` — for aggregate functions",
                "extends": {
                    "args": [
                        {
                            "finish": 150008,
                            "name": "self",
                            "start": 150008,
                            "type": "self",
                            "view": "AggregateFunctionAppender"
                        },
                        {
                            "desc": "query to which the function will be appended",
                            "finish": 150048,
                            "name": "out_query",
                            "rawdesc": "query to which the function will be appended",
                            "start": 150039,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 150065,
                            "name": "appender_config",
                            "start": 150050,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": " Create a new instance of a `AggregateFunctionAppender`.\n\n@*param* `out_query` — query to which the function will be appended\n\n@*return* `renderer` — for aggregate functions",
                    "finish": 190003,
                    "rawdesc": " Create a new instance of a `AggregateFunctionAppender`.",
                    "returns": [
                        {
                            "desc": "for aggregate functions",
                            "name": "renderer",
                            "rawdesc": "for aggregate functions",
                            "type": "function.return",
                            "view": "AggregateFunctionAppender"
                        }
                    ],
                    "start": 150000,
                    "type": "function",
                    "view": "(method) AggregateFunctionAppender:new(out_query: Query, appender_config: AppenderConfig)\n  -> renderer: AggregateFunctionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AggregateFunctionAppender.lua",
                "finish": 150038,
                "name": "new",
                "rawdesc": " Create a new instance of a `AggregateFunctionAppender`.",
                "start": 150009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "AggregateFunctionAppender",
        "rawdesc": " Appender for aggregate functions in an SQL statement.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 500037,
                "start": 500010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 510021,
                    "start": 510015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 510021,
                            "start": 510015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 510021,
                "name": "name",
                "start": 510010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "AggregateFunctionExpression",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1670024,
                "start": 1670010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "quote character for identifiers, defaults to `\"`",
                "extends": {
                    "finish": 1680034,
                    "start": 1680027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1680033,
                            "start": 1680027,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1680034,
                "name": "identifier_quote",
                "rawdesc": "quote character for identifiers, defaults to `\"`",
                "start": 1680010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "AppenderConfig",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1080026,
                "start": 1080010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 1100031,
                    "start": 1100021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1100031,
                            "start": 1100021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1100031,
                "name": "expression",
                "start": 1100010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1110025,
                    "start": 1110015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1110025,
                            "start": 1110015,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1110025,
                "name": "left",
                "start": 1110010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1120026,
                    "start": 1120016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1120026,
                            "start": 1120016,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1120026,
                "name": "right",
                "start": 1120010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1090034,
                    "start": 1090015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1090034,
                            "start": 1090015,
                            "type": "doc.type.string",
                            "view": "\"predicate_between\""
                        }
                    ],
                    "view": "\"predicate_between\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1090034,
                "name": "type",
                "start": 1090010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "BetweenPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 530035,
                "start": 530010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 560025,
                    "start": 560015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 560025,
                            "start": 560015,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 560025,
                "name": "left",
                "start": 560010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 570026,
                    "start": 570016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 570026,
                            "start": 570016,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 570026,
                "name": "right",
                "start": 570010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " luacheck: max line length 140",
                "extends": {
                    "finish": 550138,
                    "start": 550016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 550033,
                            "start": 550016,
                            "type": "doc.type.string",
                            "view": "\"predicate_equal\""
                        },
                        {
                            "finish": 550054,
                            "start": 550034,
                            "type": "doc.type.string",
                            "view": "\"predicate_notequal\""
                        },
                        {
                            "finish": 550074,
                            "start": 550055,
                            "type": "doc.type.string",
                            "view": "\"predicate_greater\""
                        },
                        {
                            "finish": 550091,
                            "start": 550075,
                            "type": "doc.type.string",
                            "view": "\"predicate_less\""
                        },
                        {
                            "finish": 550113,
                            "start": 550092,
                            "type": "doc.type.string",
                            "view": "\"predicate_lessequal\""
                        },
                        {
                            "finish": 550138,
                            "start": 550114,
                            "type": "doc.type.string",
                            "view": "\"predicate_greaterequal\""
                        }
                    ],
                    "view": "\"predicate_equal\"|\"predicate_greater\"|\"predicate_greaterequal\"|\"predicate_less\"|\"predicate_lessequal\"...(+1)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 550138,
                "name": "type",
                "rawdesc": " luacheck: max line length 140",
                "start": 550010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "BinaryPredicateExpression",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 460031,
                "start": 460010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 470024,
                    "start": 470015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 470024,
                            "start": 470015,
                            "type": "doc.type.string",
                            "view": "\"BOOLEAN\""
                        }
                    ],
                    "view": "\"BOOLEAN\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 470024,
                "name": "type",
                "start": 470010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "BooleanTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 90033,
                "start": 90010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 120030,
                    "start": 120023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 120029,
                            "start": 120023,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 120030,
                "name": "characterSet",
                "start": 120010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 110022,
                    "start": 110015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 110022,
                            "start": 110015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 110022,
                "name": "size",
                "start": 110010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 100024,
                    "start": 100015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 100024,
                            "start": 100015,
                            "type": "doc.type.string",
                            "view": "\"VARCHAR\""
                        }
                    ],
                    "view": "\"VARCHAR\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 100024,
                "name": "type",
                "start": 100010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "CharacterTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 30025,
                "start": 30010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 60021,
                    "start": 60015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 60021,
                            "start": 60015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 60021,
                "name": "name",
                "start": 60010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 50026,
                    "start": 50020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50026,
                            "start": 50020,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 50026,
                "name": "tableName",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 40023,
                    "start": 40015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40023,
                            "start": 40015,
                            "type": "doc.type.string",
                            "view": "\"column\""
                        }
                    ],
                    "view": "\"column\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 40023,
                "name": "type",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ColumnReference",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/udf_context.lua",
                "finish": 140020,
                "start": 140010,
                "type": "doc.class"
            }
        ],
        "desc": "An Exasol connection object",
        "fields": [
            {
                "desc": "The address of the connection.",
                "extends": {
                    "finish": 150025,
                    "start": 150018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 150024,
                            "start": 150018,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/udf_context.lua",
                "finish": 150025,
                "name": "address",
                "rawdesc": "The address of the connection.",
                "start": 150010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "The password for the connection.",
                "extends": {
                    "finish": 170026,
                    "start": 170019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 170025,
                            "start": 170019,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/udf_context.lua",
                "finish": 170026,
                "name": "password",
                "rawdesc": "The password for the connection.",
                "start": 170010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "The user name for the connection.",
                "extends": {
                    "finish": 160022,
                    "start": 160015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 160021,
                            "start": 160015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/udf_context.lua",
                "finish": 160022,
                "name": "user",
                "rawdesc": "The user name for the connection.",
                "start": 160010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "Connection",
        "rawdesc": "An Exasol connection object",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 40037,
                "start": 40010,
                "type": "doc.class"
            }
        ],
        "desc": "Response for a createVirtualSchema request",
        "fields": [
            {
                "desc": "Response for a createVirtualSchema request",
                "extends": {
                    "finish": 60045,
                    "start": 60025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 60045,
                            "start": 60025,
                            "type": "doc.type.name",
                            "view": "ExasolSchemaMetadata"
                        }
                    ],
                    "view": "ExasolSchemaMetadata"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 60045,
                "name": "schemaMetadata",
                "rawdesc": "Response for a createVirtualSchema request",
                "start": 60010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 50036,
                    "start": 50015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50036,
                            "start": 50015,
                            "type": "doc.type.string",
                            "view": "\"createVirtualSchema\""
                        }
                    ],
                    "view": "\"createVirtualSchema\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 50036,
                "name": "type",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "CreateVirtualSchemaResponse",
        "rawdesc": "Response for a createVirtualSchema request",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 420028,
                "start": 420010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 430021,
                    "start": 430015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 430021,
                            "start": 430015,
                            "type": "doc.type.string",
                            "view": "\"DATE\""
                        }
                    ],
                    "view": "\"DATE\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 430021,
                "name": "type",
                "start": 430010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "DateTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 30031,
                "start": 30010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 50027,
                    "start": 50020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50027,
                            "start": 50020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 50027,
                "name": "precision",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60023,
                    "start": 60016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 60023,
                            "start": 60016,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 60023,
                "name": "scale",
                "start": 60010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 40024,
                    "start": 40015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40024,
                            "start": 40015,
                            "type": "doc.type.string",
                            "view": "\"DECIMAL\""
                        }
                    ],
                    "view": "\"DECIMAL\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 40024,
                "name": "type",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "DecimalTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 370030,
                "start": 370010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 390027,
                    "start": 390019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 390026,
                            "start": 390019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 390027,
                "name": "bytesize",
                "start": 390010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 380023,
                    "start": 380015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 380023,
                            "start": 380015,
                            "type": "doc.type.string",
                            "view": "\"DOUBLE\""
                        }
                    ],
                    "view": "\"DOUBLE\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 380023,
                "name": "type",
                "start": 380010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "DoubleTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 270030,
                "start": 270010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "Notes for the table adapter",
                "extends": {
                    "finish": 290030,
                    "start": 290023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 290029,
                            "start": 290023,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 290030,
                "name": "adapterNotes",
                "rawdesc": "Notes for the table adapter",
                "start": 290010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Comment for the column",
                "extends": {
                    "finish": 340025,
                    "start": 340018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 340024,
                            "start": 340018,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 340025,
                "name": "comment",
                "rawdesc": "Comment for the column",
                "start": 340010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Data type of the column",
                "extends": {
                    "finish": 300039,
                    "start": 300019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 300039,
                            "start": 300019,
                            "type": "doc.type.name",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 300039,
                "name": "dataType",
                "rawdesc": "Data type of the column",
                "start": 300010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Default value for the column",
                "extends": {
                    "finish": 330025,
                    "start": 330018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 330024,
                            "start": 330018,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 330025,
                "name": "default",
                "rawdesc": "Default value for the column",
                "start": 330010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Whether the column is an identity column (default: false)",
                "extends": {
                    "finish": 320029,
                    "start": 320021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 320028,
                            "start": 320021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 320029,
                "name": "isIdentity",
                "rawdesc": "Whether the column is an identity column (default: false)",
                "start": 320010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Whether the column is nullable (default: true)",
                "extends": {
                    "finish": 310029,
                    "start": 310021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 310028,
                            "start": 310021,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 310029,
                "name": "isNullable",
                "rawdesc": "Whether the column is nullable (default: true)",
                "start": 310010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Name of the column",
                "extends": {
                    "finish": 280021,
                    "start": 280015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 280021,
                            "start": 280015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 280021,
                "name": "name",
                "rawdesc": "Name of the column",
                "start": 280010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ExasolColumnMetadata",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 530023,
                "start": 530009,
                "type": "doc.enum"
            }
        ],
        "desc": "```lua\n{\n    DECIMAL: string = DECIMAL,\n    DOUBLE: string = DOUBLE,\n    VARCHAR: string = VARCHAR,\n    CHAR: string = CHAR,\n    DATE: string = DATE,\n    TIMESTAMP: string = TIMESTAMP,\n    BOOLEAN: string = BOOLEAN,\n    GEOMETRY: string = GEOMETRY,\n    INTERVAL: string = INTERVAL,\n    HASHTYPE: string = HASHTYPE,\n}\n```",
        "fields": [],
        "name": "ExasolDataType",
        "rawdesc": "```lua\n{\n    DECIMAL: string = DECIMAL,\n    DOUBLE: string = DOUBLE,\n    VARCHAR: string = VARCHAR,\n    CHAR: string = CHAR,\n    DATE: string = DATE,\n    TIMESTAMP: string = TIMESTAMP,\n    BOOLEAN: string = BOOLEAN,\n    GEOMETRY: string = GEOMETRY,\n    INTERVAL: string = INTERVAL,\n    HASHTYPE: string = HASHTYPE,\n}\n```",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 610011,
                "start": 610004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.BOOLEAN",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 580008,
                "start": 580004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.CHAR",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 590008,
                "start": 590004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.DATE",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 550011,
                "start": 550004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.DECIMAL",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 560010,
                "start": 560004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.DOUBLE",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 620012,
                "start": 620004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.GEOMETRY",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 640012,
                "start": 640004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.HASHTYPE",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 630012,
                "start": 630004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.INTERVAL",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 600013,
                "start": 600004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.TIMESTAMP",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 570011,
                "start": 570004,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolDataType.VARCHAR",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 700027,
                "start": 700009,
                "type": "doc.enum"
            }
        ],
        "desc": "```lua\n{\n    DAY_TO_SECONDS: string = DAY TO SECONDS,\n    YEAR_TO_MONTH: string = YEAR TO MONTH,\n}\n```",
        "fields": [],
        "name": "ExasolIntervalType",
        "rawdesc": "```lua\n{\n    DAY_TO_SECONDS: string = DAY TO SECONDS,\n    YEAR_TO_MONTH: string = YEAR TO MONTH,\n}\n```",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 710034,
                "start": 710020,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolIntervalType.DAY_TO_SECONDS",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 710068,
                "start": 710055,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolIntervalType.YEAR_TO_MONTH",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 670025,
                "start": 670009,
                "type": "doc.enum"
            }
        ],
        "desc": "```lua\n{\n    TABLE: string = table,\n}\n```",
        "fields": [],
        "name": "ExasolObjectType",
        "rawdesc": "```lua\n{\n    TABLE: string = table,\n}\n```",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 680023,
                "start": 680018,
                "type": "tablefield"
            }
        ],
        "fields": [],
        "name": "ExasolObjectType.TABLE",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 220030,
                "start": 220010,
                "type": "doc.class"
            }
        ],
        "desc": "Response for a createVirtualSchema request",
        "fields": [
            {
                "desc": "Notes for the virtual schema adapter.",
                "extends": {
                    "finish": 240030,
                    "start": 240024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 240030,
                            "start": 240024,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 240030,
                "name": "adapterNotes",
                "rawdesc": "Notes for the virtual schema adapter.",
                "start": 240010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "The tables in the virtual schema.",
                "extends": {
                    "finish": 230038,
                    "start": 230017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 230038,
                            "start": 230017,
                            "type": "doc.type.array",
                            "view": "ExasolTableMetadata[]"
                        }
                    ],
                    "view": "ExasolTableMetadata[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 230038,
                "name": "tables",
                "rawdesc": "The tables in the virtual schema.",
                "start": 230010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ExasolSchemaMetadata",
        "rawdesc": "Response for a createVirtualSchema request",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 370029,
                "start": 370010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "Notes for the table adapter",
                "extends": {
                    "finish": 400030,
                    "start": 400023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 400029,
                            "start": 400023,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 400030,
                "name": "adapterNotes",
                "rawdesc": "Notes for the table adapter",
                "start": 400010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Columns in the table",
                "extends": {
                    "finish": 420040,
                    "start": 420018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 420040,
                            "start": 420018,
                            "type": "doc.type.array",
                            "view": "ExasolColumnMetadata[]"
                        }
                    ],
                    "view": "ExasolColumnMetadata[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 420040,
                "name": "columns",
                "rawdesc": "Columns in the table",
                "start": 420010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Comment for the table",
                "extends": {
                    "finish": 410025,
                    "start": 410018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 410024,
                            "start": 410018,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 410025,
                "name": "comment",
                "rawdesc": "Comment for the table",
                "start": 410010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Name of the table",
                "extends": {
                    "finish": 390021,
                    "start": 390015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 390021,
                            "start": 390015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 390021,
                "name": "name",
                "rawdesc": "Name of the table",
                "start": 390010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Object type, e.g. `table`",
                "extends": {
                    "finish": 380031,
                    "start": 380015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 380031,
                            "start": 380015,
                            "type": "doc.type.name",
                            "view": "ExasolObjectType"
                        }
                    ],
                    "view": "ExasolObjectType"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 380031,
                "name": "type",
                "rawdesc": "Object type, e.g. `table`",
                "start": 380010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ExasolTableMetadata",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 510231,
                    "start": 510031,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 510052,
                            "start": 510031,
                            "type": "doc.type.name",
                            "view": "DecimalTypeDefinition"
                        },
                        {
                            "finish": 510076,
                            "start": 510053,
                            "type": "doc.type.name",
                            "view": "CharacterTypeDefinition"
                        },
                        {
                            "finish": 510100,
                            "start": 510077,
                            "type": "doc.type.name",
                            "view": "TimestampTypeDefinition"
                        },
                        {
                            "finish": 510123,
                            "start": 510101,
                            "type": "doc.type.name",
                            "view": "GeometryTypeDefinition"
                        },
                        {
                            "finish": 510146,
                            "start": 510124,
                            "type": "doc.type.name",
                            "view": "IntervalTypeDefinition"
                        },
                        {
                            "finish": 510169,
                            "start": 510147,
                            "type": "doc.type.name",
                            "view": "HashtypeTypeDefinition"
                        },
                        {
                            "finish": 510190,
                            "start": 510170,
                            "type": "doc.type.name",
                            "view": "DoubleTypeDefinition"
                        },
                        {
                            "finish": 510209,
                            "start": 510191,
                            "type": "doc.type.name",
                            "view": "DateTypeDefinition"
                        },
                        {
                            "finish": 510231,
                            "start": 510210,
                            "type": "doc.type.name",
                            "view": "BooleanTypeDefinition"
                        }
                    ],
                    "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 510231,
                "start": 510010,
                "type": "doc.alias"
            }
        ],
        "desc": " luacheck: max line length 240",
        "fields": [],
        "name": "ExasolTypeDefinition",
        "rawdesc": " luacheck: max line length 240",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/udf_context.lua",
                "finish": 40026,
                "start": 40010,
                "type": "doc.class"
            }
        ],
        "desc": "Context for Exasol Lua UDFs.",
        "fields": [
            {
                "desc": "Get the connection details for the named connection.\n\n@*param* `connection_name` — The name of the connection.\n\n@*return* `connection` — connection details.",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the connection.",
                            "finish": 100058,
                            "name": "connection_name",
                            "rawdesc": "The name of the connection.",
                            "start": 100043,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Get the connection details for the named connection.\n\n@*param* `connection_name` — The name of the connection.\n\n@*return* `connection` — connection details.",
                    "finish": 110003,
                    "rawdesc": "Get the connection details for the named connection.",
                    "returns": [
                        {
                            "desc": "connection details.",
                            "name": "connection",
                            "rawdesc": "connection details.",
                            "type": "function.return",
                            "view": "Connection?"
                        }
                    ],
                    "start": 100000,
                    "type": "function",
                    "view": "function ExasolUdfContext.get_connection(connection_name: string)\n  -> connection: Connection?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/udf_context.lua",
                "finish": 100042,
                "name": "get_connection",
                "rawdesc": "Get the connection details for the named connection.",
                "start": 100009,
                "type": "setfield",
                "visible": "public"
            }
        ],
        "name": "ExasolUdfContext",
        "rawdesc": "Context for Exasol Lua UDFs.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 780025,
                "start": 780010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 800034,
                    "start": 800016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 800034,
                            "start": 800016,
                            "type": "doc.type.name",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "view": "SelectSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 800034,
                "name": "query",
                "start": 800010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 790033,
                    "start": 790015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 790033,
                            "start": 790015,
                            "type": "doc.type.string",
                            "view": "\"predicate_exists\""
                        }
                    ],
                    "view": "\"predicate_exists\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 790033,
                "name": "type",
                "start": 790010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ExistsPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 510054,
                    "start": 510021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 510036,
                            "start": 510021,
                            "type": "doc.type.name",
                            "view": "ColumnReference"
                        },
                        {
                            "finish": 510054,
                            "start": 510037,
                            "type": "doc.type.name",
                            "view": "LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric|LiteralInterval...(+3)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 510054,
                "start": 510010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "Expression",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 10051,
                        "start": 10030,
                        "type": "doc.extends.name",
                        "view": "AbstractQueryAppender"
                    }
                ],
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 10051,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Appender for value expressions in a SQL query.",
        "fields": [
            {
                "desc": "Default configuration with double quotes for identifiers.",
                "extends": {
                    "finish": 100093,
                    "start": 100048,
                    "type": "table",
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 100045,
                "name": "DEFAULT_APPENDER_CONFIG",
                "rawdesc": "Default configuration with double quotes for identifiers.",
                "start": 100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Appender for value expressions in a SQL query.",
                "extends": {
                    "finish": 30047,
                    "start": 30029,
                    "type": "getlocal",
                    "view": "ExpressionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 30026,
                "name": "__index",
                "rawdesc": " Appender for value expressions in a SQL query.",
                "start": 30000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "token to append",
                            "finish": 270044,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 270039,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                    "finish": 290003,
                    "rawdesc": " Append a token to the query.",
                    "start": 270000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 270038,
                "name": "_append",
                "rawdesc": " Append a token to the query.",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 330046,
                            "rawdesc": "to append",
                            "start": 330043,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                    "finish": 350003,
                    "rawdesc": " Append a list of tokens to the query.",
                    "start": 330000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 330042,
                "name": "_append_all",
                "rawdesc": " Append a list of tokens to the query.",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1540008,
                            "name": "self",
                            "start": 1540008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 1540053,
                            "name": "predicate",
                            "start": 1540044,
                            "type": "local",
                            "view": "BetweenPredicate"
                        }
                    ],
                    "finish": 1620003,
                    "start": 1540000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_between(predicate: BetweenPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1540043,
                "name": "_append_between",
                "start": 1540009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830008,
                            "name": "self",
                            "start": 830008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 830062,
                            "name": "predicate",
                            "start": 830053,
                            "type": "local",
                            "view": "BinaryPredicateExpression"
                        }
                    ],
                    "finish": 910003,
                    "start": 830000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_binary_predicate(predicate: BinaryPredicateExpression)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 830052,
                "name": "_append_binary_predicate",
                "start": 830009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 560063,
                            "name": "data_type",
                            "start": 560054,
                            "type": "local",
                            "view": "CharacterTypeDefinition"
                        }
                    ],
                    "finish": 650003,
                    "start": 560000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_character_type(data_type: CharacterTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 560053,
                "name": "_append_character_type",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 590008,
                            "name": "self",
                            "start": 590008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 590059,
                            "name": "column",
                            "start": 590053,
                            "type": "local",
                            "view": "ColumnReference"
                        }
                    ],
                    "finish": 630003,
                    "start": 590000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_column_reference(column: ColumnReference)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 590052,
                "name": "_append_column_reference",
                "start": 590009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": " luacheck: max line length 240",
                            "finish": 1240058,
                            "name": "data_type",
                            "rawdesc": " luacheck: max line length 240",
                            "start": 1240049,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "finish": 1460003,
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_data_type(data_type: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1240048,
                "name": "_append_data_type",
                "start": 1240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 470008,
                            "name": "self",
                            "start": 470008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 470069,
                            "name": "data_type",
                            "start": 470060,
                            "type": "local",
                            "view": "DecimalTypeDefinition"
                        }
                    ],
                    "finish": 530003,
                    "start": 470000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_decimal_type_details(data_type: DecimalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 470059,
                "name": "_append_decimal_type_details",
                "start": 470009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 660008,
                            "name": "self",
                            "start": 660008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 660053,
                            "name": "sub_select",
                            "start": 660043,
                            "type": "local",
                            "view": "ExistsPredicate"
                        }
                    ],
                    "finish": 710003,
                    "start": 660000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_exists(sub_select: ExistsPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 660042,
                "name": "_append_exists",
                "start": 660009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 750008,
                            "name": "self",
                            "start": 750008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 750057,
                            "name": "data_type",
                            "start": 750048,
                            "type": "local",
                            "view": "GeometryTypeDefinition"
                        }
                    ],
                    "finish": 820003,
                    "start": 750000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_geometry(data_type: GeometryTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 750047,
                "name": "_append_geometry",
                "start": 750009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 1140057,
                            "name": "data_type",
                            "start": 1140048,
                            "type": "local",
                            "view": "HashtypeTypeDefinition"
                        }
                    ],
                    "finish": 1210003,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_hashtype(data_type: HashtypeTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1140047,
                "name": "_append_hashtype",
                "start": 1140009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                "extends": {
                    "args": [
                        {
                            "finish": 1580008,
                            "name": "self",
                            "start": 1580008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "identifier",
                            "finish": 1580060,
                            "name": "identifier",
                            "rawdesc": "identifier",
                            "start": 1580050,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                    "finish": 1630003,
                    "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                    "start": 1580000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_identifier(identifier: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1580049,
                "name": "_append_identifier",
                "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                "start": 1580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 850057,
                            "name": "data_type",
                            "start": 850048,
                            "type": "local",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "finish": 1110003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_interval(data_type: IntervalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 850047,
                "name": "_append_interval",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 940008,
                            "name": "self",
                            "start": 940008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 940064,
                            "name": "predicate",
                            "start": 940055,
                            "type": "local",
                            "view": "IteratedPredicate"
                        }
                    ],
                    "finish": 1060003,
                    "start": 940000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_iterated_predicate(predicate: IteratedPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 940054,
                "name": "_append_iterated_predicate",
                "start": 940009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1450008,
                            "name": "self",
                            "start": 1450008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 1450063,
                            "name": "predicate",
                            "start": 1450054,
                            "type": "local",
                            "view": "PostfixPredicate"
                        }
                    ],
                    "finish": 1510003,
                    "start": 1450000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_postfix_predicate(predicate: PostfixPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1450053,
                "name": "_append_postfix_predicate",
                "start": 1450009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1090008,
                            "name": "self",
                            "start": 1090008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 1090058,
                            "name": "predicate",
                            "start": 1090049,
                            "type": "local",
                            "view": "InPredicate"
                        }
                    ],
                    "finish": 1190003,
                    "start": 1090000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_predicate_in(predicate: InPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1090048,
                "name": "_append_predicate_in",
                "start": 1090009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1650008,
                            "name": "self",
                            "start": 1650008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 1650063,
                            "name": "predicate",
                            "start": 1650054,
                            "type": "local",
                            "view": "JsonPredicate"
                        }
                    ],
                    "finish": 1840003,
                    "start": 1650000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_predicate_is_json(predicate: JsonPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1650053,
                "name": "_append_predicate_is_json",
                "start": 1650009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1220008,
                            "name": "self",
                            "start": 1220008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 1220060,
                            "name": "predicate",
                            "start": 1220051,
                            "type": "local",
                            "view": "LikePredicate"
                        }
                    ],
                    "finish": 1330003,
                    "start": 1220000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_predicate_like(predicate: LikePredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1220050,
                "name": "_append_predicate_like",
                "start": 1220009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1360008,
                            "name": "self",
                            "start": 1360008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 1360067,
                            "name": "predicate",
                            "start": 1360058,
                            "type": "local",
                            "view": "LikeRegexpPredicate"
                        }
                    ],
                    "finish": 1420003,
                    "start": 1360000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_predicate_regexp_like(predicate: LikeRegexpPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1360057,
                "name": "_append_predicate_regexp_like",
                "start": 1360009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2200008,
                            "name": "self",
                            "start": 2200008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 2200080,
                            "name": "literal_expression",
                            "start": 2200062,
                            "type": "local",
                            "view": "LiteralDate|LiteralInterval|LiteralString|LiteralTimestamp"
                        }
                    ],
                    "finish": 2240003,
                    "start": 2200000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_quoted_literal_expression(literal_expression: LiteralDate|LiteralInterval|LiteralString|LiteralTimestamp)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 2200061,
                "name": "_append_quoted_literal_expression",
                "start": 2200009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                "extends": {
                    "args": [
                        {
                            "finish": 1500008,
                            "name": "self",
                            "start": 1500008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "string literal",
                            "finish": 1500061,
                            "name": "literal",
                            "rawdesc": "string literal",
                            "start": 1500054,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                    "finish": 1540003,
                    "rawdesc": " Append a string literal and enclose it in single quotes",
                    "start": 1500000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_string_literal(literal: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1500053,
                "name": "_append_string_literal",
                "rawdesc": " Append a string literal and enclose it in single quotes",
                "start": 1500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680008,
                            "name": "self",
                            "start": 680008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 680058,
                            "name": "data_type",
                            "start": 680049,
                            "type": "local",
                            "view": "TimestampTypeDefinition"
                        }
                    ],
                    "finish": 720003,
                    "start": 680000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_timestamp(data_type: TimestampTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 680048,
                "name": "_append_timestamp",
                "start": 680009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 740008,
                            "name": "self",
                            "start": 740008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "finish": 740061,
                            "name": "predicate",
                            "start": 740052,
                            "type": "local",
                            "view": "NotPredicate"
                        }
                    ],
                    "finish": 800003,
                    "start": 740000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_append_unary_predicate(predicate: NotPredicate)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 740051,
                "name": "_append_unary_predicate",
                "start": 740009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "finish": 40041,
                    "start": 40027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40041,
                            "start": 40027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 40041,
                "name": "_appender_config",
                "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "position in the comma-separated list",
                            "finish": 400043,
                            "name": "index",
                            "rawdesc": "position in the comma-separated list",
                            "start": 400038,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                    "finish": 440003,
                    "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                    "start": 400000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_comma(index: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 400037,
                "name": "_comma",
                "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 540008,
                            "name": "self",
                            "start": 540008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "desc": " This class implements an abstraction for a query string including its tokens.",
                            "finish": 540043,
                            "name": "out_query",
                            "rawdesc": " This class implements an abstraction for a query string including its tokens.",
                            "start": 540034,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 540060,
                            "name": "appender_config",
                            "start": 540045,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "finish": 560003,
                    "start": 540000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:_init(out_query: Query, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 540033,
                "name": "_init",
                "start": 540009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "query object that the appender appends to",
                "extends": {
                    "finish": 30026,
                    "start": 30021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30026,
                            "start": 30021,
                            "type": "doc.type.name",
                            "view": "Query"
                        }
                    ],
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 30026,
                "name": "_out_query",
                "rawdesc": "query object that the appender appends to",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " Alias for main appender function to allow uniform appender calls from the outside",
                "extends": {
                    "finish": 2690064,
                    "start": 2690028,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 2690025,
                "name": "append",
                "rawdesc": " Alias for main appender function to allow uniform appender calls from the outside",
                "start": 2690000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append an expression to a query.\n\n@*param* `expression` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 2280008,
                            "name": "self",
                            "start": 2280008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 2280056,
                            "name": "expression",
                            "rawdesc": "to append",
                            "start": 2280046,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "desc": " Append an expression to a query.\n\n@*param* `expression` — to append",
                    "finish": 2660003,
                    "rawdesc": " Append an expression to a query.",
                    "start": 2280000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:append_expression(expression: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 2280045,
                "name": "append_expression",
                "rawdesc": " Append an expression to a query.",
                "start": 2280009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a predicate to a query.\n This method is public to allow nesting predicates in filters.\n\n@*param* `predicate` — predicate to append",
                "extends": {
                    "args": [
                        {
                            "finish": 1890008,
                            "name": "self",
                            "start": 1890008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "desc": "predicate to append",
                            "finish": 1890054,
                            "name": "predicate",
                            "rawdesc": "predicate to append",
                            "start": 1890045,
                            "type": "local",
                            "view": "BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4)"
                        }
                    ],
                    "desc": " Append a predicate to a query.\n This method is public to allow nesting predicates in filters.\n\n@*param* `predicate` — predicate to append",
                    "finish": 2170003,
                    "rawdesc": " Append a predicate to a query.\n This method is public to allow nesting predicates in filters.",
                    "start": 1890000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:append_predicate(predicate: BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 1890044,
                "name": "append_predicate",
                "rawdesc": " Append a predicate to a query.\n This method is public to allow nesting predicates in filters.",
                "start": 1890009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new instance of an `ExpressionRenderer`.\n\n@*param* `out_query` — query that the rendered tokens should be appended too\n\n@*return* `expression_renderer` — new expression appender",
                "extends": {
                    "args": [
                        {
                            "finish": 460008,
                            "name": "self",
                            "start": 460008,
                            "type": "self",
                            "view": "ExpressionAppender"
                        },
                        {
                            "desc": "query that the rendered tokens should be appended too",
                            "finish": 460041,
                            "name": "out_query",
                            "rawdesc": "query that the rendered tokens should be appended too",
                            "start": 460032,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 460058,
                            "name": "appender_config",
                            "start": 460043,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": " Create a new instance of an `ExpressionRenderer`.\n\n@*param* `out_query` — query that the rendered tokens should be appended too\n\n@*return* `expression_renderer` — new expression appender",
                    "finish": 500003,
                    "rawdesc": " Create a new instance of an `ExpressionRenderer`.",
                    "returns": [
                        {
                            "desc": "new expression appender",
                            "name": "expression_renderer",
                            "rawdesc": "new expression appender",
                            "type": "function.return",
                            "view": "ExpressionAppender"
                        }
                    ],
                    "start": 460000,
                    "type": "function",
                    "view": "(method) ExpressionAppender:new(out_query: Query, appender_config: AppenderConfig)\n  -> expression_renderer: ExpressionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ExpressionAppender.lua",
                "finish": 460031,
                "name": "new",
                "rawdesc": " Create a new instance of an `ExpressionRenderer`.",
                "start": 460009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "ExpressionAppender",
        "rawdesc": " Appender for value expressions in a SQL query.",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 160051,
                    "start": 160021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 160036,
                            "start": 160021,
                            "type": "doc.type.name",
                            "view": "TableExpression"
                        },
                        {
                            "finish": 160051,
                            "start": 160037,
                            "type": "doc.type.name",
                            "view": "JoinExpression"
                        }
                    ],
                    "view": "JoinExpression|TableExpression"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 160051,
                "start": 160010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "FromClause",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 200032,
                "start": 200010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 220023,
                    "start": 220015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 220022,
                            "start": 220015,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 220023,
                "name": "srid",
                "start": 220010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 210025,
                    "start": 210015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 210025,
                            "start": 210015,
                            "type": "doc.type.string",
                            "view": "\"GEOMETRY\""
                        }
                    ],
                    "view": "\"GEOMETRY\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 210025,
                "name": "type",
                "start": 210010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "GeometryTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 320032,
                "start": 320010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 340027,
                    "start": 340019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 340026,
                            "start": 340019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 340027,
                "name": "bytesize",
                "start": 340010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 330025,
                    "start": 330015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 330025,
                            "start": 330015,
                            "type": "doc.type.string",
                            "view": "\"HASHTYPE\""
                        }
                    ],
                    "view": "\"HASHTYPE\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 330025,
                "name": "type",
                "start": 330010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "HashtypeTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 10047,
                        "start": 10026,
                        "type": "doc.extends.name",
                        "view": "AbstractQueryAppender"
                    }
                ],
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 10047,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
        "fields": [
            {
                "desc": "Default configuration with double quotes for identifiers.",
                "extends": {
                    "finish": 100093,
                    "start": 100048,
                    "type": "table",
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 100045,
                "name": "DEFAULT_APPENDER_CONFIG",
                "rawdesc": "Default configuration with double quotes for identifiers.",
                "start": 100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
                "extends": {
                    "finish": 30039,
                    "start": 30025,
                    "type": "getlocal",
                    "view": "ImportAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 30022,
                "name": "__index",
                "rawdesc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
                "start": 30000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "token to append",
                            "finish": 270044,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 270039,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                    "finish": 290003,
                    "rawdesc": " Append a token to the query.",
                    "start": 270000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 270038,
                "name": "_append",
                "rawdesc": " Append a token to the query.",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 330046,
                            "rawdesc": "to append",
                            "start": 330043,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                    "finish": 350003,
                    "rawdesc": " Append a list of tokens to the query.",
                    "start": 330000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 330042,
                "name": "_append_all",
                "rawdesc": " Append a list of tokens to the query.",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 560063,
                            "name": "data_type",
                            "start": 560054,
                            "type": "local",
                            "view": "CharacterTypeDefinition"
                        }
                    ],
                    "finish": 650003,
                    "start": 560000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_character_type(data_type: CharacterTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 560053,
                "name": "_append_character_type",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "finish": 270053,
                            "name": "connection",
                            "start": 270043,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "finish": 320003,
                    "start": 270000,
                    "type": "function",
                    "view": "(method) ImportAppender:_append_connection(connection: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 270042,
                "name": "_append_connection",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": " luacheck: max line length 240",
                            "finish": 1240058,
                            "name": "data_type",
                            "rawdesc": " luacheck: max line length 240",
                            "start": 1240049,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "finish": 1460003,
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_data_type(data_type: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1240048,
                "name": "_append_data_type",
                "start": 1240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 470008,
                            "name": "self",
                            "start": 470008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 470069,
                            "name": "data_type",
                            "start": 470060,
                            "type": "local",
                            "view": "DecimalTypeDefinition"
                        }
                    ],
                    "finish": 530003,
                    "start": 470000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_decimal_type_details(data_type: DecimalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 470059,
                "name": "_append_decimal_type_details",
                "start": 470009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 700008,
                            "name": "self",
                            "start": 700008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "finish": 700055,
                            "name": "source_type",
                            "start": 700044,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "finish": 730003,
                    "start": 700000,
                    "type": "function",
                    "view": "(method) ImportAppender:_append_from_clause(source_type?: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 700043,
                "name": "_append_from_clause",
                "start": 700009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 750008,
                            "name": "self",
                            "start": 750008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 750057,
                            "name": "data_type",
                            "start": 750048,
                            "type": "local",
                            "view": "GeometryTypeDefinition"
                        }
                    ],
                    "finish": 820003,
                    "start": 750000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_geometry(data_type: GeometryTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 750047,
                "name": "_append_geometry",
                "start": 750009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 1140057,
                            "name": "data_type",
                            "start": 1140048,
                            "type": "local",
                            "view": "HashtypeTypeDefinition"
                        }
                    ],
                    "finish": 1210003,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_hashtype(data_type: HashtypeTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1140047,
                "name": "_append_hashtype",
                "start": 1140009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                "extends": {
                    "args": [
                        {
                            "finish": 1580008,
                            "name": "self",
                            "start": 1580008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "identifier",
                            "finish": 1580060,
                            "name": "identifier",
                            "rawdesc": "identifier",
                            "start": 1580050,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                    "finish": 1630003,
                    "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                    "start": 1580000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_identifier(identifier: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1580049,
                "name": "_append_identifier",
                "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                "start": 1580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 850057,
                            "name": "data_type",
                            "start": 850048,
                            "type": "local",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "finish": 1110003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_interval(data_type: IntervalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 850047,
                "name": "_append_interval",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 550008,
                            "name": "self",
                            "start": 550008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "finish": 550048,
                            "name": "into",
                            "start": 550044,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                        }
                    ],
                    "finish": 670003,
                    "start": 550000,
                    "type": "function",
                    "view": "(method) ImportAppender:_append_into_clause(into: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[])"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 550043,
                "name": "_append_into_clause",
                "start": 550009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 480008,
                            "name": "self",
                            "start": 480008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "finish": 480051,
                            "name": "statement",
                            "start": 480042,
                            "type": "local",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "finish": 520003,
                    "start": 480000,
                    "type": "function",
                    "view": "(method) ImportAppender:_append_statement(statement: SelectSqlStatement)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 480041,
                "name": "_append_statement",
                "start": 480009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                "extends": {
                    "args": [
                        {
                            "finish": 1500008,
                            "name": "self",
                            "start": 1500008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "string literal",
                            "finish": 1500061,
                            "name": "literal",
                            "rawdesc": "string literal",
                            "start": 1500054,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                    "finish": 1540003,
                    "rawdesc": " Append a string literal and enclose it in single quotes",
                    "start": 1500000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_string_literal(literal: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1500053,
                "name": "_append_string_literal",
                "rawdesc": " Append a string literal and enclose it in single quotes",
                "start": 1500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680008,
                            "name": "self",
                            "start": 680008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 680058,
                            "name": "data_type",
                            "start": 680049,
                            "type": "local",
                            "view": "TimestampTypeDefinition"
                        }
                    ],
                    "finish": 720003,
                    "start": 680000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_timestamp(data_type: TimestampTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 680048,
                "name": "_append_timestamp",
                "start": 680009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "finish": 40041,
                    "start": 40027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40041,
                            "start": 40027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 40041,
                "name": "_appender_config",
                "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "position in the comma-separated list",
                            "finish": 400043,
                            "name": "index",
                            "rawdesc": "position in the comma-separated list",
                            "start": 400038,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                    "finish": 440003,
                    "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                    "start": 400000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_comma(index: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 400037,
                "name": "_comma",
                "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 220008,
                            "name": "self",
                            "start": 220008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "desc": " This class implements an abstraction for a query string including its tokens.",
                            "finish": 220039,
                            "name": "out_query",
                            "rawdesc": " This class implements an abstraction for a query string including its tokens.",
                            "start": 220030,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 220056,
                            "name": "appender_config",
                            "start": 220041,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "finish": 240003,
                    "start": 220000,
                    "type": "function",
                    "view": "(method) ImportAppender:_init(out_query: Query, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 220029,
                "name": "_init",
                "start": 220009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "query object that the appender appends to",
                "extends": {
                    "finish": 30026,
                    "start": 30021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30026,
                            "start": 30021,
                            "type": "doc.type.name",
                            "view": "Query"
                        }
                    ],
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 30026,
                "name": "_out_query",
                "rawdesc": "query object that the appender appends to",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " Alias for the main entry point allows uniform appender invocation",
                "extends": {
                    "finish": 860052,
                    "start": 860024,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 860021,
                "name": "append",
                "rawdesc": " Alias for the main entry point allows uniform appender invocation",
                "start": 860000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append an `IMPORT` statement.\n\n@*param* `import_query` — import query appended",
                "extends": {
                    "args": [
                        {
                            "finish": 770008,
                            "name": "self",
                            "start": 770008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "desc": "import query appended",
                            "finish": 770050,
                            "name": "import_query",
                            "rawdesc": "import query appended",
                            "start": 770038,
                            "type": "local",
                            "view": "ImportSqlStatement"
                        }
                    ],
                    "desc": " Append an `IMPORT` statement.\n\n@*param* `import_query` — import query appended",
                    "finish": 830003,
                    "rawdesc": " Append an `IMPORT` statement.",
                    "start": 770000,
                    "type": "function",
                    "view": "(method) ImportAppender:append_import(import_query: ImportSqlStatement)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 770037,
                "name": "append_import",
                "rawdesc": " Append an `IMPORT` statement.",
                "start": 770009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new query renderer.\n\n@*param* `out_query` — query structure as provided through the Virtual Schema API\n\n@*return* `query_renderer` — instance",
                "extends": {
                    "args": [
                        {
                            "finish": 140008,
                            "name": "self",
                            "start": 140008,
                            "type": "self",
                            "view": "ImportAppender"
                        },
                        {
                            "desc": "query structure as provided through the Virtual Schema API",
                            "finish": 140037,
                            "name": "out_query",
                            "rawdesc": "query structure as provided through the Virtual Schema API",
                            "start": 140028,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 140054,
                            "name": "appender_config",
                            "start": 140039,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": " Create a new query renderer.\n\n@*param* `out_query` — query structure as provided through the Virtual Schema API\n\n@*return* `query_renderer` — instance",
                    "finish": 180003,
                    "rawdesc": " Create a new query renderer.",
                    "returns": [
                        {
                            "desc": "instance",
                            "name": "query_renderer",
                            "rawdesc": "instance",
                            "type": "function.return",
                            "view": "ImportAppender"
                        }
                    ],
                    "start": 140000,
                    "type": "function",
                    "view": "(method) ImportAppender:new(out_query: Query, appender_config: AppenderConfig)\n  -> query_renderer: ImportAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ImportAppender.lua",
                "finish": 140027,
                "name": "new",
                "rawdesc": " Create a new query renderer.",
                "start": 140009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "ImportAppender",
        "rawdesc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 10028,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Builder for an IMPORT query that wraps push-down query",
        "fields": [
            {
                "desc": " Builder for an IMPORT query that wraps push-down query",
                "extends": {
                    "finish": 70047,
                    "start": 70029,
                    "type": "getlocal",
                    "view": "ImportQueryBuilder"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 70026,
                "name": "__index",
                "rawdesc": " Builder for an IMPORT query that wraps push-down query",
                "start": 70000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 20046,
                    "start": 20024,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 20046,
                            "start": 20024,
                            "type": "doc.type.array",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                        }
                    ],
                    "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 20046,
                "name": "_column_types",
                "start": 20010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 40028,
                    "start": 40022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40028,
                            "start": 40022,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 40028,
                "name": "_connection",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 170008,
                            "name": "self",
                            "start": 170008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "finish": 200003,
                    "start": 170000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:_init()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 170033,
                "name": "_init",
                "start": 170009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "default: \"EXA\"",
                "extends": {
                    "finish": 30033,
                    "start": 30023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30033,
                            "start": 30023,
                            "type": "doc.type.name",
                            "view": "\"EXA\"|\"JDBC\"|\"ORA\""
                        }
                    ],
                    "view": "\"EXA\"|\"JDBC\"|\"ORA\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 30033,
                "name": "_source_type",
                "rawdesc": "default: \"EXA\"",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 50039,
                    "start": 50021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50039,
                            "start": 50021,
                            "type": "doc.type.name",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "view": "SelectSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 50039,
                "name": "_statement",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " Build the `IMPORT` query structure.\n\n@*return* `import_statement` — that represents the `IMPORT` statement",
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "desc": " Build the `IMPORT` query structure.\n\n@*return* `import_statement` — that represents the `IMPORT` statement",
                    "finish": 640003,
                    "rawdesc": " Build the `IMPORT` query structure.",
                    "returns": [
                        {
                            "desc": "that represents the `IMPORT` statement",
                            "name": "import_statement",
                            "rawdesc": "that represents the `IMPORT` statement",
                            "type": "function.return",
                            "view": "ImportSqlStatement"
                        }
                    ],
                    "start": 560000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:build()\n  -> import_statement: ImportSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 560033,
                "name": "build",
                "rawdesc": " Build the `IMPORT` query structure.",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Set the result set column data types.\n\n@*param* `column_types` — column types as list of data type structures\n\n@*return* `self` — for fluent programming",
                "extends": {
                    "args": [
                        {
                            "finish": 250008,
                            "name": "self",
                            "start": 250008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        },
                        {
                            "desc": "column types as list of data type structures",
                            "finish": 250053,
                            "name": "column_types",
                            "rawdesc": "column types as list of data type structures",
                            "start": 250041,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                        }
                    ],
                    "desc": " Set the result set column data types.\n\n@*param* `column_types` — column types as list of data type structures\n\n@*return* `self` — for fluent programming",
                    "finish": 280003,
                    "rawdesc": " Set the result set column data types.",
                    "returns": [
                        {
                            "desc": "for fluent programming",
                            "name": "self",
                            "rawdesc": "for fluent programming",
                            "type": "function.return",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "start": 250000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:column_types(column_types: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[])\n  -> self: ImportQueryBuilder"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 250040,
                "name": "column_types",
                "rawdesc": " Set the result set column data types.",
                "start": 250009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Set the connection.\n\n@*param* `connection` — connection over which the remote query should be run\n\n@*return* `self` — for fluent programming",
                "extends": {
                    "args": [
                        {
                            "finish": 410008,
                            "name": "self",
                            "start": 410008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        },
                        {
                            "desc": "connection over which the remote query should be run",
                            "finish": 410049,
                            "name": "connection",
                            "rawdesc": "connection over which the remote query should be run",
                            "start": 410039,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Set the connection.\n\n@*param* `connection` — connection over which the remote query should be run\n\n@*return* `self` — for fluent programming",
                    "finish": 440003,
                    "rawdesc": " Set the connection.",
                    "returns": [
                        {
                            "desc": "for fluent programming",
                            "name": "self",
                            "rawdesc": "for fluent programming",
                            "type": "function.return",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "start": 410000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:connection(connection: string)\n  -> self: ImportQueryBuilder"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 410038,
                "name": "connection",
                "rawdesc": " Set the connection.",
                "start": 410009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new instance of an `ImportQueryBuilder`.\n\n@*return* `new_instance` — new query builder",
                "extends": {
                    "args": [
                        {
                            "finish": 110008,
                            "name": "self",
                            "start": 110008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "desc": " Create a new instance of an `ImportQueryBuilder`.\n\n@*return* `new_instance` — new query builder",
                    "finish": 150003,
                    "rawdesc": " Create a new instance of an `ImportQueryBuilder`.",
                    "returns": [
                        {
                            "desc": "new query builder",
                            "name": "new_instance",
                            "rawdesc": "new query builder",
                            "type": "function.return",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "start": 110000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:new()\n  -> new_instance: ImportQueryBuilder"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 110031,
                "name": "new",
                "rawdesc": " Create a new instance of an `ImportQueryBuilder`.",
                "start": 110009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Set the source type to one of `EXA`, `JDBC`, `ORA`. Default: `EXA`.\n\n@*param* `source_type` — type of the source from which to import\n\n@*return* `self` — for fluent programming\n\n```lua\nsource_type:\n    | \"EXA\"\n    | \"JDBC\"\n    | \"ORA\"\n```",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        },
                        {
                            "desc": "type of the source from which to import",
                            "finish": 330051,
                            "name": "source_type",
                            "rawdesc": "type of the source from which to import",
                            "start": 330040,
                            "type": "local",
                            "view": "\"EXA\"|\"JDBC\"|\"ORA\""
                        }
                    ],
                    "desc": " Set the source type to one of `EXA`, `JDBC`, `ORA`. Default: `EXA`.\n\n@*param* `source_type` — type of the source from which to import\n\n@*return* `self` — for fluent programming\n\n```lua\nsource_type:\n    | \"EXA\"\n    | \"JDBC\"\n    | \"ORA\"\n```",
                    "finish": 360003,
                    "rawdesc": " Set the source type to one of `EXA`, `JDBC`, `ORA`. Default: `EXA`.\n\n```lua\nsource_type:\n    | \"EXA\"\n    | \"JDBC\"\n    | \"ORA\"\n```",
                    "returns": [
                        {
                            "desc": "for fluent programming",
                            "name": "self",
                            "rawdesc": "for fluent programming",
                            "type": "function.return",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "start": 330000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:source_type(source_type: \"EXA\"|\"JDBC\"|\"ORA\")\n  -> self: ImportQueryBuilder"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 330039,
                "name": "source_type",
                "rawdesc": " Set the source type to one of `EXA`, `JDBC`, `ORA`. Default: `EXA`.\n\n```lua\nsource_type:\n    | \"EXA\"\n    | \"JDBC\"\n    | \"ORA\"\n```",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Set the push-down statement.\n\n@*param* `statement` — push-down statement to be wrapped by the `IMPORT` statement.\n\n@*return* `self` — for fluent programming",
                "extends": {
                    "args": [
                        {
                            "finish": 490008,
                            "name": "self",
                            "start": 490008,
                            "type": "self",
                            "view": "ImportQueryBuilder"
                        },
                        {
                            "desc": "push-down statement to be wrapped by the `IMPORT` statement.",
                            "finish": 490047,
                            "name": "statement",
                            "rawdesc": "push-down statement to be wrapped by the `IMPORT` statement.",
                            "start": 490038,
                            "type": "local",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "desc": " Set the push-down statement.\n\n@*param* `statement` — push-down statement to be wrapped by the `IMPORT` statement.\n\n@*return* `self` — for fluent programming",
                    "finish": 520003,
                    "rawdesc": " Set the push-down statement.",
                    "returns": [
                        {
                            "desc": "for fluent programming",
                            "name": "self",
                            "rawdesc": "for fluent programming",
                            "type": "function.return",
                            "view": "ImportQueryBuilder"
                        }
                    ],
                    "start": 490000,
                    "type": "function",
                    "view": "(method) ImportQueryBuilder:statement(statement: SelectSqlStatement)\n  -> self: ImportQueryBuilder"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 490037,
                "name": "statement",
                "rawdesc": " Set the push-down statement.",
                "start": 490009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "ImportQueryBuilder",
        "rawdesc": " Builder for an IMPORT query that wraps push-down query",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 570028,
                "start": 570010,
                "type": "doc.class"
            }
        ],
        "desc": "The ImportSqlStatement is a record (behavior-less table) that contains the structure of an `IMPORT` SQL statement.",
        "fields": [
            {
                "extends": {
                    "finish": 610027,
                    "start": 610021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 610027,
                            "start": 610021,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 610027,
                "name": "connection",
                "start": 610010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 590037,
                    "start": 590015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 590037,
                            "start": 590015,
                            "type": "doc.type.array",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                        }
                    ],
                    "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 590037,
                "name": "into",
                "start": 590010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 600032,
                    "start": 600022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 600032,
                            "start": 600022,
                            "type": "doc.type.name",
                            "view": "\"EXA\"|\"JDBC\"|\"ORA\""
                        }
                    ],
                    "view": "\"EXA\"|\"JDBC\"|\"ORA\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 600032,
                "name": "source_type",
                "start": 600010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 620038,
                    "start": 620020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 620038,
                            "start": 620020,
                            "type": "doc.type.name",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "view": "SelectSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 620038,
                "name": "statement",
                "start": 620010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 580023,
                    "start": 580015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 580023,
                            "start": 580015,
                            "type": "doc.type.string",
                            "view": "\"import\""
                        }
                    ],
                    "view": "\"import\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 580023,
                "name": "type",
                "start": 580010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ImportSqlStatement",
        "rawdesc": "The ImportSqlStatement is a record (behavior-less table) that contains the structure of an `IMPORT` SQL statement.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 720021,
                "start": 720010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 750030,
                    "start": 750020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 750030,
                            "start": 750020,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 750030,
                "name": "arguments",
                "start": 750010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 740031,
                    "start": 740021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 740031,
                            "start": 740021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 740031,
                "name": "expression",
                "start": 740010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 730039,
                    "start": 730015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 730039,
                            "start": 730015,
                            "type": "doc.type.string",
                            "view": "\"predicate_in_constlist\""
                        }
                    ],
                    "view": "\"predicate_in_constlist\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 730039,
                "name": "type",
                "start": 730010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "InPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 250032,
                "start": 250010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 290027,
                    "start": 290019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 290026,
                            "start": 290019,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 290027,
                "name": "fraction",
                "start": 290010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 270023,
                    "start": 270017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 270023,
                            "start": 270017,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 270023,
                "name": "fromTo",
                "start": 270010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 280028,
                    "start": 280020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 280027,
                            "start": 280020,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 280028,
                "name": "precision",
                "start": 280010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 260025,
                    "start": 260015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 260025,
                            "start": 260015,
                            "type": "doc.type.string",
                            "view": "\"INTERVAL\""
                        }
                    ],
                    "view": "\"INTERVAL\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 260025,
                "name": "type",
                "start": 260010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "IntervalTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 670027,
                "start": 670010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 690034,
                    "start": 690022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 690034,
                            "start": 690022,
                            "type": "doc.type.array",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 690034,
                "name": "expressions",
                "start": 690010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 680045,
                    "start": 680015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 680030,
                            "start": 680015,
                            "type": "doc.type.string",
                            "view": "\"predicate_and\""
                        },
                        {
                            "finish": 680045,
                            "start": 680031,
                            "type": "doc.type.string",
                            "view": "\"predicate_or\""
                        }
                    ],
                    "view": "\"predicate_and\"|\"predicate_or\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 680045,
                "name": "type",
                "start": 680010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "IteratedPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 380024,
                "start": 380010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 430030,
                    "start": 430020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 430030,
                            "start": 430020,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 430030,
                "name": "condition",
                "start": 430010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 400073,
                    "start": 400020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 400027,
                            "start": 400020,
                            "type": "doc.type.string",
                            "view": "\"inner\""
                        },
                        {
                            "finish": 400042,
                            "start": 400030,
                            "type": "doc.type.string",
                            "view": "\"left_outer\""
                        },
                        {
                            "finish": 400058,
                            "start": 400045,
                            "type": "doc.type.string",
                            "view": "\"right_outer\""
                        },
                        {
                            "finish": 400073,
                            "start": 400061,
                            "type": "doc.type.string",
                            "view": "\"full_outer\""
                        }
                    ],
                    "view": "\"full_outer\"|\"inner\"|\"left_outer\"|\"right_outer\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 400073,
                "name": "join_type",
                "start": 400010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 410030,
                    "start": 410015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 410030,
                            "start": 410015,
                            "type": "doc.type.name",
                            "view": "TableExpression"
                        }
                    ],
                    "view": "TableExpression"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 410030,
                "name": "left",
                "start": 410010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 420031,
                    "start": 420016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 420031,
                            "start": 420016,
                            "type": "doc.type.name",
                            "view": "TableExpression"
                        }
                    ],
                    "view": "TableExpression"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 420031,
                "name": "right",
                "start": 420010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 390021,
                    "start": 390015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 390021,
                            "start": 390015,
                            "type": "doc.type.string",
                            "view": "\"join\""
                        }
                    ],
                    "view": "\"join\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 390021,
                "name": "type",
                "start": 390010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "JoinExpression",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 830023,
                "start": 830010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 850031,
                    "start": 850021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 850031,
                            "start": 850021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 850031,
                "name": "expression",
                "start": 850010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 870074,
                    "start": 870034,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 870052,
                            "start": 870034,
                            "type": "doc.type.string",
                            "view": "\"WITH UNIQUE KEYS\""
                        },
                        {
                            "finish": 870074,
                            "start": 870053,
                            "type": "doc.type.string",
                            "view": "\"WITHOUT UNIQUE KEYS\""
                        }
                    ],
                    "view": "\"WITH UNIQUE KEYS\"|\"WITHOUT UNIQUE KEYS\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 870074,
                "name": "keyUniquenessConstraint",
                "start": 870010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 840058,
                    "start": 840015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 840034,
                            "start": 840015,
                            "type": "doc.type.string",
                            "view": "\"predicate_is_json\""
                        },
                        {
                            "finish": 840058,
                            "start": 840035,
                            "type": "doc.type.string",
                            "view": "\"predicate_is_not_json\""
                        }
                    ],
                    "view": "\"predicate_is_json\"|\"predicate_is_not_json\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 840058,
                "name": "type",
                "start": 840010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 860058,
                    "start": 860025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 860032,
                            "start": 860025,
                            "type": "doc.type.string",
                            "view": "\"VALUE\""
                        },
                        {
                            "finish": 860040,
                            "start": 860033,
                            "type": "doc.type.string",
                            "view": "\"ARRAY\""
                        },
                        {
                            "finish": 860049,
                            "start": 860041,
                            "type": "doc.type.string",
                            "view": "\"OBJECT\""
                        },
                        {
                            "finish": 860058,
                            "start": 860050,
                            "type": "doc.type.string",
                            "view": "\"SCALAR\""
                        }
                    ],
                    "view": "\"ARRAY\"|\"OBJECT\"|\"SCALAR\"|\"VALUE\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 860058,
                "name": "typeConstraint",
                "start": 860010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "JsonPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 900023,
                "start": 900010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 940032,
                    "start": 940021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 940031,
                            "start": 940021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "(ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4))?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 940032,
                "name": "escapeChar",
                "start": 940010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 920031,
                    "start": 920021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 920031,
                            "start": 920021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 920031,
                "name": "expression",
                "start": 920010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 930028,
                    "start": 930018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 930028,
                            "start": 930018,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 930028,
                "name": "pattern",
                "start": 930010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 910031,
                    "start": 910015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 910031,
                            "start": 910015,
                            "type": "doc.type.string",
                            "view": "\"predicate_like\""
                        }
                    ],
                    "view": "\"predicate_like\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 910031,
                "name": "type",
                "start": 910010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LikePredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 970029,
                "start": 970010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 990031,
                    "start": 990021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 990031,
                            "start": 990021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 990031,
                "name": "expression",
                "start": 990010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1000028,
                    "start": 1000018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1000028,
                            "start": 1000018,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1000028,
                "name": "pattern",
                "start": 1000010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 980038,
                    "start": 980015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 980038,
                            "start": 980015,
                            "type": "doc.type.string",
                            "view": "\"predicate_like_regexp\""
                        }
                    ],
                    "view": "\"predicate_like_regexp\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 980038,
                "name": "type",
                "start": 980010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LikeRegexpPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 260021,
                "start": 260010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 270029,
                    "start": 270022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 270029,
                            "start": 270022,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 270029,
                "name": "numElements",
                "start": 270010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 280025,
                    "start": 280017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 280024,
                            "start": 280017,
                            "type": "doc.type.name",
                            "view": "integer"
                        }
                    ],
                    "view": "integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 280025,
                "name": "offset",
                "start": 280010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LimitClause",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 130024,
                "start": 130010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 140029,
                    "start": 140015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 140029,
                            "start": 140015,
                            "type": "doc.type.string",
                            "view": "\"literal_bool\""
                        }
                    ],
                    "view": "\"literal_bool\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 140029,
                "name": "type",
                "start": 140010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 150023,
                    "start": 150016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 150023,
                            "start": 150016,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 150023,
                "name": "value",
                "start": 150010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralBoolean",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 330021,
                "start": 330010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 340029,
                    "start": 340015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 340029,
                            "start": 340015,
                            "type": "doc.type.string",
                            "view": "\"literal_date\""
                        }
                    ],
                    "view": "\"literal_date\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 340029,
                "name": "type",
                "start": 340010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 350022,
                    "start": 350016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 350022,
                            "start": 350016,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 350022,
                "name": "value",
                "start": 350010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralDate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 230023,
                "start": 230010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 240031,
                    "start": 240015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 240031,
                            "start": 240015,
                            "type": "doc.type.string",
                            "view": "\"literal_double\""
                        }
                    ],
                    "view": "\"literal_double\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 240031,
                "name": "type",
                "start": 240010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 250022,
                    "start": 250016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 250022,
                            "start": 250016,
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 250022,
                "name": "value",
                "start": 250010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralDouble",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 180029,
                "start": 180010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 190037,
                    "start": 190015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 190037,
                            "start": 190015,
                            "type": "doc.type.string",
                            "view": "\"literal_exactnumeric\""
                        }
                    ],
                    "view": "\"literal_exactnumeric\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 190037,
                "name": "type",
                "start": 190010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 200022,
                    "start": 200016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 200022,
                            "start": 200016,
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 200022,
                "name": "value",
                "start": 200010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralExactNumeric",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 500107,
                    "start": 500028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 500039,
                            "start": 500028,
                            "type": "doc.type.name",
                            "view": "LiteralNull"
                        },
                        {
                            "finish": 500054,
                            "start": 500040,
                            "type": "doc.type.name",
                            "view": "LiteralBoolean"
                        },
                        {
                            "finish": 500074,
                            "start": 500055,
                            "type": "doc.type.name",
                            "view": "LiteralExactNumeric"
                        },
                        {
                            "finish": 500088,
                            "start": 500075,
                            "type": "doc.type.name",
                            "view": "LiteralDouble"
                        },
                        {
                            "finish": 500107,
                            "start": 500089,
                            "type": "doc.type.name",
                            "view": "LiteralDate|LiteralInterval|LiteralString|LiteralTimestamp"
                        }
                    ],
                    "view": "LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric|LiteralInterval...(+3)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 500107,
                "start": 500010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "LiteralExpression",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 430025,
                "start": 430010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 460041,
                    "start": 460019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 460041,
                            "start": 460019,
                            "type": "doc.type.name",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "view": "IntervalTypeDefinition"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 460041,
                "name": "dataType",
                "start": 460010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 440033,
                    "start": 440015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 440033,
                            "start": 440015,
                            "type": "doc.type.string",
                            "view": "\"literal_interval\""
                        }
                    ],
                    "view": "\"literal_interval\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 440033,
                "name": "type",
                "start": 440010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 450022,
                    "start": 450016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 450022,
                            "start": 450016,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 450022,
                "name": "value",
                "start": 450010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralInterval",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 90021,
                "start": 90010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 100029,
                    "start": 100015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 100029,
                            "start": 100015,
                            "type": "doc.type.string",
                            "view": "\"literal_null\""
                        }
                    ],
                    "view": "\"literal_null\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 100029,
                "name": "type",
                "start": 100010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralNull",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 280023,
                "start": 280010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 290031,
                    "start": 290015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 290031,
                            "start": 290015,
                            "type": "doc.type.string",
                            "view": "\"literal_string\""
                        }
                    ],
                    "view": "\"literal_string\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 290031,
                "name": "type",
                "start": 290010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 300022,
                    "start": 300016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 300022,
                            "start": 300016,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 300022,
                "name": "value",
                "start": 300010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralString",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 380026,
                "start": 380010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 390034,
                    "start": 390015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 390034,
                            "start": 390015,
                            "type": "doc.type.string",
                            "view": "\"literal_timestamp\""
                        }
                    ],
                    "view": "\"literal_timestamp\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 390034,
                "name": "type",
                "start": 390010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 400022,
                    "start": 400016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 400022,
                            "start": 400016,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 400022,
                "name": "value",
                "start": 400010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "LiteralTimestamp",
        "type": "type"
    },
    {
        "DOC": "/home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua",
        "defines": [],
        "fields": [],
        "name": "LuaLS",
        "type": "luals.config"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 600022,
                "start": 600010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 620031,
                    "start": 620021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 620031,
                            "start": 620021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 620031,
                "name": "expression",
                "start": 620010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 610030,
                    "start": 610015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 610030,
                            "start": 610015,
                            "type": "doc.type.string",
                            "view": "\"predicate_not\""
                        }
                    ],
                    "view": "\"predicate_not\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 610030,
                "name": "type",
                "start": 610010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "NotPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 200023,
                "start": 200010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 210031,
                    "start": 210021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 210031,
                            "start": 210021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 210031,
                "name": "expression",
                "start": 210010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 220030,
                    "start": 220022,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 220029,
                            "start": 220022,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 220030,
                "name": "isAscending",
                "start": 220010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 230028,
                    "start": 230020,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 230027,
                            "start": 230020,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 230028,
                "name": "nullsLast",
                "start": 230010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "OrderByClause",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1030026,
                "start": 1030010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 1050031,
                    "start": 1050021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1050031,
                            "start": 1050021,
                            "type": "doc.type.name",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1050031,
                "name": "expression",
                "start": 1050010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1040058,
                    "start": 1040015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1040034,
                            "start": 1040015,
                            "type": "doc.type.string",
                            "view": "\"predicate_is_null\""
                        },
                        {
                            "finish": 1040058,
                            "start": 1040035,
                            "type": "doc.type.string",
                            "view": "\"predicate_is_not_null\""
                        }
                    ],
                    "view": "\"predicate_is_not_null\"|\"predicate_is_null\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1040058,
                "name": "type",
                "start": 1040010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "PostfixPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1160178,
                    "start": 1160030,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 1160055,
                            "start": 1160030,
                            "type": "doc.type.name",
                            "view": "BinaryPredicateExpression"
                        },
                        {
                            "finish": 1160070,
                            "start": 1160056,
                            "type": "doc.type.name",
                            "view": "NotPredicate"
                        },
                        {
                            "finish": 1160088,
                            "start": 1160071,
                            "type": "doc.type.name",
                            "view": "IteratedPredicate"
                        },
                        {
                            "finish": 1160100,
                            "start": 1160089,
                            "type": "doc.type.name",
                            "view": "InPredicate"
                        },
                        {
                            "finish": 1160116,
                            "start": 1160101,
                            "type": "doc.type.name",
                            "view": "ExistsPredicate"
                        },
                        {
                            "finish": 1160130,
                            "start": 1160117,
                            "type": "doc.type.name",
                            "view": "JsonPredicate"
                        },
                        {
                            "finish": 1160144,
                            "start": 1160131,
                            "type": "doc.type.name",
                            "view": "LikePredicate"
                        },
                        {
                            "finish": 1160161,
                            "start": 1160145,
                            "type": "doc.type.name",
                            "view": "PostfixPredicate"
                        },
                        {
                            "finish": 1160178,
                            "start": 1160162,
                            "type": "doc.type.name",
                            "view": "BetweenPredicate"
                        }
                    ],
                    "view": "BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 1160178,
                "start": 1160010,
                "type": "doc.alias"
            }
        ],
        "desc": " luacheck: max line length 180",
        "fields": [],
        "name": "PredicateExpression",
        "rawdesc": " luacheck: max line length 180",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 170032,
                "start": 170010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": " luacheck: max line length 240",
                "extends": {
                    "finish": 190039,
                    "start": 190019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 190039,
                            "start": 190019,
                            "type": "doc.type.name",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 190039,
                "name": "dataType",
                "rawdesc": " luacheck: max line length 240",
                "start": 190010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 180021,
                    "start": 180015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 180021,
                            "start": 180015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 180021,
                "name": "name",
                "start": 180010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "PushdownInvolvedColumn",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 110031,
                "start": 110010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 130030,
                    "start": 130023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 130029,
                            "start": 130023,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 130030,
                "name": "adapterNotes",
                "start": 130010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 140042,
                    "start": 140018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 140042,
                            "start": 140018,
                            "type": "doc.type.array",
                            "view": "PushdownInvolvedColumn[]"
                        }
                    ],
                    "view": "PushdownInvolvedColumn[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 140042,
                "name": "columns",
                "start": 140010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 120021,
                    "start": 120015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 120021,
                            "start": 120015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 120021,
                "name": "name",
                "start": 120010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "PushdownInvolvedTable",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 40025,
                "start": 40010,
                "type": "doc.class"
            }
        ],
        "desc": "Pushdown request",
        "fields": [
            {
                "extends": {
                    "finish": 60048,
                    "start": 60025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 60048,
                            "start": 60025,
                            "type": "doc.type.array",
                            "view": "PushdownInvolvedTable[]"
                        }
                    ],
                    "view": "PushdownInvolvedTable[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 60048,
                "name": "involvedTables",
                "start": 60010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 70044,
                    "start": 70026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 70044,
                            "start": 70026,
                            "type": "doc.type.name",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "view": "SelectSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 70044,
                "name": "pushdownRequest",
                "start": 70010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Schema metadata info in requests",
                "extends": {
                    "finish": 80047,
                    "start": 80029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 80047,
                            "start": 80029,
                            "type": "doc.type.name",
                            "view": "SchemaMetadataInfo"
                        }
                    ],
                    "view": "SchemaMetadataInfo"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 80047,
                "name": "schemaMetadataInfo",
                "rawdesc": "Schema metadata info in requests",
                "start": 80010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 50025,
                    "start": 50015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50025,
                            "start": 50015,
                            "type": "doc.type.string",
                            "view": "\"pushdown\""
                        }
                    ],
                    "view": "\"pushdown\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 50025,
                "name": "type",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "PushdownRequest",
        "rawdesc": "Pushdown request",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 460026,
                "start": 460010,
                "type": "doc.class"
            }
        ],
        "desc": "Response for a pushdown request",
        "fields": [
            {
                "desc": "The SQL statement to be executed in the remote system.",
                "extends": {
                    "finish": 480020,
                    "start": 480014,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 480020,
                            "start": 480014,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 480020,
                "name": "sql",
                "rawdesc": "The SQL statement to be executed in the remote system.",
                "start": 480010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 470025,
                    "start": 470015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 470025,
                            "start": 470015,
                            "type": "doc.type.string",
                            "view": "\"pushdown\""
                        }
                    ],
                    "view": "\"pushdown\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 470025,
                "name": "type",
                "start": 470010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "PushdownResponse",
        "rawdesc": "Response for a pushdown request",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 20015,
                "start": 20010,
                "type": "doc.class"
            }
        ],
        "desc": " This class implements an abstraction for a query string including its tokens.",
        "fields": [
            {
                "desc": " This class implements an abstraction for a query string including its tokens.",
                "extends": {
                    "finish": 50021,
                    "start": 50016,
                    "type": "getlocal",
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 50013,
                "name": "__index",
                "rawdesc": " This class implements an abstraction for a query string including its tokens.",
                "start": 50000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 170008,
                            "name": "self",
                            "start": 170008,
                            "type": "self",
                            "view": "Query"
                        },
                        {
                            "finish": 170027,
                            "name": "tokens",
                            "start": 170021,
                            "type": "local",
                            "view": "string|number[]?"
                        }
                    ],
                    "finish": 190003,
                    "start": 170000,
                    "type": "function",
                    "view": "(method) Query:_init(tokens?: string|number[])"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 170020,
                "name": "_init",
                "start": 170009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 30025,
                    "start": 30018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30025,
                            "start": 30018,
                            "type": "doc.type.array",
                            "view": "string|number[]"
                        }
                    ],
                    "view": "string|number[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 30025,
                "name": "_tokens",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " Append a single token.\n While the same can be achieved with calling `append_all` with a single parameter, this method is faster.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 240008,
                            "name": "self",
                            "start": 240008,
                            "type": "self",
                            "view": "Query"
                        },
                        {
                            "desc": "token to append",
                            "finish": 240027,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 240022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a single token.\n While the same can be achieved with calling `append_all` with a single parameter, this method is faster.\n\n@*param* `token` — token to append",
                    "finish": 260003,
                    "rawdesc": " Append a single token.\n While the same can be achieved with calling `append_all` with a single parameter, this method is faster.",
                    "start": 240000,
                    "type": "function",
                    "view": "(method) Query:append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 240021,
                "name": "append",
                "rawdesc": " Append a single token.\n While the same can be achieved with calling `append_all` with a single parameter, this method is faster.",
                "start": 240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append all tokens.\n\n@*param* `...` — tokens to append",
                "extends": {
                    "args": [
                        {
                            "finish": 300008,
                            "name": "self",
                            "start": 300008,
                            "type": "self",
                            "view": "Query"
                        },
                        {
                            "desc": "tokens to append",
                            "finish": 300029,
                            "rawdesc": "tokens to append",
                            "start": 300026,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append all tokens.\n\n@*param* `...` — tokens to append",
                    "finish": 340003,
                    "rawdesc": " Append all tokens.",
                    "start": 300000,
                    "type": "function",
                    "view": "(method) Query:append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 300025,
                "name": "append_all",
                "rawdesc": " Append all tokens.",
                "start": 300009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get the tokens this query consists of",
                "extends": {
                    "args": [
                        {
                            "finish": 380008,
                            "name": "self",
                            "start": 380008,
                            "type": "self",
                            "view": "Query"
                        }
                    ],
                    "desc": " Get the tokens this query consists of",
                    "finish": 400003,
                    "rawdesc": " Get the tokens this query consists of",
                    "returns": [
                        {
                            "name": "tokens",
                            "type": "function.return",
                            "view": "string|number[]"
                        }
                    ],
                    "start": 380000,
                    "type": "function",
                    "view": "(method) Query:get_tokens()\n  -> tokens: string|number[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 380025,
                "name": "get_tokens",
                "rawdesc": " Get the tokens this query consists of",
                "start": 380009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new instance of a `Query`.\n\n@*param* `tokens` — list of tokens that make up the query",
                "extends": {
                    "args": [
                        {
                            "finish": 100008,
                            "name": "self",
                            "start": 100008,
                            "type": "self",
                            "view": "Query"
                        },
                        {
                            "desc": "list of tokens that make up the query",
                            "finish": 100025,
                            "name": "tokens",
                            "rawdesc": "list of tokens that make up the query",
                            "start": 100019,
                            "type": "local",
                            "view": "string|number[]?"
                        }
                    ],
                    "desc": " Create a new instance of a `Query`.\n\n@*param* `tokens` — list of tokens that make up the query",
                    "finish": 140003,
                    "rawdesc": " Create a new instance of a `Query`.",
                    "returns": [
                        {
                            "name": "query_object",
                            "type": "function.return",
                            "view": "Query"
                        }
                    ],
                    "start": 100000,
                    "type": "function",
                    "view": "(method) Query:new(tokens?: string|number[])\n  -> query_object: Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 100018,
                "name": "new",
                "rawdesc": " Create a new instance of a `Query`.",
                "start": 100009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Return the whole query as string.\n\n@*return* `query` — query as string",
                "extends": {
                    "args": [
                        {
                            "finish": 440008,
                            "name": "self",
                            "start": 440008,
                            "type": "self",
                            "view": "Query"
                        }
                    ],
                    "desc": " Return the whole query as string.\n\n@*return* `query` — query as string",
                    "finish": 460003,
                    "rawdesc": " Return the whole query as string.",
                    "returns": [
                        {
                            "desc": "query as string",
                            "name": "query",
                            "rawdesc": "query as string",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 440000,
                    "type": "function",
                    "view": "(method) Query:to_string()\n  -> query: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 440024,
                "name": "to_string",
                "rawdesc": " Return the whole query as string.",
                "start": 440009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "Query",
        "rawdesc": " This class implements an abstraction for a query string including its tokens.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 10023,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Renderer for SQL queries.",
        "fields": [
            {
                "desc": " Renderer for SQL queries.",
                "extends": {
                    "finish": 50037,
                    "start": 50024,
                    "type": "getlocal",
                    "view": "QueryRenderer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 50021,
                "name": "__index",
                "rawdesc": " Renderer for SQL queries.",
                "start": 50000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 30041,
                    "start": 30027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30041,
                            "start": 30027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 30041,
                "name": "_appender_config",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "@*param* `original_query` — query structure as provided through the Virtual Schema API\n\n@*param* `appender_config` — configuration for the query renderer containing identifier quoting",
                "extends": {
                    "args": [
                        {
                            "finish": 230008,
                            "name": "self",
                            "start": 230008,
                            "type": "self",
                            "view": "QueryRenderer"
                        },
                        {
                            "desc": "query structure as provided through the Virtual Schema API",
                            "finish": 230043,
                            "name": "original_query",
                            "rawdesc": "query structure as provided through the Virtual Schema API",
                            "start": 230029,
                            "type": "local",
                            "view": "ImportSqlStatement|SelectSqlStatement"
                        },
                        {
                            "desc": "configuration for the query renderer containing identifier quoting",
                            "finish": 230060,
                            "name": "appender_config",
                            "rawdesc": "configuration for the query renderer containing identifier quoting",
                            "start": 230045,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": "@*param* `original_query` — query structure as provided through the Virtual Schema API\n\n@*param* `appender_config` — configuration for the query renderer containing identifier quoting",
                    "finish": 260003,
                    "start": 230000,
                    "type": "function",
                    "view": "(method) QueryRenderer:_init(original_query: ImportSqlStatement|SelectSqlStatement, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 230028,
                "name": "_init",
                "start": 230009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "The ImportSqlStatement is a record (behavior-less table) that contains the structure of an `IMPORT` SQL statement.",
                "extends": {
                    "finish": 20040,
                    "start": 20026,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 20040,
                            "start": 20026,
                            "type": "doc.type.name",
                            "view": "ImportSqlStatement|SelectSqlStatement"
                        }
                    ],
                    "view": "ImportSqlStatement|SelectSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 20040,
                "name": "_original_query",
                "rawdesc": "The ImportSqlStatement is a record (behavior-less table) that contains the structure of an `IMPORT` SQL statement.",
                "start": 20010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " Create a new query renderer.\n\n@*param* `original_query` — query structure as provided through the Virtual Schema API\n\n@*param* `appender_config` — configuration for the query renderer containing identifier quoting\n\n@*return* `query_renderer` — instance",
                "extends": {
                    "args": [
                        {
                            "finish": 150008,
                            "name": "self",
                            "start": 150008,
                            "type": "self",
                            "view": "QueryRenderer"
                        },
                        {
                            "desc": "query structure as provided through the Virtual Schema API",
                            "finish": 150041,
                            "name": "original_query",
                            "rawdesc": "query structure as provided through the Virtual Schema API",
                            "start": 150027,
                            "type": "local",
                            "view": "ImportSqlStatement|SelectSqlStatement"
                        },
                        {
                            "desc": "configuration for the query renderer containing identifier quoting",
                            "finish": 150058,
                            "name": "appender_config",
                            "rawdesc": "configuration for the query renderer containing identifier quoting",
                            "start": 150043,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": " Create a new query renderer.\n\n@*param* `original_query` — query structure as provided through the Virtual Schema API\n\n@*param* `appender_config` — configuration for the query renderer containing identifier quoting\n\n@*return* `query_renderer` — instance",
                    "finish": 190003,
                    "rawdesc": " Create a new query renderer.",
                    "returns": [
                        {
                            "desc": "instance",
                            "name": "query_renderer",
                            "rawdesc": "instance",
                            "type": "function.return",
                            "view": "QueryRenderer"
                        }
                    ],
                    "start": 150000,
                    "type": "function",
                    "view": "(method) QueryRenderer:new(original_query: ImportSqlStatement|SelectSqlStatement, appender_config: AppenderConfig)\n  -> query_renderer: QueryRenderer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 150026,
                "name": "new",
                "rawdesc": " Create a new query renderer.",
                "start": 150009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Render the query to a string.\n\n@*return* `rendered_query` — query as string",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "QueryRenderer"
                        }
                    ],
                    "desc": " Render the query to a string.\n\n@*return* `rendered_query` — query as string",
                    "finish": 460003,
                    "rawdesc": " Render the query to a string.",
                    "returns": [
                        {
                            "desc": "query as string",
                            "name": "rendered_query",
                            "rawdesc": "query as string",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 400000,
                    "type": "function",
                    "view": "(method) QueryRenderer:render()\n  -> rendered_query: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/QueryRenderer.lua",
                "finish": 400029,
                "name": "render",
                "rawdesc": " Render the query to a string.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "QueryRenderer",
        "rawdesc": " Renderer for SQL queries.",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 650062,
                    "start": 650025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 650043,
                            "start": 650025,
                            "type": "doc.type.name",
                            "view": "SelectSqlStatement"
                        },
                        {
                            "finish": 650062,
                            "start": 650044,
                            "type": "doc.type.name",
                            "view": "ImportSqlStatement"
                        }
                    ],
                    "view": "ImportSqlStatement|SelectSqlStatement"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 650062,
                "start": 650010,
                "type": "doc.alias"
            }
        ],
        "desc": "The ImportSqlStatement is a record (behavior-less table) that contains the structure of an `IMPORT` SQL statement.",
        "fields": [],
        "name": "QueryStatement",
        "rawdesc": "The ImportSqlStatement is a record (behavior-less table) that contains the structure of an `IMPORT` SQL statement.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 100038,
                "start": 100010,
                "type": "doc.class"
            }
        ],
        "desc": "Response for a refresh request",
        "fields": [
            {
                "desc": "Response for a createVirtualSchema request",
                "extends": {
                    "finish": 120045,
                    "start": 120025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 120045,
                            "start": 120025,
                            "type": "doc.type.name",
                            "view": "ExasolSchemaMetadata"
                        }
                    ],
                    "view": "ExasolSchemaMetadata"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 120045,
                "name": "schemaMetadata",
                "rawdesc": "Response for a createVirtualSchema request",
                "start": 120010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 110024,
                    "start": 110015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 110024,
                            "start": 110015,
                            "type": "doc.type.string",
                            "view": "\"refresh\""
                        }
                    ],
                    "view": "\"refresh\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 110024,
                "name": "type",
                "start": 110010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "RefreshVirtualSchemaResponse",
        "rawdesc": "Response for a refresh request",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 40027,
                "start": 40010,
                "type": "doc.class"
            }
        ],
        "desc": " This class dispatches Virtual Schema requests to a Virtual Schema adapter.\n It is independent of the use case of the VS adapter and offers functionality that each Virtual Schema needs, like\n JSON decoding and encoding and setting up remote logging.\n To use the dispatcher, you need to inject the concrete adapter the dispatcher should send the prepared requests to.",
        "fields": [
            {
                "desc": " This class dispatches Virtual Schema requests to a Virtual Schema adapter.\n It is independent of the use case of the VS adapter and offers functionality that each Virtual Schema needs, like\n JSON decoding and encoding and setting up remote logging.\n To use the dispatcher, you need to inject the concrete adapter the dispatcher should send the prepared requests to.",
                "extends": {
                    "finish": 80045,
                    "start": 80028,
                    "type": "getlocal",
                    "view": "RequestDispatcher"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 80025,
                "name": "__index",
                "rawdesc": " This class dispatches Virtual Schema requests to a Virtual Schema adapter.\n It is independent of the use case of the VS adapter and offers functionality that each Virtual Schema needs, like\n JSON decoding and encoding and setting up remote logging.\n To use the dispatcher, you need to inject the concrete adapter the dispatcher should send the prepared requests to.",
                "start": 80000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " This class implements an abstract base adapter with common behavior for some of the request callback functions.\n\n When you derive a concrete adapter from this base class, we recommend keeping it stateless. This makes\n parallelization easier, reduces complexity and saves you the trouble of cleaning up in the drop-virtual-schema\n request.\n\n [impl -> dsn~lua-virtual-schema-adapter-abstraction~0]\n",
                "extends": {
                    "finish": 50047,
                    "start": 50019,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50047,
                            "start": 50019,
                            "type": "doc.type.name",
                            "view": "AbstractVirtualSchemaAdapter"
                        }
                    ],
                    "view": "AbstractVirtualSchemaAdapter"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 50047,
                "name": "_adapter",
                "rawdesc": " This class implements an abstract base adapter with common behavior for some of the request callback functions.\n\n When you derive a concrete adapter from this base class, we recommend keeping it stateless. This makes\n parallelization easier, reduces complexity and saves you the trouble of cleaning up in the drop-virtual-schema\n request.\n\n [impl -> dsn~lua-virtual-schema-adapter-abstraction~0]\n",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " The \"set properties\" request contains the new properties in the `properties` element directly under the root element.",
                "extends": {
                    "args": [
                        {
                            "finish": 900008,
                            "name": "self",
                            "start": 900008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "finish": 900058,
                            "name": "request",
                            "start": 900051,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " The \"set properties\" request contains the new properties in the `properties` element directly under the root element.",
                    "finish": 930003,
                    "rawdesc": " The \"set properties\" request contains the new properties in the `properties` element directly under the root element.",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "AdapterProperties"
                        }
                    ],
                    "start": 900000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:_extract_new_properties(request: any)\n  -> AdapterProperties"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 900050,
                "name": "_extract_new_properties",
                "rawdesc": " The \"set properties\" request contains the new properties in the `properties` element directly under the root element.",
                "start": 900009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " [impl -> dsn~reading-user-defined-properties~0]",
                "extends": {
                    "args": [
                        {
                            "finish": 840008,
                            "name": "self",
                            "start": 840008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "finish": 840054,
                            "name": "request",
                            "start": 840047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " [impl -> dsn~reading-user-defined-properties~0]",
                    "finish": 870003,
                    "rawdesc": " [impl -> dsn~reading-user-defined-properties~0]",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "AdapterProperties"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:_extract_properties(request: any)\n  -> AdapterProperties"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 840046,
                "name": "_extract_properties",
                "rawdesc": " [impl -> dsn~reading-user-defined-properties~0]",
                "start": 840009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " [impl -> dsn~dispatching-push-down-requests~0]\n [impl -> dsn~dispatching-create-virtual-schema-requests~0]\n [impl -> dsn~dispatching-drop-virtual-schema-requests~0]\n [impl -> dsn~dispatching-refresh-requests~0]\n [impl -> dsn~dispatching-get-capabilities-requests~0]\n [impl -> dsn~dispatching-set-properties-requests~0]",
                "extends": {
                    "args": [
                        {
                            "finish": 410008,
                            "name": "self",
                            "start": 410008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "finish": 410050,
                            "name": "request",
                            "start": 410043,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 410062,
                            "name": "properties",
                            "start": 410052,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " [impl -> dsn~dispatching-push-down-requests~0]\n [impl -> dsn~dispatching-create-virtual-schema-requests~0]\n [impl -> dsn~dispatching-drop-virtual-schema-requests~0]\n [impl -> dsn~dispatching-refresh-requests~0]\n [impl -> dsn~dispatching-get-capabilities-requests~0]\n [impl -> dsn~dispatching-set-properties-requests~0]",
                    "finish": 630003,
                    "rawdesc": " [impl -> dsn~dispatching-push-down-requests~0]\n [impl -> dsn~dispatching-create-virtual-schema-requests~0]\n [impl -> dsn~dispatching-drop-virtual-schema-requests~0]\n [impl -> dsn~dispatching-refresh-requests~0]\n [impl -> dsn~dispatching-get-capabilities-requests~0]\n [impl -> dsn~dispatching-set-properties-requests~0]",
                    "start": 410000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:_handle_request(request: any, properties: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 410042,
                "name": "_handle_request",
                "rawdesc": " [impl -> dsn~dispatching-push-down-requests~0]\n [impl -> dsn~dispatching-create-virtual-schema-requests~0]\n [impl -> dsn~dispatching-drop-virtual-schema-requests~0]\n [impl -> dsn~dispatching-refresh-requests~0]\n [impl -> dsn~dispatching-get-capabilities-requests~0]\n [impl -> dsn~dispatching-set-properties-requests~0]",
                "start": 410009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "@*param* `adapter` — adapter that receives the dispatched requests\n\n@*param* `properties_reader` — properties reader",
                "extends": {
                    "args": [
                        {
                            "finish": 280008,
                            "name": "self",
                            "start": 280008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "desc": "adapter that receives the dispatched requests",
                            "finish": 280040,
                            "name": "adapter",
                            "rawdesc": "adapter that receives the dispatched requests",
                            "start": 280033,
                            "type": "local",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "properties reader",
                            "finish": 280059,
                            "name": "properties_reader",
                            "rawdesc": "properties reader",
                            "start": 280042,
                            "type": "local",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": "@*param* `adapter` — adapter that receives the dispatched requests\n\n@*param* `properties_reader` — properties reader",
                    "finish": 330003,
                    "start": 280000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:_init(adapter: AbstractVirtualSchemaAdapter, properties_reader: AdapterProperties)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 280032,
                "name": "_init",
                "start": 280009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950008,
                            "name": "self",
                            "start": 950008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "finish": 950051,
                            "name": "properties",
                            "start": 950041,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1040003,
                    "start": 950000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:_init_logging(properties: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 950040,
                "name": "_init_logging",
                "start": 950009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " This class abstracts access to the user-defined properties of the Virtual Schema.",
                "extends": {
                    "finish": 60046,
                    "start": 60029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 60046,
                            "start": 60029,
                            "type": "doc.type.name",
                            "view": "AdapterProperties"
                        }
                    ],
                    "view": "AdapterProperties"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 60046,
                "name": "_properties_reader",
                "rawdesc": " This class abstracts access to the user-defined properties of the Virtual Schema.",
                "start": 60010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "\n RLS adapter entry point.\n <p>\n This global function receives the request from the Exasol core database.\n </p>\n\n@*param* `request_as_json` — JSON-encoded adapter request\n\n\n@*return* `response` — JSON-encoded adapter response\n\n\n [impl -> dsn~translating-json-request-to-lua-tables~0]\n [impl -> dsn~translating-lua-tables-to-json-responses~0]",
                "extends": {
                    "args": [
                        {
                            "finish": 1180008,
                            "name": "self",
                            "start": 1180008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "desc": "JSON-encoded adapter request",
                            "finish": 1180055,
                            "name": "request_as_json",
                            "rawdesc": "JSON-encoded adapter request",
                            "start": 1180040,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\n RLS adapter entry point.\n <p>\n This global function receives the request from the Exasol core database.\n </p>\n\n@*param* `request_as_json` — JSON-encoded adapter request\n\n\n@*return* `response` — JSON-encoded adapter response\n\n\n [impl -> dsn~translating-json-request-to-lua-tables~0]\n [impl -> dsn~translating-lua-tables-to-json-responses~0]",
                    "finish": 1330003,
                    "rawdesc": "\n RLS adapter entry point.\n <p>\n This global function receives the request from the Exasol core database.\n </p>\n\n\n\n [impl -> dsn~translating-json-request-to-lua-tables~0]\n [impl -> dsn~translating-lua-tables-to-json-responses~0]",
                    "returns": [
                        {
                            "desc": "JSON-encoded adapter response",
                            "name": "response",
                            "rawdesc": "JSON-encoded adapter response",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1180000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:adapter_call(request_as_json: string)\n  -> response: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 1180039,
                "name": "adapter_call",
                "rawdesc": "\n RLS adapter entry point.\n <p>\n This global function receives the request from the Exasol core database.\n </p>\n\n\n\n [impl -> dsn~translating-json-request-to-lua-tables~0]\n [impl -> dsn~translating-lua-tables-to-json-responses~0]",
                "start": 1180009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new `RequestDispatcher`.\n\n@*param* `adapter` — adapter that receives the dispatched requests\n\n@*param* `properties_reader` — properties reader",
                "extends": {
                    "args": [
                        {
                            "finish": 190008,
                            "name": "self",
                            "start": 190008,
                            "type": "self",
                            "view": "RequestDispatcher"
                        },
                        {
                            "desc": "adapter that receives the dispatched requests",
                            "finish": 190038,
                            "name": "adapter",
                            "rawdesc": "adapter that receives the dispatched requests",
                            "start": 190031,
                            "type": "local",
                            "view": "AbstractVirtualSchemaAdapter"
                        },
                        {
                            "desc": "properties reader",
                            "finish": 190057,
                            "name": "properties_reader",
                            "rawdesc": "properties reader",
                            "start": 190040,
                            "type": "local",
                            "view": "AdapterProperties"
                        }
                    ],
                    "desc": " Create a new `RequestDispatcher`.\n\n@*param* `adapter` — adapter that receives the dispatched requests\n\n@*param* `properties_reader` — properties reader",
                    "finish": 240003,
                    "rawdesc": " Create a new `RequestDispatcher`.",
                    "returns": [
                        {
                            "name": "dispatcher_instance",
                            "type": "function.return",
                            "view": "RequestDispatcher"
                        }
                    ],
                    "start": 190000,
                    "type": "function",
                    "view": "(method) RequestDispatcher:new(adapter: AbstractVirtualSchemaAdapter, properties_reader: AdapterProperties)\n  -> dispatcher_instance: RequestDispatcher"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/RequestDispatcher.lua",
                "finish": 190030,
                "name": "new",
                "rawdesc": " Create a new `RequestDispatcher`.",
                "start": 190009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "RequestDispatcher",
        "rawdesc": " This class dispatches Virtual Schema requests to a Virtual Schema adapter.\n It is independent of the use case of the VS adapter and offers functionality that each Virtual Schema needs, like\n JSON decoding and encoding and setting up remote logging.\n To use the dispatcher, you need to inject the concrete adapter the dispatcher should send the prepared requests to.",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 10055,
                        "start": 10034,
                        "type": "doc.extends.name",
                        "view": "AbstractQueryAppender"
                    }
                ],
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 10055,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Appender for scalar functions in an SQL statement.",
        "fields": [
            {
                "desc": "Default configuration with double quotes for identifiers.",
                "extends": {
                    "finish": 100093,
                    "start": 100048,
                    "type": "table",
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 100045,
                "name": "DEFAULT_APPENDER_CONFIG",
                "rawdesc": "Default configuration with double quotes for identifiers.",
                "start": 100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Appender for scalar functions in an SQL statement.",
                "extends": {
                    "finish": 30055,
                    "start": 30033,
                    "type": "getlocal",
                    "view": "ScalarFunctionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 30030,
                "name": "__index",
                "rawdesc": " Appender for scalar functions in an SQL statement.",
                "start": 30000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Numeric functions",
                "extends": {
                    "finish": 820076,
                    "start": 820030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 820027,
                "name": "_abs",
                "rawdesc": " Numeric functions",
                "start": 820000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 830077,
                    "start": 830031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 830028,
                "name": "_acos",
                "start": 830000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 850038,
                            "name": "f",
                            "start": 850037,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 870003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_add(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 850036,
                "name": "_add",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Date / time functions",
                "extends": {
                    "finish": 1760081,
                    "start": 1760035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1760032,
                "name": "_add_days",
                "rawdesc": " Date / time functions",
                "start": 1760000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1770082,
                    "start": 1770036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1770033,
                "name": "_add_hours",
                "start": 1770000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1780084,
                    "start": 1780038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1780035,
                "name": "_add_minutes",
                "start": 1780000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1790083,
                    "start": 1790037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1790034,
                "name": "_add_months",
                "start": 1790000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1800084,
                    "start": 1800038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1800035,
                "name": "_add_seconds",
                "start": 1800000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1810082,
                    "start": 1810036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1810033,
                "name": "_add_weeks",
                "start": 1810000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1820082,
                    "start": 1820036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1820033,
                "name": "_add_years",
                "start": 1820000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "token to append",
                            "finish": 270044,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 270039,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                    "finish": 290003,
                    "rawdesc": " Append a token to the query.",
                    "start": 270000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 270038,
                "name": "_append",
                "rawdesc": " Append a token to the query.",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 330046,
                            "rawdesc": "to append",
                            "start": 330043,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                    "finish": 350003,
                    "rawdesc": " Append a list of tokens to the query.",
                    "start": 330000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 330042,
                "name": "_append_all",
                "rawdesc": " Append a list of tokens to the query.",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 640008,
                            "name": "self",
                            "start": 640008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 640064,
                            "name": "left",
                            "start": 640060,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        },
                        {
                            "finish": 640074,
                            "name": "operator",
                            "start": 640066,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 640081,
                            "name": "right",
                            "start": 640076,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "finish": 700003,
                    "start": 640000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_append_arithmetic_function(left: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4), operator: string, right: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 640059,
                "name": "_append_arithmetic_function",
                "start": 640009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 560063,
                            "name": "data_type",
                            "start": 560054,
                            "type": "local",
                            "view": "CharacterTypeDefinition"
                        }
                    ],
                    "finish": 650003,
                    "start": 560000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_character_type(data_type: CharacterTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 560053,
                "name": "_append_character_type",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": " luacheck: max line length 240",
                            "finish": 1240058,
                            "name": "data_type",
                            "rawdesc": " luacheck: max line length 240",
                            "start": 1240049,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "finish": 1460003,
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_data_type(data_type: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1240048,
                "name": "_append_data_type",
                "start": 1240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 470008,
                            "name": "self",
                            "start": 470008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 470069,
                            "name": "data_type",
                            "start": 470060,
                            "type": "local",
                            "view": "DecimalTypeDefinition"
                        }
                    ],
                    "finish": 530003,
                    "start": 470000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_decimal_type_details(data_type: DecimalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 470059,
                "name": "_append_decimal_type_details",
                "start": 470009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 440008,
                            "name": "self",
                            "start": 440008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 440061,
                            "name": "expression",
                            "start": 440051,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "finish": 470003,
                    "start": 440000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_append_expression(expression: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 440050,
                "name": "_append_expression",
                "start": 440009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500008,
                            "name": "self",
                            "start": 500008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 500072,
                            "name": "arguments",
                            "start": 500063,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                        }
                    ],
                    "finish": 590003,
                    "start": 500000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_append_function_argument_list(arguments: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[])"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 500062,
                "name": "_append_function_argument_list",
                "start": 500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 750008,
                            "name": "self",
                            "start": 750008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 750057,
                            "name": "data_type",
                            "start": 750048,
                            "type": "local",
                            "view": "GeometryTypeDefinition"
                        }
                    ],
                    "finish": 820003,
                    "start": 750000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_geometry(data_type: GeometryTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 750047,
                "name": "_append_geometry",
                "start": 750009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 1140057,
                            "name": "data_type",
                            "start": 1140048,
                            "type": "local",
                            "view": "HashtypeTypeDefinition"
                        }
                    ],
                    "finish": 1210003,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_hashtype(data_type: HashtypeTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1140047,
                "name": "_append_hashtype",
                "start": 1140009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                "extends": {
                    "args": [
                        {
                            "finish": 1580008,
                            "name": "self",
                            "start": 1580008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "identifier",
                            "finish": 1580060,
                            "name": "identifier",
                            "rawdesc": "identifier",
                            "start": 1580050,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                    "finish": 1630003,
                    "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                    "start": 1580000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_identifier(identifier: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1580049,
                "name": "_append_identifier",
                "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                "start": 1580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 850057,
                            "name": "data_type",
                            "start": 850048,
                            "type": "local",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "finish": 1110003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_interval(data_type: IntervalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 850047,
                "name": "_append_interval",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 720008,
                            "name": "self",
                            "start": 720008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 720078,
                            "name": "scalar_function",
                            "start": 720063,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 740003,
                    "start": 720000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_append_parameterless_function(scalar_function: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 720062,
                "name": "_append_parameterless_function",
                "start": 720009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 760008,
                            "name": "self",
                            "start": 760008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 760057,
                            "name": "f",
                            "start": 760056,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 790003,
                    "start": 760000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_append_simple_function(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 760055,
                "name": "_append_simple_function",
                "start": 760009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                "extends": {
                    "args": [
                        {
                            "finish": 1500008,
                            "name": "self",
                            "start": 1500008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "string literal",
                            "finish": 1500061,
                            "name": "literal",
                            "rawdesc": "string literal",
                            "start": 1500054,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                    "finish": 1540003,
                    "rawdesc": " Append a string literal and enclose it in single quotes",
                    "start": 1500000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_string_literal(literal: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1500053,
                "name": "_append_string_literal",
                "rawdesc": " Append a string literal and enclose it in single quotes",
                "start": 1500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680008,
                            "name": "self",
                            "start": 680008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 680058,
                            "name": "data_type",
                            "start": 680049,
                            "type": "local",
                            "view": "TimestampTypeDefinition"
                        }
                    ],
                    "finish": 720003,
                    "start": 680000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_timestamp(data_type: TimestampTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 680048,
                "name": "_append_timestamp",
                "start": 680009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "finish": 40041,
                    "start": 40027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40041,
                            "start": 40027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 40041,
                "name": "_appender_config",
                "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " String functions",
                "extends": {
                    "finish": 1410078,
                    "start": 1410032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1410029,
                "name": "_ascii",
                "rawdesc": " String functions",
                "start": 1410000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 890077,
                    "start": 890031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 890028,
                "name": "_asin",
                "start": 890000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 900077,
                    "start": 900031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 900028,
                "name": "_atan",
                "start": 900000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 910077,
                    "start": 910031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 910028,
                "name": "_atan",
                "start": 910000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 920078,
                    "start": 920032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 920029,
                "name": "_atan2",
                "start": 920000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Bitwise functions",
                "extends": {
                    "finish": 2760080,
                    "start": 2760034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2760031,
                "name": "_bit_and",
                "rawdesc": " Bitwise functions",
                "start": 2760000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2770082,
                    "start": 2770036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2770033,
                "name": "_bit_check",
                "start": 2770000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1420083,
                    "start": 1420037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1420034,
                "name": "_bit_length",
                "start": 1420000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2780084,
                    "start": 2780038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2780035,
                "name": "_bit_lrotate",
                "start": 2780000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2790083,
                    "start": 2790037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2790034,
                "name": "_bit_lshift",
                "start": 2790000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2800080,
                    "start": 2800034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2800031,
                "name": "_bit_not",
                "start": 2800000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2810079,
                    "start": 2810033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2810030,
                "name": "_bit_or",
                "start": 2810000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2820084,
                    "start": 2820038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2820035,
                "name": "_bit_rrotate",
                "start": 2820000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2830083,
                    "start": 2830037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2830034,
                "name": "_bit_rshift",
                "start": 2830000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2840080,
                    "start": 2840034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2840031,
                "name": "_bit_set",
                "start": 2840000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2850083,
                    "start": 2850037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2850034,
                "name": "_bit_to_num",
                "start": 2850000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2860080,
                    "start": 2860034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2860031,
                "name": "_bit_xor",
                "start": 2860000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Other functions",
                "extends": {
                    "args": [
                        {
                            "finish": 2980008,
                            "name": "self",
                            "start": 2980008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 2980039,
                            "name": "f",
                            "start": 2980038,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Other functions",
                    "finish": 3160003,
                    "rawdesc": " Other functions",
                    "start": 2980000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_case(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2980037,
                "name": "_case",
                "rawdesc": " Other functions",
                "start": 2980009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Conversion functions",
                "extends": {
                    "args": [
                        {
                            "finish": 2890008,
                            "name": "self",
                            "start": 2890008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 2890039,
                            "name": "f",
                            "start": 2890038,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": " Conversion functions",
                    "finish": 2950003,
                    "rawdesc": " Conversion functions",
                    "start": 2890000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_cast(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2890037,
                "name": "_cast",
                "rawdesc": " Conversion functions",
                "start": 2890009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 930077,
                    "start": 930031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 930028,
                "name": "_ceil",
                "start": 930000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1430076,
                    "start": 1430030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1430027,
                "name": "_chr",
                "start": 1430000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1440089,
                    "start": 1440043,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1440040,
                "name": "_cologne_phonetic",
                "start": 1440000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "position in the comma-separated list",
                            "finish": 400043,
                            "name": "index",
                            "rawdesc": "position in the comma-separated list",
                            "start": 400038,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                    "finish": 440003,
                    "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                    "start": 400000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_comma(index: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 400037,
                "name": "_comma",
                "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1450079,
                    "start": 1450033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1450030,
                "name": "_concat",
                "start": 1450000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1830083,
                    "start": 1830037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1830034,
                "name": "_convert_tz",
                "start": 1830000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 940076,
                    "start": 940030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 940027,
                "name": "_cos",
                "start": 940000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 950077,
                    "start": 950031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 950028,
                "name": "_cosh",
                "start": 950000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 960076,
                    "start": 960030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 960027,
                "name": "_cot",
                "start": 960000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1840092,
                    "start": 1840039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1840036,
                "name": "_current_date",
                "start": 1840000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3180094,
                    "start": 3180041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3180038,
                "name": "_current_schema",
                "start": 3180000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3190095,
                    "start": 3190042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3190039,
                "name": "_current_session",
                "start": 3190000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3200097,
                    "start": 3200044,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3200041,
                "name": "_current_statement",
                "start": 3200000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1850097,
                    "start": 1850044,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1850041,
                "name": "_current_timestamp",
                "start": 1850000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3210092,
                    "start": 3210039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3210036,
                "name": "_current_user",
                "start": 3210000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1860083,
                    "start": 1860037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1860034,
                "name": "_date_trunc",
                "start": 1860000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1870076,
                    "start": 1870030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1870027,
                "name": "_day",
                "start": 1870000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1880085,
                    "start": 1880039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1880036,
                "name": "_days_between",
                "start": 1880000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1890090,
                    "start": 1890037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1890034,
                "name": "_dbtimezone",
                "start": 1890000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 970080,
                    "start": 970034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 970031,
                "name": "_degrees",
                "start": 970000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 980076,
                    "start": 980030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 980027,
                "name": "_div",
                "start": 980000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1460077,
                    "start": 1460031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1460028,
                "name": "_dump",
                "start": 1460000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1470086,
                    "start": 1470040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1470037,
                "name": "_edit_distance",
                "start": 1470000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 990076,
                    "start": 990030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 990027,
                "name": "_exp",
                "start": 990000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1910008,
                            "name": "self",
                            "start": 1910008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 1910042,
                            "name": "f",
                            "start": 1910041,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1980003,
                    "start": 1910000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_extract(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1910040,
                "name": "_extract",
                "start": 1910009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1010008,
                            "name": "self",
                            "start": 1010008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 1010044,
                            "name": "f",
                            "start": 1010043,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1030003,
                    "start": 1010000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_float_div(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1010042,
                "name": "_float_div",
                "start": 1010009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1050078,
                    "start": 1050032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1050029,
                "name": "_floor",
                "start": 1050000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2000088,
                    "start": 2000042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2000039,
                "name": "_from_posix_time",
                "start": 2000000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3220081,
                    "start": 3220035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3220032,
                "name": "_greatest",
                "start": 3220000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3230081,
                    "start": 3230035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3230032,
                "name": "_hash_md5",
                "start": 3230000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3250082,
                    "start": 3250036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3250033,
                "name": "_hash_sha1",
                "start": 3250000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3270084,
                    "start": 3270038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3270035,
                "name": "_hash_sha256",
                "start": 3270000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3290084,
                    "start": 3290038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3290035,
                "name": "_hash_sha512",
                "start": 3290000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3310083,
                    "start": 3310037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3310034,
                "name": "_hash_tiger",
                "start": 3310000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3240085,
                    "start": 3240039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3240036,
                "name": "_hashtype_md5",
                "start": 3240000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3260086,
                    "start": 3260040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3260037,
                "name": "_hashtype_sha1",
                "start": 3260000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3280088,
                    "start": 3280042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3280039,
                "name": "_hashtype_sha256",
                "start": 3280000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3300088,
                    "start": 3300042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3300039,
                "name": "_hashtype_sha512",
                "start": 3300000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3320087,
                    "start": 3320041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3320038,
                "name": "_hashtype_tiger",
                "start": 3320000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2010077,
                    "start": 2010031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2010028,
                "name": "_hour",
                "start": 2010000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2020086,
                    "start": 2020040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2020037,
                "name": "_hours_between",
                "start": 2020000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "@*param* `out_query` — query to which the function will be appended",
                "extends": {
                    "args": [
                        {
                            "finish": 220008,
                            "name": "self",
                            "start": 220008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "desc": "query to which the function will be appended",
                            "finish": 220047,
                            "name": "out_query",
                            "rawdesc": "query to which the function will be appended",
                            "start": 220038,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 220064,
                            "name": "appender_config",
                            "start": 220049,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": "@*param* `out_query` — query to which the function will be appended",
                    "finish": 240003,
                    "start": 220000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_init(out_query: Query, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 220037,
                "name": "_init",
                "start": 220009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1480080,
                    "start": 1480034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1480031,
                "name": "_initcap",
                "start": 1480000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1490079,
                    "start": 1490033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1490030,
                "name": "_insert",
                "start": 1490000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1500078,
                    "start": 1500032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1500029,
                "name": "_instr",
                "start": 1500000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3330083,
                    "start": 3330037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3330034,
                "name": "_is_boolean",
                "start": 3330000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3340080,
                    "start": 3340034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3340031,
                "name": "_is_date",
                "start": 3340000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3350086,
                    "start": 3350040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3350037,
                "name": "_is_dsinterval",
                "start": 3350000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3360082,
                    "start": 3360036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3360033,
                "name": "_is_number",
                "start": 3360000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3370085,
                    "start": 3370039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3370036,
                "name": "_is_timestamp",
                "start": 3370000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3380086,
                    "start": 3380040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3380037,
                "name": "_is_yminterval",
                "start": 3380000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3400008,
                            "name": "self",
                            "start": 3400008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 3400045,
                            "name": "f",
                            "start": 3400044,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 3630003,
                    "start": 3400000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_json_value(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3400043,
                "name": "_json_value",
                "start": 3400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3650078,
                    "start": 3650032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3650029,
                "name": "_least",
                "start": 3650000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1510077,
                    "start": 1510031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1510028,
                "name": "_left",
                "start": 1510000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1520079,
                    "start": 1520033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1520030,
                "name": "_length",
                "start": 1520000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1060075,
                    "start": 1060029,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1060026,
                "name": "_ln",
                "start": 1060000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2030094,
                    "start": 2030041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2030038,
                "name": "_localtimestamp",
                "start": 2030000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1530079,
                    "start": 1530033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1530030,
                "name": "_locate",
                "start": 1530000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1070076,
                    "start": 1070030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1070027,
                "name": "_log",
                "start": 1070000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1540078,
                    "start": 1540032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1540029,
                "name": "_lower",
                "start": 1540000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1550077,
                    "start": 1550031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1550028,
                "name": "_lpad",
                "start": 1550000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1560078,
                    "start": 1560032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1560029,
                "name": "_ltrim",
                "start": 1560000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1080082,
                    "start": 1080036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1080033,
                "name": "_min_scale",
                "start": 1080000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2040079,
                    "start": 2040033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2040030,
                "name": "_minute",
                "start": 2040000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2050088,
                    "start": 2050042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2050039,
                "name": "_minutes_between",
                "start": 2050000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1090076,
                    "start": 1090030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1090027,
                "name": "_mod",
                "start": 1090000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2060078,
                    "start": 2060032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2060029,
                "name": "_month",
                "start": 2060000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2070087,
                    "start": 2070041,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2070038,
                "name": "_months_between",
                "start": 2070000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1110008,
                            "name": "self",
                            "start": 1110008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 1110039,
                            "name": "f",
                            "start": 1110038,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1130003,
                    "start": 1110000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_mult(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1110037,
                "name": "_mult",
                "start": 1110009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1150008,
                            "name": "self",
                            "start": 1150008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 1150038,
                            "name": "f",
                            "start": 1150037,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1180003,
                    "start": 1150000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_neg(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1150036,
                "name": "_neg",
                "start": 1150009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3660083,
                    "start": 3660037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3660034,
                "name": "_nullifzero",
                "start": 3660000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2080088,
                    "start": 2080042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2080039,
                "name": "_numtodsinterval",
                "start": 2080000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2090088,
                    "start": 2090042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2090039,
                "name": "_numtoyminterval",
                "start": 2090000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1570085,
                    "start": 1570039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1570036,
                "name": "_octet_length",
                "start": 1570000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "query object that the appender appends to",
                "extends": {
                    "finish": 30026,
                    "start": 30021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30026,
                            "start": 30021,
                            "type": "doc.type.name",
                            "view": "Query"
                        }
                    ],
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 30026,
                "name": "_out_query",
                "rawdesc": "query object that the appender appends to",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1200075,
                    "start": 1200029,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1200026,
                "name": "_pi",
                "start": 1200000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2100083,
                    "start": 2100037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2100034,
                "name": "_posix_time",
                "start": 2100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1210078,
                    "start": 1210032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1210029,
                "name": "_power",
                "start": 1210000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1220080,
                    "start": 1220034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1220031,
                "name": "_radians",
                "start": 1220000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1230077,
                    "start": 1230031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1230028,
                "name": "_rand",
                "start": 1230000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1580085,
                    "start": 1580039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1580036,
                "name": "_regexp_instr",
                "start": 1580000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1590086,
                    "start": 1590040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1590037,
                "name": "_regexp_substr",
                "start": 1590000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1600079,
                    "start": 1600033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1600030,
                "name": "_repeat",
                "start": 1600000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1610080,
                    "start": 1610034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1610031,
                "name": "_replace",
                "start": 1610000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1620080,
                    "start": 1620034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1620031,
                "name": "_reverse",
                "start": 1620000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1630078,
                    "start": 1630032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1630029,
                "name": "_right",
                "start": 1630000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1240078,
                    "start": 1240032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1240029,
                "name": "_round",
                "start": 1240000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1640077,
                    "start": 1640031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1640028,
                "name": "_rpad",
                "start": 1640000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1650078,
                    "start": 1650032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1650029,
                "name": "_rtrim",
                "start": 1650000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2110079,
                    "start": 2110033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2110030,
                "name": "_second",
                "start": 2110000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2120088,
                    "start": 2120042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2120039,
                "name": "_seconds_between",
                "start": 2120000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3670090,
                    "start": 3670044,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3670041,
                "name": "_session_parameter",
                "start": 3670000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2130095,
                    "start": 2130042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2130039,
                "name": "_sessiontimezone",
                "start": 2130000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1250077,
                    "start": 1250031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1250028,
                "name": "_sign",
                "start": 1250000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1260076,
                    "start": 1260030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1260027,
                "name": "_sin",
                "start": 1260000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1270077,
                    "start": 1270031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1270028,
                "name": "_sinh",
                "start": 1270000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1660080,
                    "start": 1660034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1660031,
                "name": "_soundex",
                "start": 1660000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1670078,
                    "start": 1670032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1670029,
                "name": "_space",
                "start": 1670000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1280077,
                    "start": 1280031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1280028,
                "name": "_sqrt",
                "start": 1280000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Polygon functions",
                "extends": {
                    "finish": 2390080,
                    "start": 2390034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2390031,
                "name": "_st_area",
                "rawdesc": " Polygon functions",
                "start": 2390000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " General geospatial functions",
                "extends": {
                    "finish": 2490084,
                    "start": 2490038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2490035,
                "name": "_st_boundary",
                "rawdesc": " General geospatial functions",
                "start": 2490000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2500082,
                    "start": 2500036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2500033,
                "name": "_st_buffer",
                "start": 2500000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2510084,
                    "start": 2510038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2510035,
                "name": "_st_centroid",
                "start": 2510000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2520084,
                    "start": 2520038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2520035,
                "name": "_st_contains",
                "start": 2520000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2530086,
                    "start": 2530040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2530037,
                "name": "_st_convexhull",
                "start": 2530000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2540083,
                    "start": 2540037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2540034,
                "name": "_st_crosses",
                "start": 2540000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2550086,
                    "start": 2550040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2550037,
                "name": "_st_difference",
                "start": 2550000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2560085,
                    "start": 2560039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2560036,
                "name": "_st_dimension",
                "start": 2560000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2570084,
                    "start": 2570038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2570035,
                "name": "_st_disjoint",
                "start": 2570000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2580084,
                    "start": 2580038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2580035,
                "name": "_st_distance",
                "start": 2580000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Linestring functions",
                "extends": {
                    "finish": 2300084,
                    "start": 2300038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2300035,
                "name": "_st_endpoint",
                "rawdesc": " Linestring functions",
                "start": 2300000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2590084,
                    "start": 2590038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2590035,
                "name": "_st_envelope",
                "start": 2590000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2600082,
                    "start": 2600036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2600033,
                "name": "_st_equals",
                "start": 2600000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2400088,
                    "start": 2400042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2400039,
                "name": "_st_exteriorring",
                "start": 2400000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2610083,
                    "start": 2610037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2610034,
                "name": "_st_force2d",
                "start": 2610000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Geometry collection functions",
                "extends": {
                    "finish": 2450085,
                    "start": 2450039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2450036,
                "name": "_st_geometryn",
                "rawdesc": " Geometry collection functions",
                "start": 2450000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2620088,
                    "start": 2620042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2620039,
                "name": "_st_geometrytype",
                "start": 2620000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2410089,
                    "start": 2410043,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2410040,
                "name": "_st_interiorringn",
                "start": 2410000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2630088,
                    "start": 2630042,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2630039,
                "name": "_st_intersection",
                "start": 2630000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2640086,
                    "start": 2640040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2640037,
                "name": "_st_intersects",
                "start": 2640000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2310084,
                    "start": 2310038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2310035,
                "name": "_st_isclosed",
                "start": 2310000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2650083,
                    "start": 2650037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2650034,
                "name": "_st_isempty",
                "start": 2650000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2320082,
                    "start": 2320036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2320033,
                "name": "_st_isring",
                "start": 2320000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2660084,
                    "start": 2660038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2660035,
                "name": "_st_issimple",
                "start": 2660000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2330082,
                    "start": 2330036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2330033,
                "name": "_st_length",
                "start": 2330000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2460089,
                    "start": 2460043,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2460040,
                "name": "_st_numgeometries",
                "start": 2460000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2420092,
                    "start": 2420046,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2420043,
                "name": "_st_numinteriorrings",
                "start": 2420000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2340085,
                    "start": 2340039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2340036,
                "name": "_st_numpoints",
                "start": 2340000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2670084,
                    "start": 2670038,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2670035,
                "name": "_st_overlaps",
                "start": 2670000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2350082,
                    "start": 2350036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2350033,
                "name": "_st_pointn",
                "start": 2350000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2680083,
                    "start": 2680037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2680034,
                "name": "_st_setsrid",
                "start": 2680000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2360086,
                    "start": 2360040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2360037,
                "name": "_st_startpoint",
                "start": 2360000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2690089,
                    "start": 2690043,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2690040,
                "name": "_st_symdifference",
                "start": 2690000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2700083,
                    "start": 2700037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2700034,
                "name": "_st_touches",
                "start": 2700000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2710085,
                    "start": 2710039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2710036,
                "name": "_st_transform",
                "start": 2710000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2720081,
                    "start": 2720035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2720032,
                "name": "_st_union",
                "start": 2720000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2730082,
                    "start": 2730036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2730033,
                "name": "_st_within",
                "start": 2730000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Geospatial functions\n Point functions",
                "extends": {
                    "finish": 2260077,
                    "start": 2260031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2260028,
                "name": "_st_x",
                "rawdesc": " Geospatial functions\n Point functions",
                "start": 2260000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2270077,
                    "start": 2270031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2270028,
                "name": "_st_y",
                "start": 2270000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1300008,
                            "name": "self",
                            "start": 1300008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "finish": 1300038,
                            "name": "f",
                            "start": 1300037,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "finish": 1320003,
                    "start": 1300000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:_sub(f: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1300036,
                "name": "_sub",
                "start": 1300009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1680079,
                    "start": 1680033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1680030,
                "name": "_substr",
                "start": 1680000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3680081,
                    "start": 3680035,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3680032,
                "name": "_sys_guid",
                "start": 3680000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2140087,
                    "start": 2140034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2140031,
                "name": "_sysdate",
                "start": 2140000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2150092,
                    "start": 2150039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2150036,
                "name": "_systimestamp",
                "start": 2150000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1340076,
                    "start": 1340030,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1340027,
                "name": "_tan",
                "start": 1340000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1350077,
                    "start": 1350031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1350028,
                "name": "_tanh",
                "start": 1350000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1360080,
                    "start": 1360034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1360031,
                "name": "_to_char",
                "start": 1360000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2160080,
                    "start": 2160034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2160031,
                "name": "_to_date",
                "start": 2160000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2170086,
                    "start": 2170040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2170037,
                "name": "_to_dsinterval",
                "start": 2170000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1370082,
                    "start": 1370036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1370033,
                "name": "_to_number",
                "start": 1370000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2180085,
                    "start": 2180039,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2180036,
                "name": "_to_timestamp",
                "start": 2180000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2190086,
                    "start": 2190040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2190037,
                "name": "_to_yminterval",
                "start": 2190000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1690082,
                    "start": 1690036,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1690033,
                "name": "_translate",
                "start": 1690000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1700077,
                    "start": 1700031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1700028,
                "name": "_trim",
                "start": 1700000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1380078,
                    "start": 1380032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1380029,
                "name": "_trunc",
                "start": 1380000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3690079,
                    "start": 3690033,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3690030,
                "name": "_typeof",
                "start": 3690000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1710080,
                    "start": 1710034,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1710031,
                "name": "_unicode",
                "start": 1710000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1720083,
                    "start": 1720037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1720034,
                "name": "_unicodechr",
                "start": 1720000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 1730078,
                    "start": 1730032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 1730029,
                "name": "_upper",
                "start": 1730000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2200077,
                    "start": 2200031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2200028,
                "name": "_week",
                "start": 2200000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2210077,
                    "start": 2210031,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2210028,
                "name": "_year",
                "start": 2210000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 2220086,
                    "start": 2220040,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 2220037,
                "name": "_years_between",
                "start": 2220000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 3700083,
                    "start": 3700037,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 3700034,
                "name": "_zeroifnull",
                "start": 3700000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Alias for main appender function for uniform appender invocation",
                "extends": {
                    "finish": 410077,
                    "start": 410032,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 410029,
                "name": "append",
                "rawdesc": " Alias for main appender function for uniform appender invocation",
                "start": 410000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a scalar function to an SQL query.\n\n@*param* `scalar_function` — function to append",
                "extends": {
                    "args": [
                        {
                            "finish": 280008,
                            "name": "self",
                            "start": 280008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "desc": "function to append",
                            "finish": 280070,
                            "name": "scalar_function",
                            "rawdesc": "function to append",
                            "start": 280055,
                            "type": "local",
                            "view": "ScalarFunctionExpression"
                        }
                    ],
                    "desc": " Append a scalar function to an SQL query.\n\n@*param* `scalar_function` — function to append",
                    "finish": 380003,
                    "rawdesc": " Append a scalar function to an SQL query.",
                    "start": 280000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:append_scalar_function(scalar_function: ScalarFunctionExpression)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 280054,
                "name": "append_scalar_function",
                "rawdesc": " Append a scalar function to an SQL query.",
                "start": 280009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Create a new instance of a `ScalarFunctionAppender`.\n\n@*param* `out_query` — query to which the function will be appended\n\n@*return* `renderer` — for scalar functions",
                "extends": {
                    "args": [
                        {
                            "finish": 140008,
                            "name": "self",
                            "start": 140008,
                            "type": "self",
                            "view": "ScalarFunctionAppender"
                        },
                        {
                            "desc": "query to which the function will be appended",
                            "finish": 140045,
                            "name": "out_query",
                            "rawdesc": "query to which the function will be appended",
                            "start": 140036,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 140062,
                            "name": "appender_config",
                            "start": 140047,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": " Create a new instance of a `ScalarFunctionAppender`.\n\n@*param* `out_query` — query to which the function will be appended\n\n@*return* `renderer` — for scalar functions",
                    "finish": 180003,
                    "rawdesc": " Create a new instance of a `ScalarFunctionAppender`.",
                    "returns": [
                        {
                            "desc": "for scalar functions",
                            "name": "renderer",
                            "rawdesc": "for scalar functions",
                            "type": "function.return",
                            "view": "ScalarFunctionAppender"
                        }
                    ],
                    "start": 140000,
                    "type": "function",
                    "view": "(method) ScalarFunctionAppender:new(out_query: Query, appender_config: AppenderConfig)\n  -> renderer: ScalarFunctionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/ScalarFunctionAppender.lua",
                "finish": 140035,
                "name": "new",
                "rawdesc": " Create a new instance of a `ScalarFunctionAppender`.",
                "start": 140009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "ScalarFunctionAppender",
        "rawdesc": " Appender for scalar functions in an SQL statement.",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 460034,
                "start": 460010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 470021,
                    "start": 470015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 470021,
                            "start": 470015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 470021,
                "name": "name",
                "start": 470010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "ScalarFunctionExpression",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 230028,
                "start": 230010,
                "type": "doc.class"
            }
        ],
        "desc": "Schema metadata info in requests",
        "fields": [
            {
                "extends": {
                    "finish": 250030,
                    "start": 250023,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 250029,
                            "start": 250023,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 250030,
                "name": "adapterNotes",
                "start": 250010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "virtual schema name",
                "extends": {
                    "finish": 240021,
                    "start": 240015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 240021,
                            "start": 240015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 240021,
                "name": "name",
                "rawdesc": "virtual schema name",
                "start": 240010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 260042,
                    "start": 260021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 260042,
                            "start": 260021,
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_request.lua",
                "finish": 260042,
                "name": "properties",
                "start": 260010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "SchemaMetadataInfo",
        "rawdesc": "Schema metadata info in requests",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 10047,
                        "start": 10026,
                        "type": "doc.extends.name",
                        "view": "AbstractQueryAppender"
                    }
                ],
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 10047,
                "start": 10010,
                "type": "doc.class"
            }
        ],
        "desc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
        "fields": [
            {
                "desc": "Default configuration with double quotes for identifiers.",
                "extends": {
                    "finish": 100093,
                    "start": 100048,
                    "type": "table",
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 100045,
                "name": "DEFAULT_APPENDER_CONFIG",
                "rawdesc": "Default configuration with double quotes for identifiers.",
                "start": 100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
                "extends": {
                    "finish": 30039,
                    "start": 30025,
                    "type": "getlocal",
                    "view": "SelectAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 30022,
                "name": "__index",
                "rawdesc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
                "start": 30000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                "extends": {
                    "args": [
                        {
                            "finish": 270008,
                            "name": "self",
                            "start": 270008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "token to append",
                            "finish": 270044,
                            "name": "token",
                            "rawdesc": "token to append",
                            "start": 270039,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a token to the query.\n\n@*param* `token` — token to append",
                    "finish": 290003,
                    "rawdesc": " Append a token to the query.",
                    "start": 270000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append(token: string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 270038,
                "name": "_append",
                "rawdesc": " Append a token to the query.",
                "start": 270009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                "extends": {
                    "args": [
                        {
                            "finish": 330008,
                            "name": "self",
                            "start": 330008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "to append",
                            "finish": 330046,
                            "rawdesc": "to append",
                            "start": 330043,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": " Append a list of tokens to the query.\n\n@*param* `...` — to append",
                    "finish": 350003,
                    "rawdesc": " Append a list of tokens to the query.",
                    "start": 330000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_all(...string|number)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 330042,
                "name": "_append_all",
                "rawdesc": " Append a list of tokens to the query.",
                "start": 330009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560008,
                            "name": "self",
                            "start": 560008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 560063,
                            "name": "data_type",
                            "start": 560054,
                            "type": "local",
                            "view": "CharacterTypeDefinition"
                        }
                    ],
                    "finish": 650003,
                    "start": 560000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_character_type(data_type: CharacterTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 560053,
                "name": "_append_character_type",
                "start": 560009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240008,
                            "name": "self",
                            "start": 1240008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": " luacheck: max line length 240",
                            "finish": 1240058,
                            "name": "data_type",
                            "rawdesc": " luacheck: max line length 240",
                            "start": 1240049,
                            "type": "local",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)"
                        }
                    ],
                    "finish": 1460003,
                    "start": 1240000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_data_type(data_type: BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1240048,
                "name": "_append_data_type",
                "start": 1240009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 470008,
                            "name": "self",
                            "start": 470008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 470069,
                            "name": "data_type",
                            "start": 470060,
                            "type": "local",
                            "view": "DecimalTypeDefinition"
                        }
                    ],
                    "finish": 530003,
                    "start": 470000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_decimal_type_details(data_type: DecimalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 470059,
                "name": "_append_decimal_type_details",
                "start": 470009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120008,
                            "name": "self",
                            "start": 1120008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 1120053,
                            "name": "expression",
                            "start": 1120043,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)"
                        }
                    ],
                    "finish": 1140003,
                    "start": 1120000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_expression(expression: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1120042,
                "name": "_append_expression",
                "start": 1120009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1170008,
                            "name": "self",
                            "start": 1170008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "desc": " luacheck: max line length 180",
                            "finish": 1170045,
                            "name": "filter",
                            "rawdesc": " luacheck: max line length 180",
                            "start": 1170039,
                            "type": "local",
                            "view": "BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4)"
                        }
                    ],
                    "finish": 1220003,
                    "start": 1170000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_filter(filter: BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4))"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1170038,
                "name": "_append_filter",
                "start": 1170009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 900008,
                            "name": "self",
                            "start": 900008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 900041,
                            "name": "from",
                            "start": 900037,
                            "type": "local",
                            "view": "JoinExpression|TableExpression"
                        }
                    ],
                    "finish": 1040003,
                    "start": 900000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_from(from: JoinExpression|TableExpression)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 900036,
                "name": "_append_from",
                "start": 900009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 750008,
                            "name": "self",
                            "start": 750008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 750057,
                            "name": "data_type",
                            "start": 750048,
                            "type": "local",
                            "view": "GeometryTypeDefinition"
                        }
                    ],
                    "finish": 820003,
                    "start": 750000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_geometry(data_type: GeometryTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 750047,
                "name": "_append_geometry",
                "start": 750009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1450008,
                            "name": "self",
                            "start": 1450008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 1450046,
                            "name": "group",
                            "start": 1450041,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]?"
                        }
                    ],
                    "finish": 1530003,
                    "start": 1450000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_group_by(group?: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[])"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1450040,
                "name": "_append_group_by",
                "start": 1450009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1140008,
                            "name": "self",
                            "start": 1140008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 1140057,
                            "name": "data_type",
                            "start": 1140048,
                            "type": "local",
                            "view": "HashtypeTypeDefinition"
                        }
                    ],
                    "finish": 1210003,
                    "start": 1140000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_hashtype(data_type: HashtypeTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1140047,
                "name": "_append_hashtype",
                "start": 1140009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                "extends": {
                    "args": [
                        {
                            "finish": 1580008,
                            "name": "self",
                            "start": 1580008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "identifier",
                            "finish": 1580060,
                            "name": "identifier",
                            "rawdesc": "identifier",
                            "start": 1580050,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Append a quoted identifier, e.g. a schema, table or column name.\n\n@*param* `identifier` — identifier",
                    "finish": 1630003,
                    "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                    "start": 1580000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_identifier(identifier: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1580049,
                "name": "_append_identifier",
                "rawdesc": "Append a quoted identifier, e.g. a schema, table or column name.",
                "start": 1580009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 850008,
                            "name": "self",
                            "start": 850008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 850057,
                            "name": "data_type",
                            "start": 850048,
                            "type": "local",
                            "view": "IntervalTypeDefinition"
                        }
                    ],
                    "finish": 1110003,
                    "start": 850000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_interval(data_type: IntervalTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 850047,
                "name": "_append_interval",
                "start": 850009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 720008,
                            "name": "self",
                            "start": 720008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 720041,
                            "name": "join",
                            "start": 720037,
                            "type": "local",
                            "view": "JoinExpression"
                        }
                    ],
                    "finish": 870003,
                    "start": 720000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_join(join: JoinExpression)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 720036,
                "name": "_append_join",
                "start": 720009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1770008,
                            "name": "self",
                            "start": 1770008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 1770043,
                            "name": "limit",
                            "start": 1770038,
                            "type": "local",
                            "view": "LimitClause"
                        }
                    ],
                    "finish": 1860003,
                    "start": 1770000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_limit(limit: LimitClause)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1770037,
                "name": "_append_limit",
                "start": 1770009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1570008,
                            "name": "self",
                            "start": 1570008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 1570046,
                            "name": "order",
                            "start": 1570041,
                            "type": "local",
                            "view": "OrderByClause[]?"
                        },
                        {
                            "finish": 1570062,
                            "name": "in_parenthesis",
                            "start": 1570048,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "finish": 1740003,
                    "start": 1570000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_order_by(order?: OrderByClause[], in_parenthesis?: boolean)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1570040,
                "name": "_append_order_by",
                "start": 1570009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500008,
                            "name": "self",
                            "start": 500008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 500055,
                            "name": "select_list",
                            "start": 500044,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]?"
                        }
                    ],
                    "finish": 560003,
                    "start": 500000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_select_list(select_list?: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[])"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 500043,
                "name": "_append_select_list",
                "start": 500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 410008,
                            "name": "self",
                            "start": 410008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 410064,
                            "name": "select_list",
                            "start": 410053,
                            "type": "local",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                        }
                    ],
                    "finish": 470003,
                    "start": 410000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_select_list_elements(select_list: ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[])"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 410052,
                "name": "_append_select_list_elements",
                "start": 410009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                "extends": {
                    "args": [
                        {
                            "finish": 1500008,
                            "name": "self",
                            "start": 1500008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "string literal",
                            "finish": 1500061,
                            "name": "literal",
                            "rawdesc": "string literal",
                            "start": 1500054,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": " Append a string literal and enclose it in single quotes\n\n@*param* `literal` — string literal",
                    "finish": 1540003,
                    "rawdesc": " Append a string literal and enclose it in single quotes",
                    "start": 1500000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_string_literal(literal: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 1500053,
                "name": "_append_string_literal",
                "rawdesc": " Append a string literal and enclose it in single quotes",
                "start": 1500009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 590008,
                            "name": "self",
                            "start": 590008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "finish": 590043,
                            "name": "table",
                            "start": 590038,
                            "type": "local",
                            "view": "TableExpression"
                        }
                    ],
                    "finish": 690003,
                    "start": 590000,
                    "type": "function",
                    "view": "(method) SelectAppender:_append_table(table: TableExpression)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 590037,
                "name": "_append_table",
                "start": 590009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680008,
                            "name": "self",
                            "start": 680008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "finish": 680058,
                            "name": "data_type",
                            "start": 680049,
                            "type": "local",
                            "view": "TimestampTypeDefinition"
                        }
                    ],
                    "finish": 720003,
                    "start": 680000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_append_timestamp(data_type: TimestampTypeDefinition)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 680048,
                "name": "_append_timestamp",
                "start": 680009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "extends": {
                    "finish": 40041,
                    "start": 40027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40041,
                            "start": 40027,
                            "type": "doc.type.name",
                            "view": "AppenderConfig"
                        }
                    ],
                    "view": "AppenderConfig"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 40041,
                "name": "_appender_config",
                "rawdesc": "configuration for the query renderer (e.g. containing identifier quoting)",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                "extends": {
                    "args": [
                        {
                            "finish": 400008,
                            "name": "self",
                            "start": 400008,
                            "type": "self",
                            "view": "AbstractQueryAppender"
                        },
                        {
                            "desc": "position in the comma-separated list",
                            "finish": 400043,
                            "name": "index",
                            "rawdesc": "position in the comma-separated list",
                            "start": 400038,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.\n\n@*param* `index` — position in the comma-separated list",
                    "finish": 440003,
                    "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                    "start": 400000,
                    "type": "function",
                    "view": "(method) AbstractQueryAppender:_comma(index: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 400037,
                "name": "_comma",
                "rawdesc": "Append a comma in a comma-separated list where needed.\nAppends a comma if the list index is greater than one.",
                "start": 400009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1070008,
                            "name": "self",
                            "start": 1070008,
                            "type": "self",
                            "view": "SelectAppender"
                        }
                    ],
                    "finish": 1090003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "ExpressionAppender"
                        }
                    ],
                    "start": 1070000,
                    "type": "function",
                    "view": "(method) SelectAppender:_expression_appender()\n  -> ExpressionAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1070044,
                "name": "_expression_appender",
                "start": 1070009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 360008,
                            "name": "self",
                            "start": 360008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "desc": " This class implements an abstraction for a query string including its tokens.",
                            "finish": 360039,
                            "name": "out_query",
                            "rawdesc": " This class implements an abstraction for a query string including its tokens.",
                            "start": 360030,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 360056,
                            "name": "appender_config",
                            "start": 360041,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "finish": 380003,
                    "start": 360000,
                    "type": "function",
                    "view": "(method) SelectAppender:_init(out_query: Query, appender_config: AppenderConfig)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 360029,
                "name": "_init",
                "start": 360009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "query object that the appender appends to",
                "extends": {
                    "finish": 30026,
                    "start": 30021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 30026,
                            "start": 30021,
                            "type": "doc.type.name",
                            "view": "Query"
                        }
                    ],
                    "view": "Query"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/AbstractQueryAppender.lua",
                "finish": 30026,
                "name": "_out_query",
                "rawdesc": "query object that the appender appends to",
                "start": 30010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " Alias for the main entry point allows uniform appender invocation",
                "extends": {
                    "finish": 2100052,
                    "start": 2100024,
                    "type": "getfield",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 2100021,
                "name": "append",
                "rawdesc": " Alias for the main entry point allows uniform appender invocation",
                "start": 2100000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Append a `SELECT` statement.\n\n@*param* `sub_query` — query appended",
                "extends": {
                    "args": [
                        {
                            "finish": 1990008,
                            "name": "self",
                            "start": 1990008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "desc": "query appended",
                            "finish": 1990047,
                            "name": "sub_query",
                            "rawdesc": "query appended",
                            "start": 1990038,
                            "type": "local",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "desc": " Append a `SELECT` statement.\n\n@*param* `sub_query` — query appended",
                    "finish": 2070003,
                    "rawdesc": " Append a `SELECT` statement.",
                    "start": 1990000,
                    "type": "function",
                    "view": "(method) SelectAppender:append_select(sub_query: SelectSqlStatement)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1990037,
                "name": "append_select",
                "rawdesc": " Append a `SELECT` statement.",
                "start": 1990009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Append a sub-select statement.\n This method is public to allow recursive queries (e.g. embedded into an `EXISTS` clause in an expression.\n\n@*param* `sub_query` — query appended",
                "extends": {
                    "args": [
                        {
                            "finish": 1910008,
                            "name": "self",
                            "start": 1910008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "desc": "query appended",
                            "finish": 1910051,
                            "name": "sub_query",
                            "rawdesc": "query appended",
                            "start": 1910042,
                            "type": "local",
                            "view": "SelectSqlStatement"
                        }
                    ],
                    "desc": " Append a sub-select statement.\n This method is public to allow recursive queries (e.g. embedded into an `EXISTS` clause in an expression.\n\n@*param* `sub_query` — query appended",
                    "finish": 1950003,
                    "rawdesc": " Append a sub-select statement.\n This method is public to allow recursive queries (e.g. embedded into an `EXISTS` clause in an expression.",
                    "start": 1910000,
                    "type": "function",
                    "view": "(method) SelectAppender:append_sub_select(sub_query: SelectSqlStatement)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 1910041,
                "name": "append_sub_select",
                "rawdesc": " Append a sub-select statement.\n This method is public to allow recursive queries (e.g. embedded into an `EXISTS` clause in an expression.",
                "start": 1910009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": " Get a map of supported JOIN type to the join keyword.\n\n@*return* `join` — type (key) mapped to SQL join keyword",
                "extends": {
                    "args": [],
                    "desc": " Get a map of supported JOIN type to the join keyword.\n\n@*return* `join` — type (key) mapped to SQL join keyword",
                    "finish": 220003,
                    "rawdesc": " Get a map of supported JOIN type to the join keyword.",
                    "returns": [
                        {
                            "desc": "type (key) mapped to SQL join keyword",
                            "name": "join",
                            "rawdesc": "type (key) mapped to SQL join keyword",
                            "type": "function.return",
                            "view": "table<string, string>"
                        }
                    ],
                    "start": 200000,
                    "type": "function",
                    "view": "function SelectAppender.get_join_types()\n  -> join: table<string, string>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 200038,
                "name": "get_join_types",
                "rawdesc": " Get a map of supported JOIN type to the join keyword.",
                "start": 200009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": " Create a new query renderer.\n\n@*param* `out_query` — query structure as provided through the Virtual Schema API\n\n@*return* `query` — renderer instance",
                "extends": {
                    "args": [
                        {
                            "finish": 280008,
                            "name": "self",
                            "start": 280008,
                            "type": "self",
                            "view": "SelectAppender"
                        },
                        {
                            "desc": "query structure as provided through the Virtual Schema API",
                            "finish": 280037,
                            "name": "out_query",
                            "rawdesc": "query structure as provided through the Virtual Schema API",
                            "start": 280028,
                            "type": "local",
                            "view": "Query"
                        },
                        {
                            "finish": 280054,
                            "name": "appender_config",
                            "start": 280039,
                            "type": "local",
                            "view": "AppenderConfig"
                        }
                    ],
                    "desc": " Create a new query renderer.\n\n@*param* `out_query` — query structure as provided through the Virtual Schema API\n\n@*return* `query` — renderer instance",
                    "finish": 320003,
                    "rawdesc": " Create a new query renderer.",
                    "returns": [
                        {
                            "desc": "renderer instance",
                            "name": "query",
                            "rawdesc": "renderer instance",
                            "type": "function.return",
                            "view": "SelectAppender"
                        }
                    ],
                    "start": 280000,
                    "type": "function",
                    "view": "(method) SelectAppender:new(out_query: Query, appender_config: AppenderConfig)\n  -> query: SelectAppender"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/queryrenderer/SelectAppender.lua",
                "finish": 280027,
                "name": "new",
                "rawdesc": " Create a new query renderer.",
                "start": 280009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "SelectAppender",
        "rawdesc": " Appender that can add top-level elements of a `SELECT` statement (or sub-select).",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 540033,
                    "start": 540021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 540033,
                            "start": 540021,
                            "type": "doc.type.array",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 540033,
                "start": 540010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "SelectList",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 30028,
                "start": 30010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 90050,
                    "start": 90027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 90048,
                            "start": 90027,
                            "type": "doc.type",
                            "types": [
                                {
                                    "finish": 90041,
                                    "start": 90027,
                                    "type": "doc.type.string",
                                    "view": "\"single_group\""
                                },
                                {
                                    "finish": 90048,
                                    "start": 90042,
                                    "type": "doc.type.name",
                                    "view": "string"
                                }
                            ],
                            "view": "string|\"single_group\""
                        }
                    ],
                    "view": "(string|\"single_group\")?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 90050,
                "name": "aggregationType",
                "start": 90010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": " luacheck: max line length 180",
                "extends": {
                    "finish": 70037,
                    "start": 70017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 70036,
                            "start": 70017,
                            "type": "doc.type.name",
                            "view": "BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4)"
                        }
                    ],
                    "view": "(BetweenPredicate|BinaryPredicateExpression|ExistsPredicate|InPredicate|IteratedPredicate...(+4))?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 70037,
                "name": "filter",
                "rawdesc": " luacheck: max line length 180",
                "start": 70010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60025,
                    "start": 60015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 60025,
                            "start": 60015,
                            "type": "doc.type.name",
                            "view": "JoinExpression|TableExpression"
                        }
                    ],
                    "view": "JoinExpression|TableExpression"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 60025,
                "name": "from",
                "start": 60010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 80031,
                    "start": 80018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 80030,
                            "start": 80018,
                            "type": "doc.type.array",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[]?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 80031,
                "name": "groupBy",
                "start": 80010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 100021,
                    "start": 100017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 100020,
                            "start": 100017,
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 100021,
                "name": "having",
                "start": 100010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 120020,
                    "start": 120016,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 120019,
                            "start": 120016,
                            "type": "doc.type.name",
                            "view": "any"
                        }
                    ],
                    "view": "any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 120020,
                "name": "limit",
                "start": 120010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 110034,
                    "start": 110018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 110033,
                            "start": 110018,
                            "type": "doc.type.array",
                            "view": "OrderByClause[]"
                        }
                    ],
                    "view": "OrderByClause[]?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 110034,
                "name": "orderBy",
                "start": 110010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 50034,
                    "start": 50021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 50033,
                            "start": 50021,
                            "type": "doc.type.array",
                            "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[][]"
                        }
                    ],
                    "view": "ColumnReference|LiteralBoolean|LiteralDate|LiteralDouble|LiteralExactNumeric...(+4)[][]?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 50034,
                "name": "selectList",
                "start": 50010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 130052,
                    "start": 130030,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 130052,
                            "start": 130030,
                            "type": "doc.type.array",
                            "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                        }
                    ],
                    "view": "BooleanTypeDefinition|CharacterTypeDefinition|DateTypeDefinition|DecimalTypeDefinition|DoubleTypeDefinition...(+4)[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 130052,
                "name": "selectListDataTypes",
                "start": 130010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 40036,
                    "start": 40015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 40023,
                            "start": 40015,
                            "type": "doc.type.string",
                            "view": "\"select\""
                        },
                        {
                            "finish": 40036,
                            "start": 40024,
                            "type": "doc.type.string",
                            "view": "\"sub_select\""
                        }
                    ],
                    "view": "\"select\"|\"sub_select\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 40036,
                "name": "type",
                "start": 40010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "SelectSqlStatement",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 160031,
                "start": 160010,
                "type": "doc.class"
            }
        ],
        "desc": "Response for a set properties request",
        "fields": [
            {
                "desc": "Response for a createVirtualSchema request",
                "extends": {
                    "finish": 180045,
                    "start": 180025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 180045,
                            "start": 180025,
                            "type": "doc.type.name",
                            "view": "ExasolSchemaMetadata"
                        }
                    ],
                    "view": "ExasolSchemaMetadata"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 180045,
                "name": "schemaMetadata",
                "rawdesc": "Response for a createVirtualSchema request",
                "start": 180010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 170030,
                    "start": 170015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 170030,
                            "start": 170015,
                            "type": "doc.type.string",
                            "view": "\"setProperties\""
                        }
                    ],
                    "view": "\"setProperties\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/vs_response.lua",
                "finish": 170030,
                "name": "type",
                "start": 170010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "SetPropertiesResponse",
        "rawdesc": "Response for a set properties request",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 680039,
                    "start": 680021,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 680026,
                            "start": 680021,
                            "type": "doc.type.string",
                            "view": "\"EXA\""
                        },
                        {
                            "finish": 680033,
                            "start": 680027,
                            "type": "doc.type.string",
                            "view": "\"JDBC\""
                        },
                        {
                            "finish": 680039,
                            "start": 680034,
                            "type": "doc.type.string",
                            "view": "\"ORA\""
                        }
                    ],
                    "view": "\"EXA\"|\"JDBC\"|\"ORA\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/ImportQueryBuilder.lua",
                "finish": 680039,
                "start": 680010,
                "type": "doc.alias"
            }
        ],
        "desc": "```lua\nSourceType:\n    | \"EXA\"\n    | \"JDBC\"\n    | \"ORA\"\n```",
        "fields": [],
        "name": "SourceType",
        "rawdesc": "```lua\nSourceType:\n    | \"EXA\"\n    | \"JDBC\"\n    | \"ORA\"\n```",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 490087,
                    "start": 490029,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 490042,
                            "start": 490029,
                            "type": "doc.type.name",
                            "view": "LiteralString"
                        },
                        {
                            "finish": 490054,
                            "start": 490043,
                            "type": "doc.type.name",
                            "view": "LiteralDate"
                        },
                        {
                            "finish": 490071,
                            "start": 490055,
                            "type": "doc.type.name",
                            "view": "LiteralTimestamp"
                        },
                        {
                            "finish": 490087,
                            "start": 490072,
                            "type": "doc.type.name",
                            "view": "LiteralInterval"
                        }
                    ],
                    "view": "LiteralDate|LiteralInterval|LiteralString|LiteralTimestamp"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 490087,
                "start": 490010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "StringBasedLiteral",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 310025,
                "start": 310010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "Optional catalog. Not used in Exasol useful for other databases that use catalogs.",
                "extends": {
                    "finish": 330025,
                    "start": 330018,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 330024,
                            "start": 330018,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 330025,
                "name": "catalog",
                "rawdesc": "Optional catalog. Not used in Exasol useful for other databases that use catalogs.",
                "start": 330010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 350021,
                    "start": 350015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 350021,
                            "start": 350015,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 350021,
                "name": "name",
                "start": 350010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 340024,
                    "start": 340017,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 340023,
                            "start": 340017,
                            "type": "doc.type.name",
                            "view": "string"
                        }
                    ],
                    "view": "string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 340024,
                "name": "schema",
                "start": 340010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 320022,
                    "start": 320015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 320022,
                            "start": 320015,
                            "type": "doc.type.string",
                            "view": "\"table\""
                        }
                    ],
                    "view": "\"table\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/statement.lua",
                "finish": 320022,
                "name": "type",
                "start": 320010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "TableExpression",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 150033,
                "start": 150010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "extends": {
                    "finish": 160026,
                    "start": 160015,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 160026,
                            "start": 160015,
                            "type": "doc.type.string",
                            "view": "\"TIMESTAMP\""
                        }
                    ],
                    "view": "\"TIMESTAMP\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 160026,
                "name": "type",
                "start": 160010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 170035,
                    "start": 170028,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 170035,
                            "start": 170028,
                            "type": "doc.type.name",
                            "view": "boolean"
                        }
                    ],
                    "view": "boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/type_definition.lua",
                "finish": 170035,
                "name": "withLocalTimeZone",
                "start": 170010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "TimestampTypeDefinition",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 29,
                    "start": 16,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 22,
                            "start": 16,
                            "type": "doc.type.name",
                            "view": "string"
                        },
                        {
                            "finish": 29,
                            "start": 23,
                            "type": "doc.type.name",
                            "view": "number"
                        }
                    ],
                    "view": "string|number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/Query.lua",
                "finish": 29,
                "start": 10,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "Token",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 650037,
                    "start": 650025,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 650037,
                            "start": 650025,
                            "type": "doc.type.name",
                            "view": "NotPredicate"
                        }
                    ],
                    "view": "NotPredicate"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/src/exasol/vscl/types/expression.lua",
                "finish": 650037,
                "start": 650010,
                "type": "doc.alias"
            }
        ],
        "fields": [],
        "name": "UnaryPredicate",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "finish": 700007,
                    "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "start": 700005,
                    "type": "table",
                    "view": "_G"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 700002,
                "start": 700000,
                "type": "setglobal"
            }
        ],
        "desc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
        "name": "_G",
        "rawdesc": "\nA global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                    "finish": 4040020,
                    "rawdesc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                    "start": 4040011,
                    "type": "string",
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4040008,
                "start": 4040000,
                "type": "setglobal"
            }
        ],
        "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
        "name": "_VERSION",
        "rawdesc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1910025,
                            "name": "block",
                            "start": 1910020,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Define a function to run after each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test saving\", function()\n    local game\n\n    after_each(function()\n        game.save.reset()\n    end)\n\n    it(\"Creates game\", function()\n        game = game.new()\n        game.save.save()\n    end)\n\n    describe(\"Saves metadata\", function()\n        it(\"Saves objects\", function()\n            game = game.new()\n            game.save.save()\n            assert.is_not.Nil(game.save.objects)\n        end)\n    end)\nend)\n```",
                    "finish": 1910030,
                    "rawdesc": "Define a function to run after each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test saving\", function()\n    local game\n\n    after_each(function()\n        game.save.reset()\n    end)\n\n    it(\"Creates game\", function()\n        game = game.new()\n        game.save.save()\n    end)\n\n    describe(\"Saves metadata\", function()\n        it(\"Saves objects\", function()\n            game = game.new()\n            game.save.save()\n            assert.is_not.Nil(game.save.objects)\n        end)\n    end)\nend)\n```",
                    "start": 1910000,
                    "type": "function",
                    "view": "function after_each(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1910019,
                "start": 1910009,
                "type": "setglobal"
            }
        ],
        "desc": "Define a function to run after each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test saving\", function()\n    local game\n\n    after_each(function()\n        game.save.reset()\n    end)\n\n    it(\"Creates game\", function()\n        game = game.new()\n        game.save.save()\n    end)\n\n    describe(\"Saves metadata\", function()\n        it(\"Saves objects\", function()\n            game = game.new()\n            game.save.save()\n            assert.is_not.Nil(game.save.objects)\n        end)\n    end)\nend)\n```",
        "name": "after_each",
        "rawdesc": "Define a function to run after each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test saving\", function()\n    local game\n\n    after_each(function()\n        game.save.reset()\n    end)\n\n    it(\"Creates game\", function()\n        game = game.new()\n        game.save.save()\n    end)\n\n    describe(\"Saves metadata\", function()\n        it(\"Saves objects\", function()\n            game = game.new()\n            game.save.save()\n            assert.is_not.Nil(game.save.objects)\n        end)\n    end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                    "finish": 80008,
                    "rawdesc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                    "start": 80006,
                    "type": "table",
                    "view": "string[]"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 80003,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
        "name": "arg",
        "rawdesc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 20028,
                    "start": 20009,
                    "type": "select",
                    "view": "unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 20006,
                "start": 20000,
                "type": "setglobal"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 210017,
                            "name": "v",
                            "start": 210016,
                            "type": "local",
                            "view": "<T>?"
                        },
                        {
                            "finish": 210026,
                            "name": "message",
                            "start": 210019,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 210031,
                            "start": 210028,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "finish": 210036,
                    "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 210000,
                    "type": "function",
                    "view": "function assert(v?: <T>, message?: any, ...any)\n  -> <T>\n  2. ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 210015,
                "start": 210009,
                "type": "setglobal"
            }
        ],
        "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
        "name": "assert",
        "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Define the start of an asynchronous test.\n\nCall `done()` at the end of your test to complete it.\n\n## Example\n```\nit(\"Makes an http request\", function()\n    async()\n    http.get(\"https://github.com\", function()\n        print(\"Got Website!\")\n        done()\n    end)\nend)\n```",
                    "finish": 320020,
                    "rawdesc": "Define the start of an asynchronous test.\n\nCall `done()` at the end of your test to complete it.\n\n## Example\n```\nit(\"Makes an http request\", function()\n    async()\n    http.get(\"https://github.com\", function()\n        print(\"Got Website!\")\n        done()\n    end)\nend)\n```",
                    "start": 320000,
                    "type": "function",
                    "view": "function async()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 320014,
                "start": 320009,
                "type": "setglobal"
            }
        ],
        "desc": "Define the start of an asynchronous test.\n\nCall `done()` at the end of your test to complete it.\n\n## Example\n```\nit(\"Makes an http request\", function()\n    async()\n    http.get(\"https://github.com\", function()\n        print(\"Got Website!\")\n        done()\n    end)\nend)\n```",
        "name": "async",
        "rawdesc": "Define the start of an asynchronous test.\n\nCall `done()` at the end of your test to complete it.\n\n## Example\n```\nit(\"Makes an http request\", function()\n    async()\n    http.get(\"https://github.com\", function()\n        print(\"Got Website!\")\n        done()\n    end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1620026,
                            "name": "block",
                            "start": 1620021,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Define a function to run before each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test Array Class\", function()\n    local a\n    local b\n\n    before_each(function()\n        a = Array.new(1, 2, 3, 4)\n        b = Array.new(11, 12, 13, 14)\n    end)\n\n    it(\"Assures instance is an Array\", function()\n        assert.True(Array.isArray(a))\n        assert.True(Array.isArray(b))\n    end)\n\n    describe(\"Nested tests\", function()\n        it(\"Also runs before_each\", function()\n            assert.are.same(\n                { 1, 2, 3, 4, 11, 12, 13, 14 },\n                a:concat(b))\n        end)\n    end)\nend)\n```",
                    "finish": 1620031,
                    "rawdesc": "Define a function to run before each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test Array Class\", function()\n    local a\n    local b\n\n    before_each(function()\n        a = Array.new(1, 2, 3, 4)\n        b = Array.new(11, 12, 13, 14)\n    end)\n\n    it(\"Assures instance is an Array\", function()\n        assert.True(Array.isArray(a))\n        assert.True(Array.isArray(b))\n    end)\n\n    describe(\"Nested tests\", function()\n        it(\"Also runs before_each\", function()\n            assert.are.same(\n                { 1, 2, 3, 4, 11, 12, 13, 14 },\n                a:concat(b))\n        end)\n    end)\nend)\n```",
                    "start": 1620000,
                    "type": "function",
                    "view": "function before_each(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1620020,
                "start": 1620009,
                "type": "setglobal"
            }
        ],
        "desc": "Define a function to run before each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test Array Class\", function()\n    local a\n    local b\n\n    before_each(function()\n        a = Array.new(1, 2, 3, 4)\n        b = Array.new(11, 12, 13, 14)\n    end)\n\n    it(\"Assures instance is an Array\", function()\n        assert.True(Array.isArray(a))\n        assert.True(Array.isArray(b))\n    end)\n\n    describe(\"Nested tests\", function()\n        it(\"Also runs before_each\", function()\n            assert.are.same(\n                { 1, 2, 3, 4, 11, 12, 13, 14 },\n                a:concat(b))\n        end)\n    end)\nend)\n```",
        "name": "before_each",
        "rawdesc": "Define a function to run before each child test, this includes tests nested\nin a child describe block.\n\n## Example\n```\ndescribe(\"Test Array Class\", function()\n    local a\n    local b\n\n    before_each(function()\n        a = Array.new(1, 2, 3, 4)\n        b = Array.new(11, 12, 13, 14)\n    end)\n\n    it(\"Assures instance is an Array\", function()\n        assert.True(Array.isArray(a))\n        assert.True(Array.isArray(b))\n    end)\n\n    describe(\"Nested tests\", function()\n        it(\"Also runs before_each\", function()\n            assert.are.same(\n                { 1, 2, 3, 4, 11, 12, 13, 14 },\n                a:concat(b))\n        end)\n    end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 410027,
                            "name": "opt",
                            "start": 410024,
                            "type": "local",
                            "view": "(\"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3))?"
                        },
                        {
                            "finish": 410032,
                            "start": 410029,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "finish": 410037,
                    "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 410000,
                    "type": "function",
                    "view": "function collectgarbage(opt?: \"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3), ...any)\n  -> any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 410023,
                "start": 410009,
                "type": "setglobal"
            }
        ],
        "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
        "name": "collectgarbage",
        "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 580018,
                    "start": 580010,
                    "type": "getglobal",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 580007,
                "start": 580000,
                "type": "setglobal"
            }
        ],
        "name": "context",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "finish": 80014,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "start": 80012,
                    "type": "table",
                    "view": "coroutinelib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 80009,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
        "name": "coroutine",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 390027,
                            "name": "co",
                            "start": 390025,
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "finish": 390032,
                    "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 390024,
                "start": 390009,
                "type": "setfield"
            }
        ],
        "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
        "name": "coroutine.close",
        "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 180027,
                            "name": "f",
                            "start": 180026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "finish": 180032,
                    "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": 180000,
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 180025,
                "start": 180009,
                "type": "setfield"
            }
        ],
        "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
        "name": "coroutine.create",
        "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 280033,
                            "name": "co",
                            "start": 280031,
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "finish": 280038,
                    "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 280000,
                    "type": "function",
                    "view": "function coroutine.isyieldable(co?: thread)\n  -> boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 280030,
                "start": 280009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
        "name": "coroutine.isyieldable",
        "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500028,
                            "name": "co",
                            "start": 500026,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 500034,
                            "name": "val1",
                            "start": 500030,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 500039,
                            "start": 500036,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "finish": 500044,
                    "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 500000,
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 500025,
                "start": 500009,
                "type": "setfield"
            }
        ],
        "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
        "name": "coroutine.resume",
        "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "finish": 600032,
                    "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 600000,
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 600026,
                "start": 600009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
        "name": "coroutine.running",
        "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 740028,
                            "name": "co",
                            "start": 740026,
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": 740033,
                    "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": 740000,
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 740025,
                "start": 740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
        "name": "coroutine.status",
        "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 840025,
                            "name": "f",
                            "start": 840024,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "finish": 840030,
                    "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 840023,
                "start": 840009,
                "type": "setfield"
            }
        ],
        "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
        "name": "coroutine.wrap",
        "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930028,
                            "start": 930025,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "async": true,
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "finish": 930033,
                    "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 930000,
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 930024,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
        "name": "coroutine.yield",
        "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "finish": 80010,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "start": 80008,
                    "type": "table",
                    "view": "debuglib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 80005,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
        "name": "debug",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "finish": 330026,
                    "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "start": 330000,
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 330020,
                "start": 330009,
                "type": "setfield"
            }
        ],
        "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
        "name": "debug.debug",
        "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 440024,
                            "name": "o",
                            "start": 440023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "finish": 440029,
                    "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 440000,
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 440022,
                "start": 440009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
        "name": "debug.getfenv",
        "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560025,
                            "name": "co",
                            "start": 560023,
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "finish": 560030,
                    "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 560000,
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 560022,
                "start": 560009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
        "name": "debug.gethook",
        "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 790029,
                            "name": "thread",
                            "start": 790023,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 790032,
                            "name": "f",
                            "start": 790031,
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": 790038,
                            "name": "what",
                            "start": 790034,
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "finish": 790043,
                    "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": 790000,
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))\n  -> debuginfo"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 790022,
                "start": 790009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
        "name": "debug.getinfo",
        "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930030,
                            "name": "thread",
                            "start": 930024,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 930033,
                            "name": "f",
                            "start": 930032,
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": 930040,
                            "name": "index",
                            "start": 930035,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "finish": 930045,
                    "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 930000,
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 930023,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
        "name": "debug.getlocal",
        "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1030034,
                            "name": "object",
                            "start": 1030028,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "finish": 1030039,
                    "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 1030000,
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1030027,
                "start": 1030009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
        "name": "debug.getmetatable",
        "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "finish": 1120032,
                    "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1120026,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
        "name": "debug.getregistry",
        "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240027,
                            "name": "f",
                            "start": 1240026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 1240031,
                            "name": "up",
                            "start": 1240029,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "finish": 1240036,
                    "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1240000,
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1240025,
                "start": 1240009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
        "name": "debug.getupvalue",
        "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1390029,
                            "name": "u",
                            "start": 1390028,
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": 1390032,
                            "name": "n",
                            "start": 1390031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "finish": 1390037,
                    "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1390000,
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata, n?: integer)\n  -> any\n  2. boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1390027,
                "start": 1390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
        "name": "debug.getuservalue",
        "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1540035,
                            "name": "limit",
                            "start": 1540030,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "deprecated": true,
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "finish": 1540040,
                    "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1540029,
                "start": 1540009,
                "type": "setfield"
            }
        ],
        "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
        "name": "debug.setcstacklimit",
        "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1660029,
                            "name": "object",
                            "start": 1660023,
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": 1660034,
                            "name": "env",
                            "start": 1660031,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "finish": 1660039,
                    "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 1660000,
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1660022,
                "start": 1660009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
        "name": "debug.setfenv",
        "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1850029,
                            "name": "thread",
                            "start": 1850023,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 1850035,
                            "name": "hook",
                            "start": 1850031,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 1850041,
                            "name": "mask",
                            "start": 1850037,
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "finish": 1850048,
                            "name": "count",
                            "start": 1850043,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": 1850053,
                    "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "start": 1850000,
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1850022,
                "start": 1850009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
        "name": "debug.sethook",
        "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1980030,
                            "name": "thread",
                            "start": 1980024,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 1980037,
                            "name": "level",
                            "start": 1980032,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1980044,
                            "name": "index",
                            "start": 1980039,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1980051,
                            "name": "value",
                            "start": 1980046,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "finish": 1980056,
                    "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1980000,
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1980023,
                "start": 1980009,
                "type": "setfield"
            }
        ],
        "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
        "name": "debug.setlocal",
        "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2090033,
                            "name": "value",
                            "start": 2090028,
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": 2090039,
                            "name": "meta",
                            "start": 2090035,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "finish": 2090044,
                    "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 2090000,
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2090027,
                "start": 2090009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
        "name": "debug.setmetatable",
        "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2200027,
                            "name": "f",
                            "start": 2200026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2200031,
                            "name": "up",
                            "start": 2200029,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2200038,
                            "name": "value",
                            "start": 2200033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "finish": 2200043,
                    "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2200000,
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2200025,
                "start": 2200009,
                "type": "setfield"
            }
        ],
        "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
        "name": "debug.setupvalue",
        "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2340033,
                            "name": "udata",
                            "start": 2340028,
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": 2340040,
                            "name": "value",
                            "start": 2340035,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2340043,
                            "name": "n",
                            "start": 2340042,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "finish": 2340048,
                    "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": 2340000,
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any, n?: integer)\n  -> udata: userdata"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2340027,
                "start": 2340009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
        "name": "debug.setuservalue",
        "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2470031,
                            "name": "thread",
                            "start": 2470025,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 2470040,
                            "name": "message",
                            "start": 2470033,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2470047,
                            "name": "level",
                            "start": 2470042,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "finish": 2470052,
                    "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2470000,
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2470024,
                "start": 2470009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
        "name": "debug.traceback",
        "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2590026,
                            "name": "f",
                            "start": 2590025,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2590029,
                            "name": "n",
                            "start": 2590028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "finish": 2590034,
                    "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": 2590000,
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2590024,
                "start": 2590009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
        "name": "debug.upvalueid",
        "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2710029,
                            "name": "f1",
                            "start": 2710027,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2710033,
                            "name": "n1",
                            "start": 2710031,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2710037,
                            "name": "f2",
                            "start": 2710035,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2710041,
                            "name": "n2",
                            "start": 2710039,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "finish": 2710046,
                    "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "start": 2710000,
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2710026,
                "start": 2710009,
                "type": "setfield"
            }
        ],
        "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
        "name": "debug.upvaluejoin",
        "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560022,
                            "name": "name",
                            "start": 560018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 560029,
                            "name": "block",
                            "start": 560024,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Used to define a set of tests. Can be nested to define sub-tests.\n\n## Example\n```\ndescribe(\"Test Item Class\", function()\n    it(\"Creates an item\", function()\n        --...\n    end)\n    describe(\"Test Tags\", function()\n        it(\"Creates a tag\", function()\n            --...\n        end)\n    end)\nend)\n```",
                    "finish": 560034,
                    "rawdesc": "Used to define a set of tests. Can be nested to define sub-tests.\n\n## Example\n```\ndescribe(\"Test Item Class\", function()\n    it(\"Creates an item\", function()\n        --...\n    end)\n    describe(\"Test Tags\", function()\n        it(\"Creates a tag\", function()\n            --...\n        end)\n    end)\nend)\n```",
                    "start": 560000,
                    "type": "function",
                    "view": "function describe(name: string, block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 560017,
                "start": 560009,
                "type": "setglobal"
            }
        ],
        "desc": "Used to define a set of tests. Can be nested to define sub-tests.\n\n## Example\n```\ndescribe(\"Test Item Class\", function()\n    it(\"Creates an item\", function()\n        --...\n    end)\n    describe(\"Test Tags\", function()\n        it(\"Creates a tag\", function()\n            --...\n        end)\n    end)\nend)\n```",
        "name": "describe",
        "rawdesc": "Used to define a set of tests. Can be nested to define sub-tests.\n\n## Example\n```\ndescribe(\"Test Item Class\", function()\n    it(\"Creates an item\", function()\n        --...\n    end)\n    describe(\"Test Tags\", function()\n        it(\"Creates a tag\", function()\n            --...\n        end)\n    end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500024,
                            "name": "filename",
                            "start": 500016,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "finish": 500029,
                    "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 500000,
                    "type": "function",
                    "view": "function dofile(filename?: string)\n  -> ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 500015,
                "start": 500009,
                "type": "setglobal"
            }
        ],
        "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
        "name": "dofile",
        "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Mark the end of an asynchronous test.\n\nShould be paired with a call to `async()`.",
                    "finish": 370019,
                    "rawdesc": "Mark the end of an asynchronous test.\n\nShould be paired with a call to `async()`.",
                    "start": 370000,
                    "type": "function",
                    "view": "function done()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 370013,
                "start": 370009,
                "type": "setglobal"
            }
        ],
        "desc": "Mark the end of an asynchronous test.\n\nShould be paired with a call to `async()`.",
        "name": "done",
        "rawdesc": "Mark the end of an asynchronous test.\n\nShould be paired with a call to `async()`.",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 620022,
                            "name": "message",
                            "start": 620015,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 620029,
                            "name": "level",
                            "start": 620024,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "finish": 620034,
                    "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "start": 620000,
                    "type": "function",
                    "view": "function error(message: any, level?: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 620014,
                "start": 620009,
                "type": "setglobal"
            }
        ],
        "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
        "name": "error",
        "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 780020,
                            "name": "name",
                            "start": 780016,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 780027,
                            "name": "block",
                            "start": 780022,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Functions like `describe()` except it exposes the test's environment to\nouter contexts\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    expose(\"Exposes a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.are.equal(10, myValue)\nend)\n```",
                    "finish": 780032,
                    "rawdesc": "Functions like `describe()` except it exposes the test's environment to\nouter contexts\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    expose(\"Exposes a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.are.equal(10, myValue)\nend)\n```",
                    "start": 780000,
                    "type": "function",
                    "view": "function expose(name: string, block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 780015,
                "start": 780009,
                "type": "setglobal"
            }
        ],
        "desc": "Functions like `describe()` except it exposes the test's environment to\nouter contexts\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    expose(\"Exposes a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.are.equal(10, myValue)\nend)\n```",
        "name": "expose",
        "rawdesc": "Functions like `describe()` except it exposes the test's environment to\nouter contexts\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    expose(\"Exposes a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.are.equal(10, myValue)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 90022,
                            "name": "filename",
                            "start": 90014,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Undocumented feature with unknown purpose.",
                    "finish": 90027,
                    "rawdesc": "Undocumented feature with unknown purpose.",
                    "start": 90000,
                    "type": "function",
                    "view": "function file(filename: string)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 90013,
                "start": 90009,
                "type": "setglobal"
            }
        ],
        "desc": "Undocumented feature with unknown purpose.",
        "name": "file",
        "rawdesc": "Undocumented feature with unknown purpose.",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2970022,
                            "name": "block",
                            "start": 2970017,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Runs last in a context block regardless of test outcome\n\n## Example\n```\nit(\"Read File Contents\",function()\n    local f = io.open(\"file\", \"r\")\n\n    -- always close file after test\n    finally(function()\n        f:close()\n    end)\n\n    -- do stuff with f\nend)\n```",
                    "finish": 2970027,
                    "rawdesc": "Runs last in a context block regardless of test outcome\n\n## Example\n```\nit(\"Read File Contents\",function()\n    local f = io.open(\"file\", \"r\")\n\n    -- always close file after test\n    finally(function()\n        f:close()\n    end)\n\n    -- do stuff with f\nend)\n```",
                    "start": 2970000,
                    "type": "function",
                    "view": "function finally(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2970016,
                "start": 2970009,
                "type": "setglobal"
            }
        ],
        "desc": "Runs last in a context block regardless of test outcome\n\n## Example\n```\nit(\"Read File Contents\",function()\n    local f = io.open(\"file\", \"r\")\n\n    -- always close file after test\n    finally(function()\n        f:close()\n    end)\n\n    -- do stuff with f\nend)\n```",
        "name": "finally",
        "rawdesc": "Runs last in a context block regardless of test outcome\n\n## Example\n```\nit(\"Read File Contents\",function()\n    local f = io.open(\"file\", \"r\")\n\n    -- always close file after test\n    finally(function()\n        f:close()\n    end)\n\n    -- do stuff with f\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 810018,
                            "name": "f",
                            "start": 810017,
                            "type": "local",
                            "view": "(integer|fun(...any):...unknown)?"
                        }
                    ],
                    "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "finish": 810023,
                    "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 810000,
                    "type": "function",
                    "view": "function getfenv(f?: integer|fun(...any):...unknown)\n  -> table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 810016,
                "start": 810009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
        "name": "getfenv",
        "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 910028,
                            "name": "object",
                            "start": 910022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "finish": 910033,
                    "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 910000,
                    "type": "function",
                    "view": "function getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 910021,
                "start": 910009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
        "name": "getmetatable",
        "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1000022,
                            "name": "name",
                            "start": 1000018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1000029,
                            "name": "block",
                            "start": 1000024,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Functions like `describe()` except it insulates the test's environment to\nonly this context.\n\nThis is the default behaviour of `describe()`.\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    insulate(\"Insulates a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.is.Nil(myValue)\nend)\n```",
                    "finish": 1000034,
                    "rawdesc": "Functions like `describe()` except it insulates the test's environment to\nonly this context.\n\nThis is the default behaviour of `describe()`.\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    insulate(\"Insulates a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.is.Nil(myValue)\nend)\n```",
                    "start": 1000000,
                    "type": "function",
                    "view": "function insulate(name: string, block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1000017,
                "start": 1000009,
                "type": "setglobal"
            }
        ],
        "desc": "Functions like `describe()` except it insulates the test's environment to\nonly this context.\n\nThis is the default behaviour of `describe()`.\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    insulate(\"Insulates a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.is.Nil(myValue)\nend)\n```",
        "name": "insulate",
        "rawdesc": "Functions like `describe()` except it insulates the test's environment to\nonly this context.\n\nThis is the default behaviour of `describe()`.\n\n## Example\n```\ndescribe(\"Test exposing\", function()\n    insulate(\"Insulates a value\", function()\n        _G.myValue = 10\n    end)\n\nend)\n\ndescribe(\"Another test in the same file\", function()\n    assert.is.Nil(myValue)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "finish": 260007,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "start": 260005,
                    "type": "table",
                    "view": "iolib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 260002,
                "start": 260000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
        "name": "io",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 510022,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 510018,
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": 510027,
                    "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 510017,
                "start": 510009,
                "type": "setfield"
            }
        ],
        "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "name": "io.close",
        "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "finish": 580023,
                    "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "start": 580000,
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 580017,
                "start": 580009,
                "type": "setfield"
            }
        ],
        "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
        "name": "io.flush",
        "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 670022,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 670018,
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "finish": 670027,
                    "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "start": 670000,
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 670017,
                "start": 670009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
        "name": "io.input",
        "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830026,
                            "name": "filename",
                            "start": 830018,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 830031,
                            "start": 830028,
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": 830036,
                    "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 830017,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "name": "io.lines",
        "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950025,
                            "name": "filename",
                            "start": 950017,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950031,
                            "name": "mode",
                            "start": 950027,
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": 950036,
                    "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 950016,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
        "name": "io.open",
        "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 1040023,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 1040019,
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "finish": 1040028,
                    "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "start": 1040000,
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1040018,
                "start": 1040009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
        "name": "io.output",
        "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1190022,
                            "name": "prog",
                            "start": 1190018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1190028,
                            "name": "mode",
                            "start": 1190024,
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": 1190033,
                    "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1190000,
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1190017,
                "start": 1190009,
                "type": "setfield"
            }
        ],
        "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
        "name": "io.popen",
        "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1300020,
                            "start": 1300017,
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": 1300025,
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1300000,
                    "type": "function",
                    "view": "function io.read(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1300016,
                "start": 1300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "name": "io.read",
        "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "finish": 1390025,
                    "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": 1390000,
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1390019,
                "start": 1390009,
                "type": "setfield"
            }
        ],
        "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
        "name": "io.tmpfile",
        "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 1540021,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 1540017,
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": 1540026,
                    "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1540016,
                "start": 1540009,
                "type": "setfield"
            }
        ],
        "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
        "name": "io.type",
        "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1630021,
                            "start": 1630018,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "finish": 1630026,
                    "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1630000,
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1630017,
                "start": 1630009,
                "type": "setfield"
            }
        ],
        "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
        "name": "io.write",
        "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1080017,
                            "name": "t",
                            "start": 1080016,
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "finish": 1080022,
                    "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: <V>[], i?: integer):integer, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        },
                        {
                            "name": "i",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1080000,
                    "type": "function",
                    "view": "function ipairs(t: <T:table>)\n  -> fun(table: <V>[], i?: integer):integer, <V>\n  2. <T:table>\n  3. i: integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1080015,
                "start": 1080009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
        "name": "ipairs",
        "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1280016,
                            "name": "name",
                            "start": 1280012,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1280023,
                            "name": "block",
                            "start": 1280018,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Define a test that will pass, fail, or error.\n\nYou can also use `spec()` and `test()` as aliases.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    it(\"Runs a test\", function()\n        assert.is.True(10 == 10)\n    end)\nend)\n```",
                    "finish": 1280028,
                    "rawdesc": "Define a test that will pass, fail, or error.\n\nYou can also use `spec()` and `test()` as aliases.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    it(\"Runs a test\", function()\n        assert.is.True(10 == 10)\n    end)\nend)\n```",
                    "start": 1280000,
                    "type": "function",
                    "view": "function it(name: string, block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1280011,
                "start": 1280009,
                "type": "setglobal"
            }
        ],
        "desc": "Define a test that will pass, fail, or error.\n\nYou can also use `spec()` and `test()` as aliases.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    it(\"Runs a test\", function()\n        assert.is.True(10 == 10)\n    end)\nend)\n```",
        "name": "it",
        "rawdesc": "Define a test that will pass, fail, or error.\n\nYou can also use `spec()` and `test()` as aliases.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    it(\"Runs a test\", function()\n        assert.is.True(10 == 10)\n    end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2340025,
                            "name": "block",
                            "start": 2340020,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Runs first in a context block before any tests. Only runs if there are child\ntests to run.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    -- Will not run because there are no tests\n    lazy_setup(function()\n         helper = require(\"helper\")\n    end)\n\nend)\n```",
                    "finish": 2340030,
                    "rawdesc": "Runs first in a context block before any tests. Only runs if there are child\ntests to run.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    -- Will not run because there are no tests\n    lazy_setup(function()\n         helper = require(\"helper\")\n    end)\n\nend)\n```",
                    "start": 2340000,
                    "type": "function",
                    "view": "function lazy_setup(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2340019,
                "start": 2340009,
                "type": "setglobal"
            }
        ],
        "desc": "Runs first in a context block before any tests. Only runs if there are child\ntests to run.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    -- Will not run because there are no tests\n    lazy_setup(function()\n         helper = require(\"helper\")\n    end)\n\nend)\n```",
        "name": "lazy_setup",
        "rawdesc": "Runs first in a context block before any tests. Only runs if there are child\ntests to run.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    -- Will not run because there are no tests\n    lazy_setup(function()\n         helper = require(\"helper\")\n    end)\n\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2790028,
                            "name": "block",
                            "start": 2790023,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Runs last in a context block after all tests.\n\nWill only run if tests were run in this context.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    -- Will not run because no tests were run\n    lazy_teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
                    "finish": 2790033,
                    "rawdesc": "Runs last in a context block after all tests.\n\nWill only run if tests were run in this context.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    -- Will not run because no tests were run\n    lazy_teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
                    "start": 2790000,
                    "type": "function",
                    "view": "function lazy_teardown(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2790022,
                "start": 2790009,
                "type": "setglobal"
            }
        ],
        "desc": "Runs last in a context block after all tests.\n\nWill only run if tests were run in this context.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    -- Will not run because no tests were run\n    lazy_teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
        "name": "lazy_teardown",
        "rawdesc": "Runs last in a context block after all tests.\n\nWill only run if tests were run in this context.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    -- Will not run because no tests were run\n    lazy_teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1300019,
                            "name": "chunk",
                            "start": 1300014,
                            "type": "local",
                            "view": "string|function"
                        },
                        {
                            "finish": 1300030,
                            "name": "chunkname",
                            "start": 1300021,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 1300036,
                            "name": "mode",
                            "start": 1300032,
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": 1300041,
                            "name": "env",
                            "start": 1300038,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": 1300046,
                    "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1300000,
                    "type": "function",
                    "view": "function load(chunk: string|function, chunkname?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1300013,
                "start": 1300009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "name": "load",
        "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1430026,
                            "name": "filename",
                            "start": 1430018,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 1430032,
                            "name": "mode",
                            "start": 1430028,
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": 1430037,
                            "name": "env",
                            "start": 1430034,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": 1430042,
                    "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1430000,
                    "type": "function",
                    "view": "function loadfile(filename?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1430017,
                "start": 1430009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "name": "loadfile",
        "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1560024,
                            "name": "text",
                            "start": 1560020,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1560035,
                            "name": "chunkname",
                            "start": 1560026,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "finish": 1560040,
                    "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1560000,
                    "type": "function",
                    "view": "function loadstring(text: string, chunkname?: string)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1560019,
                "start": 1560009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
        "name": "loadstring",
        "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "finish": 320009,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "start": 320007,
                    "type": "table",
                    "view": "mathlib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 320004,
                "start": 320000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
        "name": "math",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430019,
                            "name": "x",
                            "start": 430018,
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "finish": 430024,
                    "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 430017,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
        "name": "math.abs",
        "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 530020,
                            "name": "x",
                            "start": 530019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "finish": 530025,
                    "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 530000,
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 530018,
                "start": 530009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
        "name": "math.acos",
        "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 630020,
                            "name": "x",
                            "start": 630019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "finish": 630025,
                    "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 630000,
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 630018,
                "start": 630009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
        "name": "math.asin",
        "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 740020,
                            "name": "y",
                            "start": 740019,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 740023,
                            "name": "x",
                            "start": 740022,
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "finish": 740028,
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 740000,
                    "type": "function",
                    "view": "function math.atan(y: number, x?: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 740018,
                "start": 740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
        "name": "math.atan",
        "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 860021,
                            "name": "y",
                            "start": 860020,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 860024,
                            "name": "x",
                            "start": 860023,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "finish": 860029,
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 860000,
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 860019,
                "start": 860009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
        "name": "math.atan2",
        "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 960020,
                            "name": "x",
                            "start": 960019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "finish": 960025,
                    "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 960000,
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 960018,
                "start": 960009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
        "name": "math.ceil",
        "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1060019,
                            "name": "x",
                            "start": 1060018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "finish": 1060024,
                    "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1060017,
                "start": 1060009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
        "name": "math.cos",
        "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1170020,
                            "name": "x",
                            "start": 1170019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "finish": 1170025,
                    "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1170000,
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1170018,
                "start": 1170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
        "name": "math.cosh",
        "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1270019,
                            "name": "x",
                            "start": 1270018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "finish": 1270024,
                    "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1270000,
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1270017,
                "start": 1270009,
                "type": "setfield"
            }
        ],
        "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
        "name": "math.deg",
        "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1370019,
                            "name": "x",
                            "start": 1370018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "finish": 1370024,
                    "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1370000,
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1370017,
                "start": 1370009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
        "name": "math.exp",
        "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1470021,
                            "name": "x",
                            "start": 1470020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "finish": 1470026,
                    "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1470000,
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1470019,
                "start": 1470009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
        "name": "math.floor",
        "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1580020,
                            "name": "x",
                            "start": 1580019,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 1580023,
                            "name": "y",
                            "start": 1580022,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "finish": 1580028,
                    "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1580000,
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1580018,
                "start": 1580009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
        "name": "math.fmod",
        "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1700021,
                            "name": "x",
                            "start": 1700020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "finish": 1700026,
                    "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1700000,
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1700019,
                "start": 1700009,
                "type": "setfield"
            }
        ],
        "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
        "name": "math.frexp",
        "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1820021,
                            "name": "m",
                            "start": 1820020,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 1820024,
                            "name": "e",
                            "start": 1820023,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "finish": 1820029,
                    "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1820000,
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1820019,
                "start": 1820009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
        "name": "math.ldexp",
        "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1930019,
                            "name": "x",
                            "start": 1930018,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 1930025,
                            "name": "base",
                            "start": 1930021,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "finish": 1930030,
                    "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1930017,
                "start": 1930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
        "name": "math.log",
        "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2040021,
                            "name": "x",
                            "start": 2040020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "finish": 2040026,
                    "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2040000,
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2040019,
                "start": 2040009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
        "name": "math.log10",
        "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2160019,
                            "name": "x",
                            "start": 2160018,
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": 2160024,
                            "start": 2160021,
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "finish": 2160029,
                    "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 2160000,
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2160017,
                "start": 2160009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
        "name": "math.max",
        "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2280019,
                            "name": "x",
                            "start": 2280018,
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": 2280024,
                            "start": 2280021,
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "finish": 2280029,
                    "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 2280000,
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2280017,
                "start": 2280009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
        "name": "math.min",
        "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2390020,
                            "name": "x",
                            "start": 2390019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "finish": 2390025,
                    "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2390000,
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2390018,
                "start": 2390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
        "name": "math.modf",
        "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2510019,
                            "name": "x",
                            "start": 2510018,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 2510022,
                            "name": "y",
                            "start": 2510021,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "finish": 2510027,
                    "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2510000,
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2510017,
                "start": 2510009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
        "name": "math.pow",
        "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2610019,
                            "name": "x",
                            "start": 2610018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "finish": 2610024,
                    "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2610000,
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2610017,
                "start": 2610009,
                "type": "setfield"
            }
        ],
        "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
        "name": "math.rad",
        "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2770022,
                            "name": "m",
                            "start": 2770021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2770025,
                            "name": "n",
                            "start": 2770024,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "finish": 2770030,
                    "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2770000,
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2770020,
                "start": 2770009,
                "type": "setfield"
            }
        ],
        "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
        "name": "math.random",
        "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2890026,
                            "name": "x",
                            "start": 2890025,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 2890029,
                            "name": "y",
                            "start": 2890028,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "finish": 2890034,
                    "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "start": 2890000,
                    "type": "function",
                    "view": "function math.randomseed(x?: integer, y?: integer)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2890024,
                "start": 2890009,
                "type": "setfield"
            }
        ],
        "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
        "name": "math.randomseed",
        "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2990019,
                            "name": "x",
                            "start": 2990018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "finish": 2990024,
                    "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2990000,
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2990017,
                "start": 2990009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
        "name": "math.sin",
        "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3100020,
                            "name": "x",
                            "start": 3100019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "finish": 3100025,
                    "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3100000,
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3100018,
                "start": 3100009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
        "name": "math.sinh",
        "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3200020,
                            "name": "x",
                            "start": 3200019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "finish": 3200025,
                    "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3200000,
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3200018,
                "start": 3200009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
        "name": "math.sqrt",
        "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3300019,
                            "name": "x",
                            "start": 3300018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "finish": 3300024,
                    "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3300000,
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3300017,
                "start": 3300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
        "name": "math.tan",
        "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3410020,
                            "name": "x",
                            "start": 3410019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "finish": 3410025,
                    "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3410000,
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3410018,
                "start": 3410009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
        "name": "math.tanh",
        "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3520025,
                            "name": "x",
                            "start": 3520024,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "finish": 3520030,
                    "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 3520000,
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3520023,
                "start": 3520009,
                "type": "setfield"
            }
        ],
        "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
        "name": "math.tointeger",
        "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3650020,
                            "name": "x",
                            "start": 3650019,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": 3650025,
                    "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": 3650000,
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3650018,
                "start": 3650009,
                "type": "setfield"
            }
        ],
        "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
        "name": "math.type",
        "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3760019,
                            "name": "m",
                            "start": 3760018,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 3760022,
                            "name": "n",
                            "start": 3760021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "finish": 3760027,
                    "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 3760000,
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3760017,
                "start": 3760009,
                "type": "setfield"
            }
        ],
        "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
        "name": "math.ult",
        "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 50031,
                    "start": 50007,
                    "type": "select",
                    "view": "unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 50004,
                "start": 50000,
                "type": "setglobal"
            }
        ],
        "name": "mock",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1720020,
                            "name": "name",
                            "start": 1720016,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1720025,
                            "start": 1720022,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "finish": 1720030,
                    "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "start": 1720000,
                    "type": "function",
                    "view": "function module(name: string, ...any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1720015,
                "start": 1720009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
        "name": "module",
        "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1620023,
                            "name": "proxy",
                            "start": 1620018,
                            "type": "local",
                            "view": "boolean|table|userdata"
                        }
                    ],
                    "finish": 1620028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": 1620000,
                    "type": "function",
                    "view": "function newproxy(proxy: boolean|table|userdata)\n  -> userdata"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1620017,
                "start": 1620009,
                "type": "setglobal"
            }
        ],
        "name": "newproxy",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1900019,
                            "name": "table",
                            "start": 1900014,
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": 1900026,
                            "name": "index",
                            "start": 1900021,
                            "type": "local",
                            "view": "<K>?"
                        }
                    ],
                    "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "finish": 1900031,
                    "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        },
                        {
                            "type": "function.return",
                            "view": "<V>?"
                        }
                    ],
                    "start": 1900000,
                    "type": "function",
                    "view": "function next(table: table<<K>, <V>>, index?: <K>)\n  -> <K>?\n  2. <V>?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1900013,
                "start": 1900009,
                "type": "setglobal"
            }
        ],
        "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
        "name": "next",
        "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "finish": 80007,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "start": 80005,
                    "type": "table",
                    "view": "oslib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 80002,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
        "name": "os",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "finish": 170023,
                    "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 170000,
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 170017,
                "start": 170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
        "name": "os.clock",
        "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 840023,
                            "name": "format",
                            "start": 840017,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 840029,
                            "name": "time",
                            "start": 840025,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "finish": 840034,
                    "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 840016,
                "start": 840009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
        "name": "os.date",
        "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950023,
                            "name": "t2",
                            "start": 950021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 950027,
                            "name": "t1",
                            "start": 950025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "finish": 950032,
                    "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 950020,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
        "name": "os.difftime",
        "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1060027,
                            "name": "command",
                            "start": 1060020,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": 1060032,
                    "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1060019,
                "start": 1060009,
                "type": "setfield"
            }
        ],
        "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "name": "os.execute",
        "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1150021,
                            "name": "code",
                            "start": 1150017,
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "finish": 1150028,
                            "name": "close",
                            "start": 1150023,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "finish": 1150033,
                    "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "start": 1150000,
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1150016,
                "start": 1150009,
                "type": "setfield"
            }
        ],
        "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
        "name": "os.exit",
        "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1250026,
                            "name": "varname",
                            "start": 1250019,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "finish": 1250031,
                    "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1250018,
                "start": 1250009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
        "name": "os.getenv",
        "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1350027,
                            "name": "filename",
                            "start": 1350019,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "finish": 1350032,
                    "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1350000,
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1350018,
                "start": 1350009,
                "type": "setfield"
            }
        ],
        "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
        "name": "os.remove",
        "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1460026,
                            "name": "oldname",
                            "start": 1460019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1460035,
                            "name": "newname",
                            "start": 1460028,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "finish": 1460040,
                    "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1460000,
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1460018,
                "start": 1460009,
                "type": "setfield"
            }
        ],
        "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
        "name": "os.rename",
        "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1640028,
                            "name": "locale",
                            "start": 1640022,
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": 1640038,
                            "name": "category",
                            "start": 1640030,
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": 1640043,
                    "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1640000,
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1640021,
                "start": 1640009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
        "name": "os.setlocale",
        "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2300021,
                            "name": "date",
                            "start": 2300017,
                            "type": "local",
                            "view": "osdateparam?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "finish": 2300026,
                    "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2300000,
                    "type": "function",
                    "view": "function os.time(date?: osdateparam)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 2300016,
                "start": 2300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
        "name": "os.time",
        "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "finish": 2390025,
                    "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2390000,
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 2390019,
                "start": 2390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
        "name": "os.tmpname",
        "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "finish": 420012,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "start": 420010,
                    "type": "table",
                    "view": "packagelib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 420007,
                "start": 420000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
        "name": "package",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                    "finish": 540003,
                    "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                    "start": 490017,
                    "type": "string",
                    "view": "string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 490014,
                "start": 490000,
                "type": "setfield"
            }
        ],
        "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
        "name": "package.config",
        "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                    "finish": 620020,
                    "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                    "start": 620018,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 620015,
                "start": 620000,
                "type": "setfield"
            }
        ],
        "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
        "name": "package.loaders",
        "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 720032,
                            "name": "libname",
                            "start": 720025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 720042,
                            "name": "funcname",
                            "start": 720034,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "finish": 720047,
                    "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 720000,
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 720024,
                "start": 720009,
                "type": "setfield"
            }
        ],
        "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
        "name": "package.loadlib",
        "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 43,
                    "start": 15,
                    "type": "binary",
                    "view": "unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/spec/exasol/vscl/queryrenderer/ImportAppender_spec.lua",
                "finish": 12,
                "start": 0,
                "type": "setfield"
            }
        ],
        "name": "package.path",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "finish": 40003,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 20031,
                    "type": "function",
                    "view": "function ()\n  -> unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/spec/exasol/vscl/RequestDispatcher_spec.lua",
                "finish": 20028,
                "start": 20000,
                "type": "setindex"
            }
        ],
        "name": "package.preload.remotelog",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                    "finish": 800022,
                    "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                    "start": 800020,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 800017,
                "start": 800000,
                "type": "setfield"
            }
        ],
        "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
        "name": "package.searchers",
        "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950032,
                            "name": "name",
                            "start": 950028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950038,
                            "name": "path",
                            "start": 950034,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950043,
                            "name": "sep",
                            "start": 950040,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 950048,
                            "name": "rep",
                            "start": 950045,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "finish": 950053,
                    "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 950027,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
        "name": "package.searchpath",
        "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1040030,
                            "name": "module",
                            "start": 1040024,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "finish": 1040035,
                    "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "start": 1040000,
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 1040023,
                "start": 1040009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
        "name": "package.seeall",
        "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2100016,
                            "name": "t",
                            "start": 2100015,
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "finish": 2100021,
                    "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": 2100000,
                    "type": "function",
                    "view": "function pairs(t: <T:table>)\n  -> fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>\n  2. <T:table>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2100014,
                "start": 2100009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
        "name": "pairs",
        "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all key–value pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2240016,
                            "name": "f",
                            "start": 2240015,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2240022,
                            "name": "arg1",
                            "start": 2240018,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2240027,
                            "start": 2240024,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "finish": 2240032,
                    "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2240000,
                    "type": "function",
                    "view": "function pcall(f: fun(...any):...unknown, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2240014,
                "start": 2240009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
        "name": "pcall",
        "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 160021,
                            "name": "name",
                            "start": 160017,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 160028,
                            "name": "block",
                            "start": 160023,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Mark a test as placeholder.\n\nThis will not fail or pass, it will simply be marked as \"pending\".",
                    "finish": 160033,
                    "rawdesc": "Mark a test as placeholder.\n\nThis will not fail or pass, it will simply be marked as \"pending\".",
                    "start": 160000,
                    "type": "function",
                    "view": "function pending(name: string, block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 160016,
                "start": 160009,
                "type": "setglobal"
            }
        ],
        "desc": "Mark a test as placeholder.\n\nThis will not fail or pass, it will simply be marked as \"pending\".",
        "name": "pending",
        "rawdesc": "Mark a test as placeholder.\n\nThis will not fail or pass, it will simply be marked as \"pending\".",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2340018,
                            "start": 2340015,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "finish": 2340023,
                    "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "start": 2340000,
                    "type": "function",
                    "view": "function print(...any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2340014,
                "start": 2340009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
        "name": "print",
        "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "Randomize tests nested in this block.\n\n## Example\n```\ndescribe(\"A randomized test\", function()\n    randomize()\n    it(\"My order is random\", function() end)\n    it(\"My order is also random\", function() end)\nend)\n```",
                    "finish": 1120024,
                    "rawdesc": "Randomize tests nested in this block.\n\n## Example\n```\ndescribe(\"A randomized test\", function()\n    randomize()\n    it(\"My order is random\", function() end)\n    it(\"My order is also random\", function() end)\nend)\n```",
                    "start": 1120000,
                    "type": "function",
                    "view": "function randomize()"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1120018,
                "start": 1120009,
                "type": "setglobal"
            }
        ],
        "desc": "Randomize tests nested in this block.\n\n## Example\n```\ndescribe(\"A randomized test\", function()\n    randomize()\n    it(\"My order is random\", function() end)\n    it(\"My order is also random\", function() end)\nend)\n```",
        "name": "randomize",
        "rawdesc": "Randomize tests nested in this block.\n\n## Example\n```\ndescribe(\"A randomized test\", function()\n    randomize()\n    it(\"My order is random\", function() end)\n    it(\"My order is also random\", function() end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2450020,
                            "name": "v1",
                            "start": 2450018,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2450024,
                            "name": "v2",
                            "start": 2450022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "finish": 2450029,
                    "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 2450000,
                    "type": "function",
                    "view": "function rawequal(v1: any, v2: any)\n  -> boolean"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2450017,
                "start": 2450009,
                "type": "setglobal"
            }
        ],
        "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
        "name": "rawequal",
        "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2560021,
                            "name": "table",
                            "start": 2560016,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 2560028,
                            "name": "index",
                            "start": 2560023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "finish": 2560033,
                    "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2560000,
                    "type": "function",
                    "view": "function rawget(table: table, index: any)\n  -> any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2560015,
                "start": 2560009,
                "type": "setglobal"
            }
        ],
        "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
        "name": "rawget",
        "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2660017,
                            "name": "v",
                            "start": 2660016,
                            "type": "local",
                            "view": "string|table"
                        }
                    ],
                    "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "finish": 2660022,
                    "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "returns": [
                        {
                            "name": "len",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2660000,
                    "type": "function",
                    "view": "function rawlen(v: string|table)\n  -> len: integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2660015,
                "start": 2660009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
        "name": "rawlen",
        "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2790021,
                            "name": "table",
                            "start": 2790016,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 2790028,
                            "name": "index",
                            "start": 2790023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2790035,
                            "name": "value",
                            "start": 2790030,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "finish": 2790040,
                    "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 2790000,
                    "type": "function",
                    "view": "function rawset(table: table, index: any, value: any)\n  -> table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2790015,
                "start": 2790009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
        "name": "rawset",
        "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 100024,
                            "name": "modname",
                            "start": 100017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "finish": 100029,
                    "rawdesc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        },
                        {
                            "name": "loaderdata",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 100000,
                    "type": "function",
                    "view": "function require(modname: string)\n  -> unknown\n  2. loaderdata: unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 100016,
                "start": 100009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
        "name": "require",
        "rawdesc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2900021,
                            "name": "index",
                            "start": 2900016,
                            "type": "local",
                            "view": "integer|\"#\""
                        },
                        {
                            "finish": 2900026,
                            "start": 2900023,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "finish": 2900031,
                    "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2900000,
                    "type": "function",
                    "view": "function select(index: integer|\"#\", ...any)\n  -> any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2900015,
                "start": 2900009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
        "name": "select",
        "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3010018,
                            "name": "f",
                            "start": 3010017,
                            "type": "local",
                            "view": "fun(...any):...integer|unknown"
                        },
                        {
                            "finish": 3010025,
                            "name": "table",
                            "start": 3010020,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "finish": 3010030,
                    "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": 3010000,
                    "type": "function",
                    "view": "function setfenv(f: fun(...any):...integer|unknown, table: table)\n  -> function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3010016,
                "start": 3010009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
        "name": "setfenv",
        "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3470027,
                            "name": "table",
                            "start": 3470022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 3470038,
                            "name": "metatable",
                            "start": 3470029,
                            "type": "local",
                            "view": "(table|metatable)?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "finish": 3470043,
                    "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 3470000,
                    "type": "function",
                    "view": "function setmetatable(table: table, metatable?: table|metatable)\n  -> table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3470021,
                "start": 3470009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
        "name": "setmetatable",
        "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2140020,
                            "name": "block",
                            "start": 2140015,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Runs first in a context block before any tests.\n\nWill always run even if there are no child tests to run. If you don't want\nthem to run regardless, you can use `lazy_setup()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    setup(function()\n         helper = require(\"helper\")\n    end)\n\n    it(\"Can use helper\", function()\n        assert.is_not.Nil(helper)\n    end)\nend)\n```",
                    "finish": 2140025,
                    "rawdesc": "Runs first in a context block before any tests.\n\nWill always run even if there are no child tests to run. If you don't want\nthem to run regardless, you can use `lazy_setup()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    setup(function()\n         helper = require(\"helper\")\n    end)\n\n    it(\"Can use helper\", function()\n        assert.is_not.Nil(helper)\n    end)\nend)\n```",
                    "start": 2140000,
                    "type": "function",
                    "view": "function setup(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2140014,
                "start": 2140009,
                "type": "setglobal"
            }
        ],
        "desc": "Runs first in a context block before any tests.\n\nWill always run even if there are no child tests to run. If you don't want\nthem to run regardless, you can use `lazy_setup()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    setup(function()\n         helper = require(\"helper\")\n    end)\n\n    it(\"Can use helper\", function()\n        assert.is_not.Nil(helper)\n    end)\nend)\n```",
        "name": "setup",
        "rawdesc": "Runs first in a context block before any tests.\n\nWill always run even if there are no child tests to run. If you don't want\nthem to run regardless, you can use `lazy_setup()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Test something\", function()\n    local helper\n\n    setup(function()\n         helper = require(\"helper\")\n    end)\n\n    it(\"Can use helper\", function()\n        assert.is_not.Nil(helper)\n    end)\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1300009,
                    "start": 1300007,
                    "type": "getglobal",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1300004,
                "start": 1300000,
                "type": "setglobal"
            }
        ],
        "name": "spec",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 30029,
                    "start": 30006,
                    "type": "select",
                    "view": "unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 30003,
                "start": 30000,
                "type": "setglobal"
            }
        ],
        "name": "spy",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 2160020,
                    "start": 2160015,
                    "type": "getglobal",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2160012,
                "start": 2160000,
                "type": "setglobal"
            }
        ],
        "name": "strict_setup",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 2600026,
                    "start": 2600018,
                    "type": "getglobal",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2600015,
                "start": 2600000,
                "type": "setglobal"
            }
        ],
        "name": "strict_teardown",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "finish": 80011,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "start": 80009,
                    "type": "table",
                    "view": "stringlib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 80006,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
        "name": "string",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 200022,
                            "name": "s",
                            "start": 200021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 200025,
                            "name": "i",
                            "start": 200024,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 200028,
                            "name": "j",
                            "start": 200027,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": 200033,
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 200000,
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 200020,
                "start": 200009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
        "name": "string.byte",
        "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 310025,
                            "name": "byte",
                            "start": 310021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 310030,
                            "start": 310027,
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": 310035,
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 310000,
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 310020,
                "start": 310009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
        "name": "string.char",
        "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 420022,
                            "name": "f",
                            "start": 420021,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 420029,
                            "name": "strip",
                            "start": 420024,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": 420034,
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 420000,
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 420020,
                "start": 420009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
        "name": "string.dump",
        "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 570022,
                            "name": "s",
                            "start": 570021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 570031,
                            "name": "pattern",
                            "start": 570024,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 570037,
                            "name": "init",
                            "start": 570033,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 570044,
                            "name": "plain",
                            "start": 570039,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
                    "finish": 570049,
                    "rawdesc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 570000,
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 570020,
                "start": 570009,
                "type": "setfield"
            }
        ],
        "desc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` — captured",
        "name": "string.find",
        "rawdesc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680024,
                            "name": "s",
                            "start": 680023,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 680029,
                            "start": 680026,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": 680034,
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 680000,
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 680022,
                "start": 680009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
        "name": "string.format",
        "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 890024,
                            "name": "s",
                            "start": 890023,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 890033,
                            "name": "pattern",
                            "start": 890026,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 890039,
                            "name": "init",
                            "start": 890035,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": 890044,
                    "rawdesc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": 890000,
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number, init?: integer)\n  -> fun():string, ...unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 890022,
                "start": 890009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
        "name": "string.gmatch",
        "rawdesc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1020022,
                            "name": "s",
                            "start": 1020021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1020031,
                            "name": "pattern",
                            "start": 1020024,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1020037,
                            "name": "repl",
                            "start": 1020033,
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": 1020040,
                            "name": "n",
                            "start": 1020039,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": 1020045,
                    "rawdesc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1020000,
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1020020,
                "start": 1020009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
        "name": "string.gsub",
        "rawdesc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120021,
                            "name": "s",
                            "start": 1120020,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": 1120026,
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1120019,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
        "name": "string.len",
        "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1220023,
                            "name": "s",
                            "start": 1220022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": 1220028,
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1220000,
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1220021,
                "start": 1220009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
        "name": "string.lower",
        "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1340023,
                            "name": "s",
                            "start": 1340022,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1340032,
                            "name": "pattern",
                            "start": 1340025,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1340038,
                            "name": "init",
                            "start": 1340034,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": 1340043,
                    "rawdesc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1340000,
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1340021,
                "start": 1340009,
                "type": "setfield"
            }
        ],
        "desc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
        "name": "string.match",
        "rawdesc": "\nLooks for the first match of `pattern` (see [§6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1480024,
                            "name": "fmt",
                            "start": 1480021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1480028,
                            "name": "v1",
                            "start": 1480026,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1480032,
                            "name": "v2",
                            "start": 1480030,
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": 1480037,
                            "start": 1480034,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": 1480042,
                    "rawdesc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1480000,
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1480020,
                "start": 1480009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
        "name": "string.pack",
        "rawdesc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1590028,
                            "name": "fmt",
                            "start": 1590025,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": 1590033,
                    "rawdesc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1590000,
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1590024,
                "start": 1590009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
        "name": "string.packsize",
        "rawdesc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1710021,
                            "name": "s",
                            "start": 1710020,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1710024,
                            "name": "n",
                            "start": 1710023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1710029,
                            "name": "sep",
                            "start": 1710026,
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": 1710034,
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1710000,
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1710019,
                "start": 1710009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
        "name": "string.rep",
        "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1810025,
                            "name": "s",
                            "start": 1810024,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": 1810030,
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1810000,
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1810023,
                "start": 1810009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
        "name": "string.reverse",
        "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1930021,
                            "name": "s",
                            "start": 1930020,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1930024,
                            "name": "i",
                            "start": 1930023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1930027,
                            "name": "j",
                            "start": 1930026,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": 1930032,
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1930019,
                "start": 1930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
        "name": "string.sub",
        "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2070026,
                            "name": "fmt",
                            "start": 2070023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 2070029,
                            "name": "s",
                            "start": 2070028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 2070034,
                            "name": "pos",
                            "start": 2070031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": 2070039,
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "offset",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2070000,
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any\n  2. offset: integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 2070022,
                "start": 2070009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
        "name": "string.unpack",
        "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2170023,
                            "name": "s",
                            "start": 2170022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": 2170028,
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2170000,
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 2170021,
                "start": 2170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
        "name": "string.upper",
        "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 40031,
                    "start": 40007,
                    "type": "select",
                    "view": "unknown"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 40004,
                "start": 40000,
                "type": "setglobal"
            }
        ],
        "name": "stub",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "finish": 80010,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "start": 80008,
                    "type": "table",
                    "view": "tablelib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 80005,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
        "name": "table",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 210026,
                            "name": "list",
                            "start": 210022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 210031,
                            "name": "sep",
                            "start": 210028,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 210034,
                            "name": "i",
                            "start": 210033,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 210037,
                            "name": "j",
                            "start": 210036,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "finish": 210042,
                    "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 210000,
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 210021,
                "start": 210009,
                "type": "setfield"
            }
        ],
        "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
        "name": "table.concat",
        "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1250027,
                            "name": "list",
                            "start": 1250023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1250037,
                            "name": "callback",
                            "start": 1250029,
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "finish": 1250042,
                    "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1250022,
                "start": 1250009,
                "type": "setfield"
            }
        ],
        "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
        "name": "table.foreach",
        "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1380028,
                            "name": "list",
                            "start": 1380024,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1380038,
                            "name": "callback",
                            "start": 1380030,
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "finish": 1380043,
                    "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": 1380000,
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1380023,
                "start": 1380009,
                "type": "setfield"
            }
        ],
        "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
        "name": "table.foreachi",
        "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1510024,
                            "name": "list",
                            "start": 1510020,
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "finish": 1510029,
                    "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1510000,
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1510019,
                "start": 1510009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
        "name": "table.getn",
        "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 320026,
                            "name": "list",
                            "start": 320022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 320031,
                            "name": "pos",
                            "start": 320028,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 320038,
                            "name": "value",
                            "start": 320033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "finish": 320043,
                    "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "start": 320000,
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 320021,
                "start": 320009,
                "type": "setfield"
            }
        ],
        "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
        "name": "table.insert",
        "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430025,
                            "name": "table",
                            "start": 430020,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "finish": 430030,
                    "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 430019,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
        "name": "table.maxn",
        "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 630022,
                            "name": "a1",
                            "start": 630020,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 630025,
                            "name": "f",
                            "start": 630024,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 630028,
                            "name": "e",
                            "start": 630027,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 630031,
                            "name": "t",
                            "start": 630030,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 630035,
                            "name": "a2",
                            "start": 630033,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "finish": 630040,
                    "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 630000,
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 630019,
                "start": 630009,
                "type": "setfield"
            }
        ],
        "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
        "name": "table.move",
        "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],··· =\na1[f],···,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 730023,
                            "start": 730020,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "finish": 730028,
                    "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 730000,
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 730019,
                "start": 730009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
        "name": "table.pack",
        "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830026,
                            "name": "list",
                            "start": 830022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 830031,
                            "name": "pos",
                            "start": 830028,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "finish": 830036,
                    "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 830021,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
        "name": "table.remove",
        "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930024,
                            "name": "list",
                            "start": 930020,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 930030,
                            "name": "comp",
                            "start": 930026,
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "finish": 930035,
                    "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "start": 930000,
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 930019,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
        "name": "table.sort",
        "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120026,
                            "name": "list",
                            "start": 1120022,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 1120029,
                            "name": "i",
                            "start": 1120028,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 1120032,
                            "name": "j",
                            "start": 1120031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "finish": 1120037,
                    "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function table.unpack(list: <T>[], i?: integer, j?: integer)\n  -> ...<T>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1120021,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
        "name": "table.unpack",
        "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2580023,
                            "name": "block",
                            "start": 2580018,
                            "type": "local",
                            "view": "fun()"
                        }
                    ],
                    "desc": "Runs last in a context block after all tests.\n\nWill run ever if no tests were run in this context. If you don't want this\nto run regardless, you can use `lazy_teardown()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    it(\"Sets a persistent value\", function()\n        persist = \"hello\"\n    end)\n\n    teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
                    "finish": 2580028,
                    "rawdesc": "Runs last in a context block after all tests.\n\nWill run ever if no tests were run in this context. If you don't want this\nto run regardless, you can use `lazy_teardown()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    it(\"Sets a persistent value\", function()\n        persist = \"hello\"\n    end)\n\n    teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
                    "start": 2580000,
                    "type": "function",
                    "view": "function teardown(block: fun())"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 2580017,
                "start": 2580009,
                "type": "setglobal"
            }
        ],
        "desc": "Runs last in a context block after all tests.\n\nWill run ever if no tests were run in this context. If you don't want this\nto run regardless, you can use `lazy_teardown()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    it(\"Sets a persistent value\", function()\n        persist = \"hello\"\n    end)\n\n    teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
        "name": "teardown",
        "rawdesc": "Runs last in a context block after all tests.\n\nWill run ever if no tests were run in this context. If you don't want this\nto run regardless, you can use `lazy_teardown()` or use the `--lazy` flag\nwhen running.\n\n## Example\n```\ndescribe(\"Remove persistent value\", function()\n    local persist\n\n    it(\"Sets a persistent value\", function()\n        persist = \"hello\"\n    end)\n\n    teardown(function()\n         persist = nil\n    end)\n\nend)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "finish": 1310009,
                    "start": 1310007,
                    "type": "getglobal",
                    "view": "function"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/lua-type-definitions/busted/library/busted.lua",
                "finish": 1310004,
                "start": 1310000,
                "type": "setglobal"
            }
        ],
        "name": "test",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3610019,
                            "name": "e",
                            "start": 3610018,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "finish": 3610024,
                    "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number?"
                        }
                    ],
                    "start": 3610000,
                    "type": "function",
                    "view": "function tonumber(e: any)\n  -> number?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3610017,
                "start": 3610009,
                "type": "setglobal"
            }
        ],
        "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
        "name": "tonumber",
        "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3760019,
                            "name": "v",
                            "start": 3760018,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "finish": 3760024,
                    "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 3760000,
                    "type": "function",
                    "view": "function tostring(v: any)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3760017,
                "start": 3760009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
        "name": "tostring",
        "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3970015,
                            "name": "v",
                            "start": 3970014,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "finish": 3970020,
                    "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "returns": [
                        {
                            "name": "type",
                            "type": "function.return",
                            "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                        }
                    ],
                    "start": 3970000,
                    "type": "function",
                    "view": "function type(v: any)\n  -> type: \"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3970013,
                "start": 3970009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
        "name": "type",
        "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4460020,
                            "name": "list",
                            "start": 4460016,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 4460023,
                            "name": "i",
                            "start": 4460022,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 4460026,
                            "name": "j",
                            "start": 4460025,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "finish": 4460031,
                    "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 4460000,
                    "type": "function",
                    "view": "function unpack(list: <T>[], i?: integer, j?: integer)\n  -> ...<T>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4460015,
                "start": 4460009,
                "type": "setglobal"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4530020,
                            "name": "list",
                            "start": 4530016,
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> }"
                        }
                    ],
                    "finish": 4530025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        }
                    ],
                    "start": 4530000,
                    "type": "function",
                    "view": "function unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> })\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4530015,
                "start": 4530009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
        "name": "unpack",
        "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ···, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                    "finish": 150009,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                    "start": 150007,
                    "type": "table",
                    "view": "utf8lib"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 150004,
                "start": 150000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
        "name": "utf8",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 260023,
                            "name": "code",
                            "start": 260019,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 260028,
                            "start": 260025,
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "finish": 260033,
                    "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 260000,
                    "type": "function",
                    "view": "function utf8.char(code: integer, ...integer)\n  -> string"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 260018,
                "start": 260009,
                "type": "setfield"
            }
        ],
        "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
        "name": "utf8.char",
        "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 570025,
                            "name": "s",
                            "start": 570024,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 570028,
                            "name": "i",
                            "start": 570027,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 570031,
                            "name": "j",
                            "start": 570030,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 570036,
                            "name": "lax",
                            "start": 570033,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "finish": 570041,
                    "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "returns": [
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 570000,
                    "type": "function",
                    "view": "function utf8.codepoint(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> code: integer\n  2. ...integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 570023,
                "start": 570009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
        "name": "utf8.codepoint",
        "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430021,
                            "name": "s",
                            "start": 430020,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 430026,
                            "name": "lax",
                            "start": 430023,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "finish": 430031,
                    "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(s: string, p: integer):integer, integer"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function utf8.codes(s: string, lax?: boolean)\n  -> fun(s: string, p: integer):integer, integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 430019,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
        "name": "utf8.codes",
        "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 710019,
                            "name": "s",
                            "start": 710018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 710022,
                            "name": "i",
                            "start": 710021,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 710025,
                            "name": "j",
                            "start": 710024,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 710030,
                            "name": "lax",
                            "start": 710027,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "finish": 710035,
                    "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        },
                        {
                            "name": "errpos",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 710000,
                    "type": "function",
                    "view": "function utf8.len(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> integer?\n  2. errpos: integer?"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 710017,
                "start": 710009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
        "name": "utf8.len",
        "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830022,
                            "name": "s",
                            "start": 830021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 830025,
                            "name": "n",
                            "start": 830024,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 830028,
                            "name": "i",
                            "start": 830027,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "finish": 830033,
                    "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "returns": [
                        {
                            "name": "p",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function utf8.offset(s: string, n: integer, i?: integer)\n  -> p: integer"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 830020,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
        "name": "utf8.offset",
        "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4140021,
                            "name": "message",
                            "start": 4140014,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 4140026,
                            "start": 4140023,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "finish": 4140031,
                    "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "start": 4140000,
                    "type": "function",
                    "view": "function warn(message: string, ...any)"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4140013,
                "start": 4140009,
                "type": "setglobal"
            }
        ],
        "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
        "name": "warn",
        "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4280017,
                            "name": "f",
                            "start": 4280016,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 4280023,
                            "name": "msgh",
                            "start": 4280019,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "finish": 4280029,
                            "name": "arg1",
                            "start": 4280025,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 4280034,
                            "start": 4280031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "finish": 4280039,
                    "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 4280000,
                    "type": "function",
                    "view": "function xpcall(f: fun(...any):...unknown, msgh: function, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "file:///home/runner/work/virtual-schema-common-lua/virtual-schema-common-lua/target/luals/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4280015,
                "start": 4280009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
        "name": "xpcall",
        "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
        "type": "variable"
    }
]